
Cos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b9c  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000027c4  08008d4c  08008d4c  00009d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b510  0800b510  0000d0e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b510  0800b510  0000c510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b518  0800b518  0000d0e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b518  0800b518  0000c518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b51c  0800b51c  0000c51c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000e4  20000000  0800b520  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d0e4  2**0
                  CONTENTS
 10 .bss          000005f0  200000e4  200000e4  0000d0e4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200006d4  200006d4  0000d0e4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d0e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015c17  00000000  00000000  0000d114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000367b  00000000  00000000  00022d2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014b8  00000000  00000000  000263a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fd0  00000000  00000000  00027860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026e4b  00000000  00000000  00028830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000180c3  00000000  00000000  0004f67b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e13a7  00000000  00000000  0006773e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00148ae5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000060c8  00000000  00000000  00148b28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004c  00000000  00000000  0014ebf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000e4 	.word	0x200000e4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008d34 	.word	0x08008d34

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000e8 	.word	0x200000e8
 80001ec:	08008d34 	.word	0x08008d34

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <DrawCircle>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void DrawCircle(uint16_t x, uint16_t y, uint32_t color){
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	4603      	mov	r3, r0
 8000588:	603a      	str	r2, [r7, #0]
 800058a:	80fb      	strh	r3, [r7, #6]
 800058c:	460b      	mov	r3, r1
 800058e:	80bb      	strh	r3, [r7, #4]
	  BSP_LCD_SetTextColor(color);
 8000590:	6838      	ldr	r0, [r7, #0]
 8000592:	f002 f835 	bl	8002600 <BSP_LCD_SetTextColor>
	  BSP_LCD_FillCircle(x, y, CIRCLE_RADIUS);
 8000596:	88b9      	ldrh	r1, [r7, #4]
 8000598:	88fb      	ldrh	r3, [r7, #6]
 800059a:	2228      	movs	r2, #40	@ 0x28
 800059c:	4618      	mov	r0, r3
 800059e:	f002 fab3 	bl	8002b08 <BSP_LCD_FillCircle>
}
 80005a2:	bf00      	nop
 80005a4:	3708      	adds	r7, #8
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
	...

080005ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b090      	sub	sp, #64	@ 0x40
 80005b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b2:	f002 ff3b 	bl	800342c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b6:	f000 f8c5 	bl	8000744 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ba:	f000 fadb 	bl	8000b74 <MX_GPIO_Init>
  MX_DMA2D_Init();
 80005be:	f000 f931 	bl	8000824 <MX_DMA2D_Init>
  MX_FMC_Init();
 80005c2:	f000 fa89 	bl	8000ad8 <MX_FMC_Init>
  MX_I2C3_Init();
 80005c6:	f000 f95f 	bl	8000888 <MX_I2C3_Init>
  MX_LTDC_Init();
 80005ca:	f000 f99d 	bl	8000908 <MX_LTDC_Init>
  MX_SPI5_Init();
 80005ce:	f000 fa4d 	bl	8000a6c <MX_SPI5_Init>

  //TS_StateTypeDef TS_State;
  uint32_t start_time, end_time;
  uint16_t hits = 0;
 80005d2:	2300      	movs	r3, #0
 80005d4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  /* USER CODE END 2 */

  /* Infinite loop */

  /* USER CODE BEGIN WHILE */
  BSP_LCD_Init();
 80005d6:	f001 ff1d 	bl	8002414 <BSP_LCD_Init>
  BSP_TS_Init(240, 320);
 80005da:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 80005de:	20f0      	movs	r0, #240	@ 0xf0
 80005e0:	f002 feea 	bl	80033b8 <BSP_TS_Init>
  BSP_LCD_LayerDefaultInit(0, LCD_FRAME_BUFFER);
 80005e4:	f04f 4150 	mov.w	r1, #3489660928	@ 0xd0000000
 80005e8:	2000      	movs	r0, #0
 80005ea:	f001 ff95 	bl	8002518 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(0);
 80005ee:	2000      	movs	r0, #0
 80005f0:	f001 fff6 	bl	80025e0 <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(LCD_COLOR_BLACK);
 80005f4:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 80005f8:	f002 f834 	bl	8002664 <BSP_LCD_Clear>
  BSP_LCD_SetFont(&Font16);
 80005fc:	4849      	ldr	r0, [pc, #292]	@ (8000724 <main+0x178>)
 80005fe:	f002 f817 	bl	8002630 <BSP_LCD_SetFont>


  BSP_LCD_DisplayStringAt(0, 10, (uint8_t*)"Start gry!", CENTER_MODE);
 8000602:	2301      	movs	r3, #1
 8000604:	4a48      	ldr	r2, [pc, #288]	@ (8000728 <main+0x17c>)
 8000606:	210a      	movs	r1, #10
 8000608:	2000      	movs	r0, #0
 800060a:	f002 f897 	bl	800273c <BSP_LCD_DisplayStringAt>
  HAL_Delay(1000);
 800060e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000612:	f002 ff7d 	bl	8003510 <HAL_Delay>
  BSP_LCD_Clear(LCD_COLOR_BLACK);
 8000616:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 800061a:	f002 f823 	bl	8002664 <BSP_LCD_Clear>
  start_time = HAL_GetTick();
 800061e:	f002 ff6b 	bl	80034f8 <HAL_GetTick>
 8000622:	63b8      	str	r0, [r7, #56]	@ 0x38
  while(hits < MAX_HITS){
 8000624:	e046      	b.n	80006b4 <main+0x108>
	  if ( HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET){
 8000626:	2101      	movs	r1, #1
 8000628:	4840      	ldr	r0, [pc, #256]	@ (800072c <main+0x180>)
 800062a:	f003 ffa9 	bl	8004580 <HAL_GPIO_ReadPin>
 800062e:	4603      	mov	r3, r0
 8000630:	2b01      	cmp	r3, #1
 8000632:	d135      	bne.n	80006a0 <main+0xf4>
		  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_SET);
 8000634:	2201      	movs	r2, #1
 8000636:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800063a:	483d      	ldr	r0, [pc, #244]	@ (8000730 <main+0x184>)
 800063c:	f003 ffb8 	bl	80045b0 <HAL_GPIO_WritePin>
		  uint16_t x = rand() % (240 - 2 * CIRCLE_RADIUS) + CIRCLE_RADIUS;
 8000640:	f007 f9c4 	bl	80079cc <rand>
 8000644:	4602      	mov	r2, r0
 8000646:	4b3b      	ldr	r3, [pc, #236]	@ (8000734 <main+0x188>)
 8000648:	fb83 1302 	smull	r1, r3, r3, r2
 800064c:	1199      	asrs	r1, r3, #6
 800064e:	17d3      	asrs	r3, r2, #31
 8000650:	1ac9      	subs	r1, r1, r3
 8000652:	460b      	mov	r3, r1
 8000654:	009b      	lsls	r3, r3, #2
 8000656:	440b      	add	r3, r1
 8000658:	015b      	lsls	r3, r3, #5
 800065a:	1ad1      	subs	r1, r2, r3
 800065c:	b28b      	uxth	r3, r1
 800065e:	3328      	adds	r3, #40	@ 0x28
 8000660:	84fb      	strh	r3, [r7, #38]	@ 0x26
		  uint16_t y = rand() % (240 - 2 * CIRCLE_RADIUS) + CIRCLE_RADIUS;
 8000662:	f007 f9b3 	bl	80079cc <rand>
 8000666:	4602      	mov	r2, r0
 8000668:	4b32      	ldr	r3, [pc, #200]	@ (8000734 <main+0x188>)
 800066a:	fb83 1302 	smull	r1, r3, r3, r2
 800066e:	1199      	asrs	r1, r3, #6
 8000670:	17d3      	asrs	r3, r2, #31
 8000672:	1ac9      	subs	r1, r1, r3
 8000674:	460b      	mov	r3, r1
 8000676:	009b      	lsls	r3, r3, #2
 8000678:	440b      	add	r3, r1
 800067a:	015b      	lsls	r3, r3, #5
 800067c:	1ad1      	subs	r1, r2, r3
 800067e:	b28b      	uxth	r3, r1
 8000680:	3328      	adds	r3, #40	@ 0x28
 8000682:	84bb      	strh	r3, [r7, #36]	@ 0x24
		  DrawCircle(x, y, LCD_COLOR_GREEN);
 8000684:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 8000686:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000688:	f04f 22ff 	mov.w	r2, #4278255360	@ 0xff00ff00
 800068c:	4618      	mov	r0, r3
 800068e:	f7ff ff77 	bl	8000580 <DrawCircle>
		  hits++;
 8000692:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8000694:	3301      	adds	r3, #1
 8000696:	87fb      	strh	r3, [r7, #62]	@ 0x3e
		  HAL_Delay(700);
 8000698:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 800069c:	f002 ff38 	bl	8003510 <HAL_Delay>
	  }
	  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_RESET);
 80006a0:	2200      	movs	r2, #0
 80006a2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006a6:	4822      	ldr	r0, [pc, #136]	@ (8000730 <main+0x184>)
 80006a8:	f003 ff82 	bl	80045b0 <HAL_GPIO_WritePin>
	  BSP_LCD_Clear(LCD_COLOR_BLACK);
 80006ac:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 80006b0:	f001 ffd8 	bl	8002664 <BSP_LCD_Clear>
  while(hits < MAX_HITS){
 80006b4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80006b6:	2b09      	cmp	r3, #9
 80006b8:	d9b5      	bls.n	8000626 <main+0x7a>
          DrawCircle(newX, newY, LCD_COLOR_GREEN);
	  }
	  HAL_Delay(200);
*/
  }
  end_time = HAL_GetTick();
 80006ba:	f002 ff1d 	bl	80034f8 <HAL_GetTick>
 80006be:	6378      	str	r0, [r7, #52]	@ 0x34
  uint32_t total_time_ms = end_time - start_time;
 80006c0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80006c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80006c4:	1ad3      	subs	r3, r2, r3
 80006c6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t seconds = total_time_ms / 1000;
 80006c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80006ca:	4a1b      	ldr	r2, [pc, #108]	@ (8000738 <main+0x18c>)
 80006cc:	fba2 2303 	umull	r2, r3, r2, r3
 80006d0:	099b      	lsrs	r3, r3, #6
 80006d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t miliseconds = (total_time_ms % 1000) * 1000;
 80006d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80006d6:	4b18      	ldr	r3, [pc, #96]	@ (8000738 <main+0x18c>)
 80006d8:	fba3 1302 	umull	r1, r3, r3, r2
 80006dc:	099b      	lsrs	r3, r3, #6
 80006de:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80006e2:	fb01 f303 	mul.w	r3, r1, r3
 80006e6:	1ad3      	subs	r3, r2, r3
 80006e8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80006ec:	fb02 f303 	mul.w	r3, r2, r3
 80006f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  //uint32_t total_time = (end_time - start_time) / 1000;
  char buffer[32];
  sprintf(buffer, "Koniec gry! Czas:%lu.%03lu s", seconds, miliseconds / 1000);
 80006f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80006f4:	4a10      	ldr	r2, [pc, #64]	@ (8000738 <main+0x18c>)
 80006f6:	fba2 2303 	umull	r2, r3, r2, r3
 80006fa:	099b      	lsrs	r3, r3, #6
 80006fc:	1d38      	adds	r0, r7, #4
 80006fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000700:	490e      	ldr	r1, [pc, #56]	@ (800073c <main+0x190>)
 8000702:	f007 fa63 	bl	8007bcc <siprintf>
  BSP_LCD_Clear(LCD_COLOR_BLACK);
 8000706:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 800070a:	f001 ffab 	bl	8002664 <BSP_LCD_Clear>
  BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800070e:	480c      	ldr	r0, [pc, #48]	@ (8000740 <main+0x194>)
 8000710:	f001 ff76 	bl	8002600 <BSP_LCD_SetTextColor>
  BSP_LCD_DisplayStringAt(0, 10,(uint8_t*)buffer, LEFT_MODE);
 8000714:	1d3a      	adds	r2, r7, #4
 8000716:	2303      	movs	r3, #3
 8000718:	210a      	movs	r1, #10
 800071a:	2000      	movs	r0, #0
 800071c:	f002 f80e 	bl	800273c <BSP_LCD_DisplayStringAt>
  while (1)
 8000720:	bf00      	nop
 8000722:	e7fd      	b.n	8000720 <main+0x174>
 8000724:	20000074 	.word	0x20000074
 8000728:	08008d4c 	.word	0x08008d4c
 800072c:	40020000 	.word	0x40020000
 8000730:	40021800 	.word	0x40021800
 8000734:	66666667 	.word	0x66666667
 8000738:	10624dd3 	.word	0x10624dd3
 800073c:	08008d58 	.word	0x08008d58
 8000740:	ffff0000 	.word	0xffff0000

08000744 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b094      	sub	sp, #80	@ 0x50
 8000748:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800074a:	f107 0320 	add.w	r3, r7, #32
 800074e:	2230      	movs	r2, #48	@ 0x30
 8000750:	2100      	movs	r1, #0
 8000752:	4618      	mov	r0, r3
 8000754:	f007 fa9d 	bl	8007c92 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000758:	f107 030c 	add.w	r3, r7, #12
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	605a      	str	r2, [r3, #4]
 8000762:	609a      	str	r2, [r3, #8]
 8000764:	60da      	str	r2, [r3, #12]
 8000766:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000768:	2300      	movs	r3, #0
 800076a:	60bb      	str	r3, [r7, #8]
 800076c:	4b2b      	ldr	r3, [pc, #172]	@ (800081c <SystemClock_Config+0xd8>)
 800076e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000770:	4a2a      	ldr	r2, [pc, #168]	@ (800081c <SystemClock_Config+0xd8>)
 8000772:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000776:	6413      	str	r3, [r2, #64]	@ 0x40
 8000778:	4b28      	ldr	r3, [pc, #160]	@ (800081c <SystemClock_Config+0xd8>)
 800077a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800077c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000780:	60bb      	str	r3, [r7, #8]
 8000782:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000784:	2300      	movs	r3, #0
 8000786:	607b      	str	r3, [r7, #4]
 8000788:	4b25      	ldr	r3, [pc, #148]	@ (8000820 <SystemClock_Config+0xdc>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a24      	ldr	r2, [pc, #144]	@ (8000820 <SystemClock_Config+0xdc>)
 800078e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000792:	6013      	str	r3, [r2, #0]
 8000794:	4b22      	ldr	r3, [pc, #136]	@ (8000820 <SystemClock_Config+0xdc>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800079c:	607b      	str	r3, [r7, #4]
 800079e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007a0:	2301      	movs	r3, #1
 80007a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007a4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007a8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007aa:	2302      	movs	r3, #2
 80007ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007ae:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80007b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80007b4:	2310      	movs	r3, #16
 80007b6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 80007b8:	23b4      	movs	r3, #180	@ 0xb4
 80007ba:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007bc:	2302      	movs	r3, #2
 80007be:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007c0:	2304      	movs	r3, #4
 80007c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c4:	f107 0320 	add.w	r3, r7, #32
 80007c8:	4618      	mov	r0, r3
 80007ca:	f005 fb09 	bl	8005de0 <HAL_RCC_OscConfig>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007d4:	f000 fa4a 	bl	8000c6c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007d8:	f005 fab2 	bl	8005d40 <HAL_PWREx_EnableOverDrive>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80007e2:	f000 fa43 	bl	8000c6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007e6:	230f      	movs	r3, #15
 80007e8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ea:	2302      	movs	r3, #2
 80007ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ee:	2300      	movs	r3, #0
 80007f0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007f2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80007f6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007fc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007fe:	f107 030c 	add.w	r3, r7, #12
 8000802:	2105      	movs	r1, #5
 8000804:	4618      	mov	r0, r3
 8000806:	f005 fd63 	bl	80062d0 <HAL_RCC_ClockConfig>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000810:	f000 fa2c 	bl	8000c6c <Error_Handler>
  }
}
 8000814:	bf00      	nop
 8000816:	3750      	adds	r7, #80	@ 0x50
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	40023800 	.word	0x40023800
 8000820:	40007000 	.word	0x40007000

08000824 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000828:	4b15      	ldr	r3, [pc, #84]	@ (8000880 <MX_DMA2D_Init+0x5c>)
 800082a:	4a16      	ldr	r2, [pc, #88]	@ (8000884 <MX_DMA2D_Init+0x60>)
 800082c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800082e:	4b14      	ldr	r3, [pc, #80]	@ (8000880 <MX_DMA2D_Init+0x5c>)
 8000830:	2200      	movs	r2, #0
 8000832:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8000834:	4b12      	ldr	r3, [pc, #72]	@ (8000880 <MX_DMA2D_Init+0x5c>)
 8000836:	2202      	movs	r2, #2
 8000838:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800083a:	4b11      	ldr	r3, [pc, #68]	@ (8000880 <MX_DMA2D_Init+0x5c>)
 800083c:	2200      	movs	r2, #0
 800083e:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000840:	4b0f      	ldr	r3, [pc, #60]	@ (8000880 <MX_DMA2D_Init+0x5c>)
 8000842:	2200      	movs	r2, #0
 8000844:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 8000846:	4b0e      	ldr	r3, [pc, #56]	@ (8000880 <MX_DMA2D_Init+0x5c>)
 8000848:	2202      	movs	r2, #2
 800084a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800084c:	4b0c      	ldr	r3, [pc, #48]	@ (8000880 <MX_DMA2D_Init+0x5c>)
 800084e:	2200      	movs	r2, #0
 8000850:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000852:	4b0b      	ldr	r3, [pc, #44]	@ (8000880 <MX_DMA2D_Init+0x5c>)
 8000854:	2200      	movs	r2, #0
 8000856:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000858:	4809      	ldr	r0, [pc, #36]	@ (8000880 <MX_DMA2D_Init+0x5c>)
 800085a:	f003 f94d 	bl	8003af8 <HAL_DMA2D_Init>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000864:	f000 fa02 	bl	8000c6c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000868:	2101      	movs	r1, #1
 800086a:	4805      	ldr	r0, [pc, #20]	@ (8000880 <MX_DMA2D_Init+0x5c>)
 800086c:	f003 faa2 	bl	8003db4 <HAL_DMA2D_ConfigLayer>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000876:	f000 f9f9 	bl	8000c6c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	20000100 	.word	0x20000100
 8000884:	4002b000 	.word	0x4002b000

08000888 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800088c:	4b1b      	ldr	r3, [pc, #108]	@ (80008fc <MX_I2C3_Init+0x74>)
 800088e:	4a1c      	ldr	r2, [pc, #112]	@ (8000900 <MX_I2C3_Init+0x78>)
 8000890:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000892:	4b1a      	ldr	r3, [pc, #104]	@ (80008fc <MX_I2C3_Init+0x74>)
 8000894:	4a1b      	ldr	r2, [pc, #108]	@ (8000904 <MX_I2C3_Init+0x7c>)
 8000896:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000898:	4b18      	ldr	r3, [pc, #96]	@ (80008fc <MX_I2C3_Init+0x74>)
 800089a:	2200      	movs	r2, #0
 800089c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800089e:	4b17      	ldr	r3, [pc, #92]	@ (80008fc <MX_I2C3_Init+0x74>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008a4:	4b15      	ldr	r3, [pc, #84]	@ (80008fc <MX_I2C3_Init+0x74>)
 80008a6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80008aa:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008ac:	4b13      	ldr	r3, [pc, #76]	@ (80008fc <MX_I2C3_Init+0x74>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80008b2:	4b12      	ldr	r3, [pc, #72]	@ (80008fc <MX_I2C3_Init+0x74>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008b8:	4b10      	ldr	r3, [pc, #64]	@ (80008fc <MX_I2C3_Init+0x74>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008be:	4b0f      	ldr	r3, [pc, #60]	@ (80008fc <MX_I2C3_Init+0x74>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80008c4:	480d      	ldr	r0, [pc, #52]	@ (80008fc <MX_I2C3_Init+0x74>)
 80008c6:	f003 fe8d 	bl	80045e4 <HAL_I2C_Init>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80008d0:	f000 f9cc 	bl	8000c6c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008d4:	2100      	movs	r1, #0
 80008d6:	4809      	ldr	r0, [pc, #36]	@ (80008fc <MX_I2C3_Init+0x74>)
 80008d8:	f004 fee6 	bl	80056a8 <HAL_I2CEx_ConfigAnalogFilter>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80008e2:	f000 f9c3 	bl	8000c6c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80008e6:	2100      	movs	r1, #0
 80008e8:	4804      	ldr	r0, [pc, #16]	@ (80008fc <MX_I2C3_Init+0x74>)
 80008ea:	f004 ff19 	bl	8005720 <HAL_I2CEx_ConfigDigitalFilter>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80008f4:	f000 f9ba 	bl	8000c6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80008f8:	bf00      	nop
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	20000140 	.word	0x20000140
 8000900:	40005c00 	.word	0x40005c00
 8000904:	000186a0 	.word	0x000186a0

08000908 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b09a      	sub	sp, #104	@ 0x68
 800090c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800090e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000912:	2234      	movs	r2, #52	@ 0x34
 8000914:	2100      	movs	r1, #0
 8000916:	4618      	mov	r0, r3
 8000918:	f007 f9bb 	bl	8007c92 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 800091c:	463b      	mov	r3, r7
 800091e:	2234      	movs	r2, #52	@ 0x34
 8000920:	2100      	movs	r1, #0
 8000922:	4618      	mov	r0, r3
 8000924:	f007 f9b5 	bl	8007c92 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000928:	4b4e      	ldr	r3, [pc, #312]	@ (8000a64 <MX_LTDC_Init+0x15c>)
 800092a:	4a4f      	ldr	r2, [pc, #316]	@ (8000a68 <MX_LTDC_Init+0x160>)
 800092c:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800092e:	4b4d      	ldr	r3, [pc, #308]	@ (8000a64 <MX_LTDC_Init+0x15c>)
 8000930:	2200      	movs	r2, #0
 8000932:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000934:	4b4b      	ldr	r3, [pc, #300]	@ (8000a64 <MX_LTDC_Init+0x15c>)
 8000936:	2200      	movs	r2, #0
 8000938:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800093a:	4b4a      	ldr	r3, [pc, #296]	@ (8000a64 <MX_LTDC_Init+0x15c>)
 800093c:	2200      	movs	r2, #0
 800093e:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000940:	4b48      	ldr	r3, [pc, #288]	@ (8000a64 <MX_LTDC_Init+0x15c>)
 8000942:	2200      	movs	r2, #0
 8000944:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8000946:	4b47      	ldr	r3, [pc, #284]	@ (8000a64 <MX_LTDC_Init+0x15c>)
 8000948:	2207      	movs	r2, #7
 800094a:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 800094c:	4b45      	ldr	r3, [pc, #276]	@ (8000a64 <MX_LTDC_Init+0x15c>)
 800094e:	2203      	movs	r2, #3
 8000950:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8000952:	4b44      	ldr	r3, [pc, #272]	@ (8000a64 <MX_LTDC_Init+0x15c>)
 8000954:	220e      	movs	r2, #14
 8000956:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8000958:	4b42      	ldr	r3, [pc, #264]	@ (8000a64 <MX_LTDC_Init+0x15c>)
 800095a:	2205      	movs	r2, #5
 800095c:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 254;
 800095e:	4b41      	ldr	r3, [pc, #260]	@ (8000a64 <MX_LTDC_Init+0x15c>)
 8000960:	22fe      	movs	r2, #254	@ 0xfe
 8000962:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 325;
 8000964:	4b3f      	ldr	r3, [pc, #252]	@ (8000a64 <MX_LTDC_Init+0x15c>)
 8000966:	f240 1245 	movw	r2, #325	@ 0x145
 800096a:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 260;
 800096c:	4b3d      	ldr	r3, [pc, #244]	@ (8000a64 <MX_LTDC_Init+0x15c>)
 800096e:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000972:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 327;
 8000974:	4b3b      	ldr	r3, [pc, #236]	@ (8000a64 <MX_LTDC_Init+0x15c>)
 8000976:	f240 1247 	movw	r2, #327	@ 0x147
 800097a:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800097c:	4b39      	ldr	r3, [pc, #228]	@ (8000a64 <MX_LTDC_Init+0x15c>)
 800097e:	2200      	movs	r2, #0
 8000980:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000984:	4b37      	ldr	r3, [pc, #220]	@ (8000a64 <MX_LTDC_Init+0x15c>)
 8000986:	2200      	movs	r2, #0
 8000988:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 800098c:	4b35      	ldr	r3, [pc, #212]	@ (8000a64 <MX_LTDC_Init+0x15c>)
 800098e:	2200      	movs	r2, #0
 8000990:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000994:	4833      	ldr	r0, [pc, #204]	@ (8000a64 <MX_LTDC_Init+0x15c>)
 8000996:	f004 ff03 	bl	80057a0 <HAL_LTDC_Init>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_LTDC_Init+0x9c>
  {
    Error_Handler();
 80009a0:	f000 f964 	bl	8000c6c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80009a4:	2300      	movs	r3, #0
 80009a6:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 80009a8:	2300      	movs	r3, #0
 80009aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 80009ac:	2300      	movs	r3, #0
 80009ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 80009b0:	2300      	movs	r3, #0
 80009b2:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80009b4:	2300      	movs	r3, #0
 80009b6:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 80009b8:	2300      	movs	r3, #0
 80009ba:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 80009bc:	2300      	movs	r3, #0
 80009be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80009c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009c4:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80009c6:	2305      	movs	r3, #5
 80009c8:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 80009ca:	2300      	movs	r3, #0
 80009cc:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 80009ce:	2300      	movs	r3, #0
 80009d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 80009d2:	2300      	movs	r3, #0
 80009d4:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 80009d6:	2300      	movs	r3, #0
 80009d8:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 80009dc:	2300      	movs	r3, #0
 80009de:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 80009e2:	2300      	movs	r3, #0
 80009e4:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80009e8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80009ec:	2200      	movs	r2, #0
 80009ee:	4619      	mov	r1, r3
 80009f0:	481c      	ldr	r0, [pc, #112]	@ (8000a64 <MX_LTDC_Init+0x15c>)
 80009f2:	f004 ffa5 	bl	8005940 <HAL_LTDC_ConfigLayer>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_LTDC_Init+0xf8>
  {
    Error_Handler();
 80009fc:	f000 f936 	bl	8000c6c <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8000a00:	2300      	movs	r3, #0
 8000a02:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8000a04:	2300      	movs	r3, #0
 8000a06:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000a10:	2300      	movs	r3, #0
 8000a12:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8000a14:	2300      	movs	r3, #0
 8000a16:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000a1c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a20:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000a22:	2305      	movs	r3, #5
 8000a24:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8000a26:	2300      	movs	r3, #0
 8000a28:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8000a32:	2300      	movs	r3, #0
 8000a34:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8000a44:	463b      	mov	r3, r7
 8000a46:	2201      	movs	r2, #1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4806      	ldr	r0, [pc, #24]	@ (8000a64 <MX_LTDC_Init+0x15c>)
 8000a4c:	f004 ff78 	bl	8005940 <HAL_LTDC_ConfigLayer>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <MX_LTDC_Init+0x152>
  {
    Error_Handler();
 8000a56:	f000 f909 	bl	8000c6c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000a5a:	bf00      	nop
 8000a5c:	3768      	adds	r7, #104	@ 0x68
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	20000194 	.word	0x20000194
 8000a68:	40016800 	.word	0x40016800

08000a6c <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000a70:	4b17      	ldr	r3, [pc, #92]	@ (8000ad0 <MX_SPI5_Init+0x64>)
 8000a72:	4a18      	ldr	r2, [pc, #96]	@ (8000ad4 <MX_SPI5_Init+0x68>)
 8000a74:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000a76:	4b16      	ldr	r3, [pc, #88]	@ (8000ad0 <MX_SPI5_Init+0x64>)
 8000a78:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000a7c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000a7e:	4b14      	ldr	r3, [pc, #80]	@ (8000ad0 <MX_SPI5_Init+0x64>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a84:	4b12      	ldr	r3, [pc, #72]	@ (8000ad0 <MX_SPI5_Init+0x64>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a8a:	4b11      	ldr	r3, [pc, #68]	@ (8000ad0 <MX_SPI5_Init+0x64>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a90:	4b0f      	ldr	r3, [pc, #60]	@ (8000ad0 <MX_SPI5_Init+0x64>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000a96:	4b0e      	ldr	r3, [pc, #56]	@ (8000ad0 <MX_SPI5_Init+0x64>)
 8000a98:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a9c:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a9e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad0 <MX_SPI5_Init+0x64>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000aa4:	4b0a      	ldr	r3, [pc, #40]	@ (8000ad0 <MX_SPI5_Init+0x64>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000aaa:	4b09      	ldr	r3, [pc, #36]	@ (8000ad0 <MX_SPI5_Init+0x64>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ab0:	4b07      	ldr	r3, [pc, #28]	@ (8000ad0 <MX_SPI5_Init+0x64>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000ab6:	4b06      	ldr	r3, [pc, #24]	@ (8000ad0 <MX_SPI5_Init+0x64>)
 8000ab8:	220a      	movs	r2, #10
 8000aba:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000abc:	4804      	ldr	r0, [pc, #16]	@ (8000ad0 <MX_SPI5_Init+0x64>)
 8000abe:	f006 f864 	bl	8006b8a <HAL_SPI_Init>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8000ac8:	f000 f8d0 	bl	8000c6c <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000acc:	bf00      	nop
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	2000023c 	.word	0x2000023c
 8000ad4:	40015000 	.word	0x40015000

08000ad8 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b088      	sub	sp, #32
 8000adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000ade:	1d3b      	adds	r3, r7, #4
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	605a      	str	r2, [r3, #4]
 8000ae6:	609a      	str	r2, [r3, #8]
 8000ae8:	60da      	str	r2, [r3, #12]
 8000aea:	611a      	str	r2, [r3, #16]
 8000aec:	615a      	str	r2, [r3, #20]
 8000aee:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000af0:	4b1e      	ldr	r3, [pc, #120]	@ (8000b6c <MX_FMC_Init+0x94>)
 8000af2:	4a1f      	ldr	r2, [pc, #124]	@ (8000b70 <MX_FMC_Init+0x98>)
 8000af4:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000af6:	4b1d      	ldr	r3, [pc, #116]	@ (8000b6c <MX_FMC_Init+0x94>)
 8000af8:	2201      	movs	r2, #1
 8000afa:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000afc:	4b1b      	ldr	r3, [pc, #108]	@ (8000b6c <MX_FMC_Init+0x94>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000b02:	4b1a      	ldr	r3, [pc, #104]	@ (8000b6c <MX_FMC_Init+0x94>)
 8000b04:	2204      	movs	r2, #4
 8000b06:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000b08:	4b18      	ldr	r3, [pc, #96]	@ (8000b6c <MX_FMC_Init+0x94>)
 8000b0a:	2210      	movs	r2, #16
 8000b0c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000b0e:	4b17      	ldr	r3, [pc, #92]	@ (8000b6c <MX_FMC_Init+0x94>)
 8000b10:	2240      	movs	r2, #64	@ 0x40
 8000b12:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8000b14:	4b15      	ldr	r3, [pc, #84]	@ (8000b6c <MX_FMC_Init+0x94>)
 8000b16:	2280      	movs	r2, #128	@ 0x80
 8000b18:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000b1a:	4b14      	ldr	r3, [pc, #80]	@ (8000b6c <MX_FMC_Init+0x94>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8000b20:	4b12      	ldr	r3, [pc, #72]	@ (8000b6c <MX_FMC_Init+0x94>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000b26:	4b11      	ldr	r3, [pc, #68]	@ (8000b6c <MX_FMC_Init+0x94>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000b2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b6c <MX_FMC_Init+0x94>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8000b32:	2310      	movs	r3, #16
 8000b34:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8000b36:	2310      	movs	r3, #16
 8000b38:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8000b3a:	2310      	movs	r3, #16
 8000b3c:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8000b3e:	2310      	movs	r3, #16
 8000b40:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8000b42:	2310      	movs	r3, #16
 8000b44:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8000b46:	2310      	movs	r3, #16
 8000b48:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8000b4a:	2310      	movs	r3, #16
 8000b4c:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000b4e:	1d3b      	adds	r3, r7, #4
 8000b50:	4619      	mov	r1, r3
 8000b52:	4806      	ldr	r0, [pc, #24]	@ (8000b6c <MX_FMC_Init+0x94>)
 8000b54:	f005 ff88 	bl	8006a68 <HAL_SDRAM_Init>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8000b5e:	f000 f885 	bl	8000c6c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000b62:	bf00      	nop
 8000b64:	3720      	adds	r7, #32
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	20000294 	.word	0x20000294
 8000b70:	a0000140 	.word	0xa0000140

08000b74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b089      	sub	sp, #36	@ 0x24
 8000b78:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	61fb      	str	r3, [r7, #28]
 8000b7e:	4b3a      	ldr	r3, [pc, #232]	@ (8000c68 <MX_GPIO_Init+0xf4>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b82:	4a39      	ldr	r2, [pc, #228]	@ (8000c68 <MX_GPIO_Init+0xf4>)
 8000b84:	f043 0320 	orr.w	r3, r3, #32
 8000b88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b8a:	4b37      	ldr	r3, [pc, #220]	@ (8000c68 <MX_GPIO_Init+0xf4>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8e:	f003 0320 	and.w	r3, r3, #32
 8000b92:	61fb      	str	r3, [r7, #28]
 8000b94:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	61bb      	str	r3, [r7, #24]
 8000b9a:	4b33      	ldr	r3, [pc, #204]	@ (8000c68 <MX_GPIO_Init+0xf4>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9e:	4a32      	ldr	r2, [pc, #200]	@ (8000c68 <MX_GPIO_Init+0xf4>)
 8000ba0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ba4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ba6:	4b30      	ldr	r3, [pc, #192]	@ (8000c68 <MX_GPIO_Init+0xf4>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000baa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bae:	61bb      	str	r3, [r7, #24]
 8000bb0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	617b      	str	r3, [r7, #20]
 8000bb6:	4b2c      	ldr	r3, [pc, #176]	@ (8000c68 <MX_GPIO_Init+0xf4>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bba:	4a2b      	ldr	r2, [pc, #172]	@ (8000c68 <MX_GPIO_Init+0xf4>)
 8000bbc:	f043 0304 	orr.w	r3, r3, #4
 8000bc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bc2:	4b29      	ldr	r3, [pc, #164]	@ (8000c68 <MX_GPIO_Init+0xf4>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc6:	f003 0304 	and.w	r3, r3, #4
 8000bca:	617b      	str	r3, [r7, #20]
 8000bcc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	613b      	str	r3, [r7, #16]
 8000bd2:	4b25      	ldr	r3, [pc, #148]	@ (8000c68 <MX_GPIO_Init+0xf4>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd6:	4a24      	ldr	r2, [pc, #144]	@ (8000c68 <MX_GPIO_Init+0xf4>)
 8000bd8:	f043 0301 	orr.w	r3, r3, #1
 8000bdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bde:	4b22      	ldr	r3, [pc, #136]	@ (8000c68 <MX_GPIO_Init+0xf4>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be2:	f003 0301 	and.w	r3, r3, #1
 8000be6:	613b      	str	r3, [r7, #16]
 8000be8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	60fb      	str	r3, [r7, #12]
 8000bee:	4b1e      	ldr	r3, [pc, #120]	@ (8000c68 <MX_GPIO_Init+0xf4>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf2:	4a1d      	ldr	r2, [pc, #116]	@ (8000c68 <MX_GPIO_Init+0xf4>)
 8000bf4:	f043 0302 	orr.w	r3, r3, #2
 8000bf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bfa:	4b1b      	ldr	r3, [pc, #108]	@ (8000c68 <MX_GPIO_Init+0xf4>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfe:	f003 0302 	and.w	r3, r3, #2
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	60bb      	str	r3, [r7, #8]
 8000c0a:	4b17      	ldr	r3, [pc, #92]	@ (8000c68 <MX_GPIO_Init+0xf4>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0e:	4a16      	ldr	r2, [pc, #88]	@ (8000c68 <MX_GPIO_Init+0xf4>)
 8000c10:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c16:	4b14      	ldr	r3, [pc, #80]	@ (8000c68 <MX_GPIO_Init+0xf4>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c1e:	60bb      	str	r3, [r7, #8]
 8000c20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	607b      	str	r3, [r7, #4]
 8000c26:	4b10      	ldr	r3, [pc, #64]	@ (8000c68 <MX_GPIO_Init+0xf4>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2a:	4a0f      	ldr	r2, [pc, #60]	@ (8000c68 <MX_GPIO_Init+0xf4>)
 8000c2c:	f043 0310 	orr.w	r3, r3, #16
 8000c30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c32:	4b0d      	ldr	r3, [pc, #52]	@ (8000c68 <MX_GPIO_Init+0xf4>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c36:	f003 0310 	and.w	r3, r3, #16
 8000c3a:	607b      	str	r3, [r7, #4]
 8000c3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	603b      	str	r3, [r7, #0]
 8000c42:	4b09      	ldr	r3, [pc, #36]	@ (8000c68 <MX_GPIO_Init+0xf4>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c46:	4a08      	ldr	r2, [pc, #32]	@ (8000c68 <MX_GPIO_Init+0xf4>)
 8000c48:	f043 0308 	orr.w	r3, r3, #8
 8000c4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c4e:	4b06      	ldr	r3, [pc, #24]	@ (8000c68 <MX_GPIO_Init+0xf4>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c52:	f003 0308 	and.w	r3, r3, #8
 8000c56:	603b      	str	r3, [r7, #0]
 8000c58:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c5a:	bf00      	nop
 8000c5c:	3724      	adds	r7, #36	@ 0x24
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	40023800 	.word	0x40023800

08000c6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c70:	b672      	cpsid	i
}
 8000c72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c74:	bf00      	nop
 8000c76:	e7fd      	b.n	8000c74 <Error_Handler+0x8>

08000c78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	607b      	str	r3, [r7, #4]
 8000c82:	4b10      	ldr	r3, [pc, #64]	@ (8000cc4 <HAL_MspInit+0x4c>)
 8000c84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c86:	4a0f      	ldr	r2, [pc, #60]	@ (8000cc4 <HAL_MspInit+0x4c>)
 8000c88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c8e:	4b0d      	ldr	r3, [pc, #52]	@ (8000cc4 <HAL_MspInit+0x4c>)
 8000c90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c96:	607b      	str	r3, [r7, #4]
 8000c98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	603b      	str	r3, [r7, #0]
 8000c9e:	4b09      	ldr	r3, [pc, #36]	@ (8000cc4 <HAL_MspInit+0x4c>)
 8000ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ca2:	4a08      	ldr	r2, [pc, #32]	@ (8000cc4 <HAL_MspInit+0x4c>)
 8000ca4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ca8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000caa:	4b06      	ldr	r3, [pc, #24]	@ (8000cc4 <HAL_MspInit+0x4c>)
 8000cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cb2:	603b      	str	r3, [r7, #0]
 8000cb4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	370c      	adds	r7, #12
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	40023800 	.word	0x40023800

08000cc8 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b085      	sub	sp, #20
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a0b      	ldr	r2, [pc, #44]	@ (8000d04 <HAL_DMA2D_MspInit+0x3c>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d10d      	bne.n	8000cf6 <HAL_DMA2D_MspInit+0x2e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000cda:	2300      	movs	r3, #0
 8000cdc:	60fb      	str	r3, [r7, #12]
 8000cde:	4b0a      	ldr	r3, [pc, #40]	@ (8000d08 <HAL_DMA2D_MspInit+0x40>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce2:	4a09      	ldr	r2, [pc, #36]	@ (8000d08 <HAL_DMA2D_MspInit+0x40>)
 8000ce4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000ce8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cea:	4b07      	ldr	r3, [pc, #28]	@ (8000d08 <HAL_DMA2D_MspInit+0x40>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8000cf6:	bf00      	nop
 8000cf8:	3714      	adds	r7, #20
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	4002b000 	.word	0x4002b000
 8000d08:	40023800 	.word	0x40023800

08000d0c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b08a      	sub	sp, #40	@ 0x28
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d14:	f107 0314 	add.w	r3, r7, #20
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	605a      	str	r2, [r3, #4]
 8000d1e:	609a      	str	r2, [r3, #8]
 8000d20:	60da      	str	r2, [r3, #12]
 8000d22:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a29      	ldr	r2, [pc, #164]	@ (8000dd0 <HAL_I2C_MspInit+0xc4>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d14b      	bne.n	8000dc6 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	613b      	str	r3, [r7, #16]
 8000d32:	4b28      	ldr	r3, [pc, #160]	@ (8000dd4 <HAL_I2C_MspInit+0xc8>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d36:	4a27      	ldr	r2, [pc, #156]	@ (8000dd4 <HAL_I2C_MspInit+0xc8>)
 8000d38:	f043 0304 	orr.w	r3, r3, #4
 8000d3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d3e:	4b25      	ldr	r3, [pc, #148]	@ (8000dd4 <HAL_I2C_MspInit+0xc8>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d42:	f003 0304 	and.w	r3, r3, #4
 8000d46:	613b      	str	r3, [r7, #16]
 8000d48:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	60fb      	str	r3, [r7, #12]
 8000d4e:	4b21      	ldr	r3, [pc, #132]	@ (8000dd4 <HAL_I2C_MspInit+0xc8>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d52:	4a20      	ldr	r2, [pc, #128]	@ (8000dd4 <HAL_I2C_MspInit+0xc8>)
 8000d54:	f043 0301 	orr.w	r3, r3, #1
 8000d58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d5a:	4b1e      	ldr	r3, [pc, #120]	@ (8000dd4 <HAL_I2C_MspInit+0xc8>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5e:	f003 0301 	and.w	r3, r3, #1
 8000d62:	60fb      	str	r3, [r7, #12]
 8000d64:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d66:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d6c:	2312      	movs	r3, #18
 8000d6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d70:	2300      	movs	r3, #0
 8000d72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d74:	2303      	movs	r3, #3
 8000d76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000d78:	2304      	movs	r3, #4
 8000d7a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d7c:	f107 0314 	add.w	r3, r7, #20
 8000d80:	4619      	mov	r1, r3
 8000d82:	4815      	ldr	r0, [pc, #84]	@ (8000dd8 <HAL_I2C_MspInit+0xcc>)
 8000d84:	f003 f944 	bl	8004010 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000d88:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d8e:	2312      	movs	r3, #18
 8000d90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d96:	2303      	movs	r3, #3
 8000d98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000d9a:	2304      	movs	r3, #4
 8000d9c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d9e:	f107 0314 	add.w	r3, r7, #20
 8000da2:	4619      	mov	r1, r3
 8000da4:	480d      	ldr	r0, [pc, #52]	@ (8000ddc <HAL_I2C_MspInit+0xd0>)
 8000da6:	f003 f933 	bl	8004010 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000daa:	2300      	movs	r3, #0
 8000dac:	60bb      	str	r3, [r7, #8]
 8000dae:	4b09      	ldr	r3, [pc, #36]	@ (8000dd4 <HAL_I2C_MspInit+0xc8>)
 8000db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000db2:	4a08      	ldr	r2, [pc, #32]	@ (8000dd4 <HAL_I2C_MspInit+0xc8>)
 8000db4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000db8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dba:	4b06      	ldr	r3, [pc, #24]	@ (8000dd4 <HAL_I2C_MspInit+0xc8>)
 8000dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dbe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000dc2:	60bb      	str	r3, [r7, #8]
 8000dc4:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8000dc6:	bf00      	nop
 8000dc8:	3728      	adds	r7, #40	@ 0x28
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	40005c00 	.word	0x40005c00
 8000dd4:	40023800 	.word	0x40023800
 8000dd8:	40020800 	.word	0x40020800
 8000ddc:	40020000 	.word	0x40020000

08000de0 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C3)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a0b      	ldr	r2, [pc, #44]	@ (8000e1c <HAL_I2C_MspDeInit+0x3c>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d10f      	bne.n	8000e12 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 8000df2:	4b0b      	ldr	r3, [pc, #44]	@ (8000e20 <HAL_I2C_MspDeInit+0x40>)
 8000df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000df6:	4a0a      	ldr	r2, [pc, #40]	@ (8000e20 <HAL_I2C_MspDeInit+0x40>)
 8000df8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8000dfc:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9);
 8000dfe:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e02:	4808      	ldr	r0, [pc, #32]	@ (8000e24 <HAL_I2C_MspDeInit+0x44>)
 8000e04:	f003 fab0 	bl	8004368 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
 8000e08:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e0c:	4806      	ldr	r0, [pc, #24]	@ (8000e28 <HAL_I2C_MspDeInit+0x48>)
 8000e0e:	f003 faab 	bl	8004368 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8000e12:	bf00      	nop
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40005c00 	.word	0x40005c00
 8000e20:	40023800 	.word	0x40023800
 8000e24:	40020800 	.word	0x40020800
 8000e28:	40020000 	.word	0x40020000

08000e2c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b09a      	sub	sp, #104	@ 0x68
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e34:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]
 8000e3c:	605a      	str	r2, [r3, #4]
 8000e3e:	609a      	str	r2, [r3, #8]
 8000e40:	60da      	str	r2, [r3, #12]
 8000e42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e44:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e48:	2230      	movs	r2, #48	@ 0x30
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f006 ff20 	bl	8007c92 <memset>
  if(hltdc->Instance==LTDC)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4a81      	ldr	r2, [pc, #516]	@ (800105c <HAL_LTDC_MspInit+0x230>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	f040 80fa 	bne.w	8001052 <HAL_LTDC_MspInit+0x226>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000e5e:	2308      	movs	r3, #8
 8000e60:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 49;
 8000e62:	2331      	movs	r3, #49	@ 0x31
 8000e64:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2.0;
 8000e66:	2302      	movs	r3, #2
 8000e68:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e72:	4618      	mov	r0, r3
 8000e74:	f005 fc38 	bl	80066e8 <HAL_RCCEx_PeriphCLKConfig>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8000e7e:	f7ff fef5 	bl	8000c6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	623b      	str	r3, [r7, #32]
 8000e86:	4b76      	ldr	r3, [pc, #472]	@ (8001060 <HAL_LTDC_MspInit+0x234>)
 8000e88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e8a:	4a75      	ldr	r2, [pc, #468]	@ (8001060 <HAL_LTDC_MspInit+0x234>)
 8000e8c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000e90:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e92:	4b73      	ldr	r3, [pc, #460]	@ (8001060 <HAL_LTDC_MspInit+0x234>)
 8000e94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e96:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000e9a:	623b      	str	r3, [r7, #32]
 8000e9c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	61fb      	str	r3, [r7, #28]
 8000ea2:	4b6f      	ldr	r3, [pc, #444]	@ (8001060 <HAL_LTDC_MspInit+0x234>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea6:	4a6e      	ldr	r2, [pc, #440]	@ (8001060 <HAL_LTDC_MspInit+0x234>)
 8000ea8:	f043 0320 	orr.w	r3, r3, #32
 8000eac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eae:	4b6c      	ldr	r3, [pc, #432]	@ (8001060 <HAL_LTDC_MspInit+0x234>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb2:	f003 0320 	and.w	r3, r3, #32
 8000eb6:	61fb      	str	r3, [r7, #28]
 8000eb8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eba:	2300      	movs	r3, #0
 8000ebc:	61bb      	str	r3, [r7, #24]
 8000ebe:	4b68      	ldr	r3, [pc, #416]	@ (8001060 <HAL_LTDC_MspInit+0x234>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec2:	4a67      	ldr	r2, [pc, #412]	@ (8001060 <HAL_LTDC_MspInit+0x234>)
 8000ec4:	f043 0301 	orr.w	r3, r3, #1
 8000ec8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eca:	4b65      	ldr	r3, [pc, #404]	@ (8001060 <HAL_LTDC_MspInit+0x234>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ece:	f003 0301 	and.w	r3, r3, #1
 8000ed2:	61bb      	str	r3, [r7, #24]
 8000ed4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	617b      	str	r3, [r7, #20]
 8000eda:	4b61      	ldr	r3, [pc, #388]	@ (8001060 <HAL_LTDC_MspInit+0x234>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ede:	4a60      	ldr	r2, [pc, #384]	@ (8001060 <HAL_LTDC_MspInit+0x234>)
 8000ee0:	f043 0302 	orr.w	r3, r3, #2
 8000ee4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ee6:	4b5e      	ldr	r3, [pc, #376]	@ (8001060 <HAL_LTDC_MspInit+0x234>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eea:	f003 0302 	and.w	r3, r3, #2
 8000eee:	617b      	str	r3, [r7, #20]
 8000ef0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	613b      	str	r3, [r7, #16]
 8000ef6:	4b5a      	ldr	r3, [pc, #360]	@ (8001060 <HAL_LTDC_MspInit+0x234>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000efa:	4a59      	ldr	r2, [pc, #356]	@ (8001060 <HAL_LTDC_MspInit+0x234>)
 8000efc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f02:	4b57      	ldr	r3, [pc, #348]	@ (8001060 <HAL_LTDC_MspInit+0x234>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f0a:	613b      	str	r3, [r7, #16]
 8000f0c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	60fb      	str	r3, [r7, #12]
 8000f12:	4b53      	ldr	r3, [pc, #332]	@ (8001060 <HAL_LTDC_MspInit+0x234>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f16:	4a52      	ldr	r2, [pc, #328]	@ (8001060 <HAL_LTDC_MspInit+0x234>)
 8000f18:	f043 0304 	orr.w	r3, r3, #4
 8000f1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f1e:	4b50      	ldr	r3, [pc, #320]	@ (8001060 <HAL_LTDC_MspInit+0x234>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f22:	f003 0304 	and.w	r3, r3, #4
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	60bb      	str	r3, [r7, #8]
 8000f2e:	4b4c      	ldr	r3, [pc, #304]	@ (8001060 <HAL_LTDC_MspInit+0x234>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f32:	4a4b      	ldr	r2, [pc, #300]	@ (8001060 <HAL_LTDC_MspInit+0x234>)
 8000f34:	f043 0308 	orr.w	r3, r3, #8
 8000f38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f3a:	4b49      	ldr	r3, [pc, #292]	@ (8001060 <HAL_LTDC_MspInit+0x234>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3e:	f003 0308 	and.w	r3, r3, #8
 8000f42:	60bb      	str	r3, [r7, #8]
 8000f44:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f46:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f4a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f50:	2300      	movs	r3, #0
 8000f52:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f54:	2300      	movs	r3, #0
 8000f56:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f58:	230e      	movs	r3, #14
 8000f5a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f5c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000f60:	4619      	mov	r1, r3
 8000f62:	4840      	ldr	r0, [pc, #256]	@ (8001064 <HAL_LTDC_MspInit+0x238>)
 8000f64:	f003 f854 	bl	8004010 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_11
 8000f68:	f641 0358 	movw	r3, #6232	@ 0x1858
 8000f6c:	657b      	str	r3, [r7, #84]	@ 0x54
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6e:	2302      	movs	r3, #2
 8000f70:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f72:	2300      	movs	r3, #0
 8000f74:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f76:	2300      	movs	r3, #0
 8000f78:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f7a:	230e      	movs	r3, #14
 8000f7c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f7e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000f82:	4619      	mov	r1, r3
 8000f84:	4838      	ldr	r0, [pc, #224]	@ (8001068 <HAL_LTDC_MspInit+0x23c>)
 8000f86:	f003 f843 	bl	8004010 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f92:	2300      	movs	r3, #0
 8000f94:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f96:	2300      	movs	r3, #0
 8000f98:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000f9a:	2309      	movs	r3, #9
 8000f9c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f9e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4831      	ldr	r0, [pc, #196]	@ (800106c <HAL_LTDC_MspInit+0x240>)
 8000fa6:	f003 f833 	bl	8004010 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 8000faa:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000fae:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000fbc:	230e      	movs	r3, #14
 8000fbe:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4829      	ldr	r0, [pc, #164]	@ (800106c <HAL_LTDC_MspInit+0x240>)
 8000fc8:	f003 f822 	bl	8004010 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11;
 8000fcc:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8000fd0:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000fde:	230e      	movs	r3, #14
 8000fe0:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fe2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4821      	ldr	r0, [pc, #132]	@ (8001070 <HAL_LTDC_MspInit+0x244>)
 8000fea:	f003 f811 	bl	8004010 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 8000fee:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8000ff2:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001000:	230e      	movs	r3, #14
 8001002:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001004:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001008:	4619      	mov	r1, r3
 800100a:	481a      	ldr	r0, [pc, #104]	@ (8001074 <HAL_LTDC_MspInit+0x248>)
 800100c:	f003 f800 	bl	8004010 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 8001010:	2348      	movs	r3, #72	@ 0x48
 8001012:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001014:	2302      	movs	r3, #2
 8001016:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001018:	2300      	movs	r3, #0
 800101a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101c:	2300      	movs	r3, #0
 800101e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001020:	230e      	movs	r3, #14
 8001022:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001024:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001028:	4619      	mov	r1, r3
 800102a:	4813      	ldr	r0, [pc, #76]	@ (8001078 <HAL_LTDC_MspInit+0x24c>)
 800102c:	f002 fff0 	bl	8004010 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001030:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001034:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001036:	2302      	movs	r3, #2
 8001038:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103a:	2300      	movs	r3, #0
 800103c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103e:	2300      	movs	r3, #0
 8001040:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001042:	2309      	movs	r3, #9
 8001044:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001046:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800104a:	4619      	mov	r1, r3
 800104c:	4808      	ldr	r0, [pc, #32]	@ (8001070 <HAL_LTDC_MspInit+0x244>)
 800104e:	f002 ffdf 	bl	8004010 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8001052:	bf00      	nop
 8001054:	3768      	adds	r7, #104	@ 0x68
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	40016800 	.word	0x40016800
 8001060:	40023800 	.word	0x40023800
 8001064:	40021400 	.word	0x40021400
 8001068:	40020000 	.word	0x40020000
 800106c:	40020400 	.word	0x40020400
 8001070:	40021800 	.word	0x40021800
 8001074:	40020800 	.word	0x40020800
 8001078:	40020c00 	.word	0x40020c00

0800107c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b08a      	sub	sp, #40	@ 0x28
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001084:	f107 0314 	add.w	r3, r7, #20
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	60da      	str	r2, [r3, #12]
 8001092:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a19      	ldr	r2, [pc, #100]	@ (8001100 <HAL_SPI_MspInit+0x84>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d12c      	bne.n	80010f8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	613b      	str	r3, [r7, #16]
 80010a2:	4b18      	ldr	r3, [pc, #96]	@ (8001104 <HAL_SPI_MspInit+0x88>)
 80010a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010a6:	4a17      	ldr	r2, [pc, #92]	@ (8001104 <HAL_SPI_MspInit+0x88>)
 80010a8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80010ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80010ae:	4b15      	ldr	r3, [pc, #84]	@ (8001104 <HAL_SPI_MspInit+0x88>)
 80010b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010b6:	613b      	str	r3, [r7, #16]
 80010b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80010ba:	2300      	movs	r3, #0
 80010bc:	60fb      	str	r3, [r7, #12]
 80010be:	4b11      	ldr	r3, [pc, #68]	@ (8001104 <HAL_SPI_MspInit+0x88>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c2:	4a10      	ldr	r2, [pc, #64]	@ (8001104 <HAL_SPI_MspInit+0x88>)
 80010c4:	f043 0320 	orr.w	r3, r3, #32
 80010c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001104 <HAL_SPI_MspInit+0x88>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ce:	f003 0320 	and.w	r3, r3, #32
 80010d2:	60fb      	str	r3, [r7, #12]
 80010d4:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80010d6:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80010da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010dc:	2302      	movs	r3, #2
 80010de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e0:	2300      	movs	r3, #0
 80010e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010e4:	2303      	movs	r3, #3
 80010e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80010e8:	2305      	movs	r3, #5
 80010ea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010ec:	f107 0314 	add.w	r3, r7, #20
 80010f0:	4619      	mov	r1, r3
 80010f2:	4805      	ldr	r0, [pc, #20]	@ (8001108 <HAL_SPI_MspInit+0x8c>)
 80010f4:	f002 ff8c 	bl	8004010 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 80010f8:	bf00      	nop
 80010fa:	3728      	adds	r7, #40	@ 0x28
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	40015000 	.word	0x40015000
 8001104:	40023800 	.word	0x40023800
 8001108:	40021400 	.word	0x40021400

0800110c <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a08      	ldr	r2, [pc, #32]	@ (800113c <HAL_SPI_MspDeInit+0x30>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d10a      	bne.n	8001134 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 800111e:	4b08      	ldr	r3, [pc, #32]	@ (8001140 <HAL_SPI_MspDeInit+0x34>)
 8001120:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001122:	4a07      	ldr	r2, [pc, #28]	@ (8001140 <HAL_SPI_MspDeInit+0x34>)
 8001124:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001128:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9);
 800112a:	f44f 7160 	mov.w	r1, #896	@ 0x380
 800112e:	4805      	ldr	r0, [pc, #20]	@ (8001144 <HAL_SPI_MspDeInit+0x38>)
 8001130:	f003 f91a 	bl	8004368 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8001134:	bf00      	nop
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	40015000 	.word	0x40015000
 8001140:	40023800 	.word	0x40023800
 8001144:	40021400 	.word	0x40021400

08001148 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001148:	b580      	push	{r7, lr}
 800114a:	b086      	sub	sp, #24
 800114c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800114e:	1d3b      	adds	r3, r7, #4
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	60da      	str	r2, [r3, #12]
 800115a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800115c:	4b3b      	ldr	r3, [pc, #236]	@ (800124c <HAL_FMC_MspInit+0x104>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d16f      	bne.n	8001244 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8001164:	4b39      	ldr	r3, [pc, #228]	@ (800124c <HAL_FMC_MspInit+0x104>)
 8001166:	2201      	movs	r2, #1
 8001168:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	603b      	str	r3, [r7, #0]
 800116e:	4b38      	ldr	r3, [pc, #224]	@ (8001250 <HAL_FMC_MspInit+0x108>)
 8001170:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001172:	4a37      	ldr	r2, [pc, #220]	@ (8001250 <HAL_FMC_MspInit+0x108>)
 8001174:	f043 0301 	orr.w	r3, r3, #1
 8001178:	6393      	str	r3, [r2, #56]	@ 0x38
 800117a:	4b35      	ldr	r3, [pc, #212]	@ (8001250 <HAL_FMC_MspInit+0x108>)
 800117c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800117e:	f003 0301 	and.w	r3, r3, #1
 8001182:	603b      	str	r3, [r7, #0]
 8001184:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001186:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 800118a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118c:	2302      	movs	r3, #2
 800118e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001190:	2300      	movs	r3, #0
 8001192:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001194:	2303      	movs	r3, #3
 8001196:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001198:	230c      	movs	r3, #12
 800119a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800119c:	1d3b      	adds	r3, r7, #4
 800119e:	4619      	mov	r1, r3
 80011a0:	482c      	ldr	r0, [pc, #176]	@ (8001254 <HAL_FMC_MspInit+0x10c>)
 80011a2:	f002 ff35 	bl	8004010 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011a6:	2301      	movs	r3, #1
 80011a8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011aa:	2302      	movs	r3, #2
 80011ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ae:	2300      	movs	r3, #0
 80011b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b2:	2303      	movs	r3, #3
 80011b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80011b6:	230c      	movs	r3, #12
 80011b8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011ba:	1d3b      	adds	r3, r7, #4
 80011bc:	4619      	mov	r1, r3
 80011be:	4826      	ldr	r0, [pc, #152]	@ (8001258 <HAL_FMC_MspInit+0x110>)
 80011c0:	f002 ff26 	bl	8004010 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 80011c4:	f248 1333 	movw	r3, #33075	@ 0x8133
 80011c8:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ca:	2302      	movs	r3, #2
 80011cc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ce:	2300      	movs	r3, #0
 80011d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d2:	2303      	movs	r3, #3
 80011d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80011d6:	230c      	movs	r3, #12
 80011d8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011da:	1d3b      	adds	r3, r7, #4
 80011dc:	4619      	mov	r1, r3
 80011de:	481f      	ldr	r0, [pc, #124]	@ (800125c <HAL_FMC_MspInit+0x114>)
 80011e0:	f002 ff16 	bl	8004010 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80011e4:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80011e8:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ea:	2302      	movs	r3, #2
 80011ec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ee:	2300      	movs	r3, #0
 80011f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f2:	2303      	movs	r3, #3
 80011f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80011f6:	230c      	movs	r3, #12
 80011f8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011fa:	1d3b      	adds	r3, r7, #4
 80011fc:	4619      	mov	r1, r3
 80011fe:	4818      	ldr	r0, [pc, #96]	@ (8001260 <HAL_FMC_MspInit+0x118>)
 8001200:	f002 ff06 	bl	8004010 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001204:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8001208:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120a:	2302      	movs	r3, #2
 800120c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120e:	2300      	movs	r3, #0
 8001210:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001212:	2303      	movs	r3, #3
 8001214:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001216:	230c      	movs	r3, #12
 8001218:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800121a:	1d3b      	adds	r3, r7, #4
 800121c:	4619      	mov	r1, r3
 800121e:	4811      	ldr	r0, [pc, #68]	@ (8001264 <HAL_FMC_MspInit+0x11c>)
 8001220:	f002 fef6 	bl	8004010 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001224:	2360      	movs	r3, #96	@ 0x60
 8001226:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001228:	2302      	movs	r3, #2
 800122a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122c:	2300      	movs	r3, #0
 800122e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001230:	2303      	movs	r3, #3
 8001232:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001234:	230c      	movs	r3, #12
 8001236:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001238:	1d3b      	adds	r3, r7, #4
 800123a:	4619      	mov	r1, r3
 800123c:	480a      	ldr	r0, [pc, #40]	@ (8001268 <HAL_FMC_MspInit+0x120>)
 800123e:	f002 fee7 	bl	8004010 <HAL_GPIO_Init>
 8001242:	e000      	b.n	8001246 <HAL_FMC_MspInit+0xfe>
    return;
 8001244:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001246:	3718      	adds	r7, #24
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	200002c8 	.word	0x200002c8
 8001250:	40023800 	.word	0x40023800
 8001254:	40021400 	.word	0x40021400
 8001258:	40020800 	.word	0x40020800
 800125c:	40021800 	.word	0x40021800
 8001260:	40021000 	.word	0x40021000
 8001264:	40020c00 	.word	0x40020c00
 8001268:	40020400 	.word	0x40020400

0800126c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001274:	f7ff ff68 	bl	8001148 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001278:	bf00      	nop
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}

08001280 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001284:	bf00      	nop
 8001286:	e7fd      	b.n	8001284 <NMI_Handler+0x4>

08001288 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800128c:	bf00      	nop
 800128e:	e7fd      	b.n	800128c <HardFault_Handler+0x4>

08001290 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001294:	bf00      	nop
 8001296:	e7fd      	b.n	8001294 <MemManage_Handler+0x4>

08001298 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800129c:	bf00      	nop
 800129e:	e7fd      	b.n	800129c <BusFault_Handler+0x4>

080012a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012a4:	bf00      	nop
 80012a6:	e7fd      	b.n	80012a4 <UsageFault_Handler+0x4>

080012a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012ac:	bf00      	nop
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr

080012b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012b6:	b480      	push	{r7}
 80012b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012ba:	bf00      	nop
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr

080012c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012c8:	bf00      	nop
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr

080012d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012d6:	f002 f8fb 	bl	80034d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}

080012de <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80012de:	b480      	push	{r7}
 80012e0:	af00      	add	r7, sp, #0
  return 1;
 80012e2:	2301      	movs	r3, #1
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr

080012ee <_kill>:

int _kill(int pid, int sig)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b082      	sub	sp, #8
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
 80012f6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80012f8:	f006 fd1a 	bl	8007d30 <__errno>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2216      	movs	r2, #22
 8001300:	601a      	str	r2, [r3, #0]
  return -1;
 8001302:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001306:	4618      	mov	r0, r3
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <_exit>:

void _exit (int status)
{
 800130e:	b580      	push	{r7, lr}
 8001310:	b082      	sub	sp, #8
 8001312:	af00      	add	r7, sp, #0
 8001314:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001316:	f04f 31ff 	mov.w	r1, #4294967295
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f7ff ffe7 	bl	80012ee <_kill>
  while (1) {}    /* Make sure we hang here */
 8001320:	bf00      	nop
 8001322:	e7fd      	b.n	8001320 <_exit+0x12>

08001324 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b086      	sub	sp, #24
 8001328:	af00      	add	r7, sp, #0
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	60b9      	str	r1, [r7, #8]
 800132e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001330:	2300      	movs	r3, #0
 8001332:	617b      	str	r3, [r7, #20]
 8001334:	e00a      	b.n	800134c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001336:	f3af 8000 	nop.w
 800133a:	4601      	mov	r1, r0
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	1c5a      	adds	r2, r3, #1
 8001340:	60ba      	str	r2, [r7, #8]
 8001342:	b2ca      	uxtb	r2, r1
 8001344:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	3301      	adds	r3, #1
 800134a:	617b      	str	r3, [r7, #20]
 800134c:	697a      	ldr	r2, [r7, #20]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	429a      	cmp	r2, r3
 8001352:	dbf0      	blt.n	8001336 <_read+0x12>
  }

  return len;
 8001354:	687b      	ldr	r3, [r7, #4]
}
 8001356:	4618      	mov	r0, r3
 8001358:	3718      	adds	r7, #24
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}

0800135e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800135e:	b580      	push	{r7, lr}
 8001360:	b086      	sub	sp, #24
 8001362:	af00      	add	r7, sp, #0
 8001364:	60f8      	str	r0, [r7, #12]
 8001366:	60b9      	str	r1, [r7, #8]
 8001368:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800136a:	2300      	movs	r3, #0
 800136c:	617b      	str	r3, [r7, #20]
 800136e:	e009      	b.n	8001384 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	1c5a      	adds	r2, r3, #1
 8001374:	60ba      	str	r2, [r7, #8]
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	4618      	mov	r0, r3
 800137a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	3301      	adds	r3, #1
 8001382:	617b      	str	r3, [r7, #20]
 8001384:	697a      	ldr	r2, [r7, #20]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	429a      	cmp	r2, r3
 800138a:	dbf1      	blt.n	8001370 <_write+0x12>
  }
  return len;
 800138c:	687b      	ldr	r3, [r7, #4]
}
 800138e:	4618      	mov	r0, r3
 8001390:	3718      	adds	r7, #24
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}

08001396 <_close>:

int _close(int file)
{
 8001396:	b480      	push	{r7}
 8001398:	b083      	sub	sp, #12
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800139e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	370c      	adds	r7, #12
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr

080013ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013ae:	b480      	push	{r7}
 80013b0:	b083      	sub	sp, #12
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	6078      	str	r0, [r7, #4]
 80013b6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80013be:	605a      	str	r2, [r3, #4]
  return 0;
 80013c0:	2300      	movs	r3, #0
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	370c      	adds	r7, #12
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr

080013ce <_isatty>:

int _isatty(int file)
{
 80013ce:	b480      	push	{r7}
 80013d0:	b083      	sub	sp, #12
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80013d6:	2301      	movs	r3, #1
}
 80013d8:	4618      	mov	r0, r3
 80013da:	370c      	adds	r7, #12
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr

080013e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b085      	sub	sp, #20
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	60f8      	str	r0, [r7, #12]
 80013ec:	60b9      	str	r1, [r7, #8]
 80013ee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80013f0:	2300      	movs	r3, #0
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3714      	adds	r7, #20
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
	...

08001400 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b086      	sub	sp, #24
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001408:	4a14      	ldr	r2, [pc, #80]	@ (800145c <_sbrk+0x5c>)
 800140a:	4b15      	ldr	r3, [pc, #84]	@ (8001460 <_sbrk+0x60>)
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001414:	4b13      	ldr	r3, [pc, #76]	@ (8001464 <_sbrk+0x64>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d102      	bne.n	8001422 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800141c:	4b11      	ldr	r3, [pc, #68]	@ (8001464 <_sbrk+0x64>)
 800141e:	4a12      	ldr	r2, [pc, #72]	@ (8001468 <_sbrk+0x68>)
 8001420:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001422:	4b10      	ldr	r3, [pc, #64]	@ (8001464 <_sbrk+0x64>)
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4413      	add	r3, r2
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	429a      	cmp	r2, r3
 800142e:	d207      	bcs.n	8001440 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001430:	f006 fc7e 	bl	8007d30 <__errno>
 8001434:	4603      	mov	r3, r0
 8001436:	220c      	movs	r2, #12
 8001438:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800143a:	f04f 33ff 	mov.w	r3, #4294967295
 800143e:	e009      	b.n	8001454 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001440:	4b08      	ldr	r3, [pc, #32]	@ (8001464 <_sbrk+0x64>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001446:	4b07      	ldr	r3, [pc, #28]	@ (8001464 <_sbrk+0x64>)
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4413      	add	r3, r2
 800144e:	4a05      	ldr	r2, [pc, #20]	@ (8001464 <_sbrk+0x64>)
 8001450:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001452:	68fb      	ldr	r3, [r7, #12]
}
 8001454:	4618      	mov	r0, r3
 8001456:	3718      	adds	r7, #24
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	20030000 	.word	0x20030000
 8001460:	00000400 	.word	0x00000400
 8001464:	200002cc 	.word	0x200002cc
 8001468:	200006d8 	.word	0x200006d8

0800146c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001470:	4b06      	ldr	r3, [pc, #24]	@ (800148c <SystemInit+0x20>)
 8001472:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001476:	4a05      	ldr	r2, [pc, #20]	@ (800148c <SystemInit+0x20>)
 8001478:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800147c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001480:	bf00      	nop
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	e000ed00 	.word	0xe000ed00

08001490 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001490:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80014c8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001494:	f7ff ffea 	bl	800146c <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001498:	480c      	ldr	r0, [pc, #48]	@ (80014cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800149a:	490d      	ldr	r1, [pc, #52]	@ (80014d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800149c:	4a0d      	ldr	r2, [pc, #52]	@ (80014d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800149e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014a0:	e002      	b.n	80014a8 <LoopCopyDataInit>

080014a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014a6:	3304      	adds	r3, #4

080014a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014ac:	d3f9      	bcc.n	80014a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ae:	4a0a      	ldr	r2, [pc, #40]	@ (80014d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014b0:	4c0a      	ldr	r4, [pc, #40]	@ (80014dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80014b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014b4:	e001      	b.n	80014ba <LoopFillZerobss>

080014b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014b8:	3204      	adds	r2, #4

080014ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014bc:	d3fb      	bcc.n	80014b6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80014be:	f006 fc3d 	bl	8007d3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014c2:	f7ff f873 	bl	80005ac <main>
  bx  lr    
 80014c6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80014c8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80014cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014d0:	200000e4 	.word	0x200000e4
  ldr r2, =_sidata
 80014d4:	0800b520 	.word	0x0800b520
  ldr r2, =_sbss
 80014d8:	200000e4 	.word	0x200000e4
  ldr r4, =_ebss
 80014dc:	200006d4 	.word	0x200006d4

080014e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014e0:	e7fe      	b.n	80014e0 <ADC_IRQHandler>

080014e2 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80014e6:	f000 fe49 	bl	800217c <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 80014ea:	20ca      	movs	r0, #202	@ 0xca
 80014ec:	f000 f95d 	bl	80017aa <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 80014f0:	20c3      	movs	r0, #195	@ 0xc3
 80014f2:	f000 f967 	bl	80017c4 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 80014f6:	2008      	movs	r0, #8
 80014f8:	f000 f964 	bl	80017c4 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 80014fc:	2050      	movs	r0, #80	@ 0x50
 80014fe:	f000 f961 	bl	80017c4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8001502:	20cf      	movs	r0, #207	@ 0xcf
 8001504:	f000 f951 	bl	80017aa <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001508:	2000      	movs	r0, #0
 800150a:	f000 f95b 	bl	80017c4 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 800150e:	20c1      	movs	r0, #193	@ 0xc1
 8001510:	f000 f958 	bl	80017c4 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8001514:	2030      	movs	r0, #48	@ 0x30
 8001516:	f000 f955 	bl	80017c4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 800151a:	20ed      	movs	r0, #237	@ 0xed
 800151c:	f000 f945 	bl	80017aa <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8001520:	2064      	movs	r0, #100	@ 0x64
 8001522:	f000 f94f 	bl	80017c4 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8001526:	2003      	movs	r0, #3
 8001528:	f000 f94c 	bl	80017c4 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 800152c:	2012      	movs	r0, #18
 800152e:	f000 f949 	bl	80017c4 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8001532:	2081      	movs	r0, #129	@ 0x81
 8001534:	f000 f946 	bl	80017c4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8001538:	20e8      	movs	r0, #232	@ 0xe8
 800153a:	f000 f936 	bl	80017aa <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 800153e:	2085      	movs	r0, #133	@ 0x85
 8001540:	f000 f940 	bl	80017c4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001544:	2000      	movs	r0, #0
 8001546:	f000 f93d 	bl	80017c4 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 800154a:	2078      	movs	r0, #120	@ 0x78
 800154c:	f000 f93a 	bl	80017c4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8001550:	20cb      	movs	r0, #203	@ 0xcb
 8001552:	f000 f92a 	bl	80017aa <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8001556:	2039      	movs	r0, #57	@ 0x39
 8001558:	f000 f934 	bl	80017c4 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 800155c:	202c      	movs	r0, #44	@ 0x2c
 800155e:	f000 f931 	bl	80017c4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001562:	2000      	movs	r0, #0
 8001564:	f000 f92e 	bl	80017c4 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8001568:	2034      	movs	r0, #52	@ 0x34
 800156a:	f000 f92b 	bl	80017c4 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 800156e:	2002      	movs	r0, #2
 8001570:	f000 f928 	bl	80017c4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8001574:	20f7      	movs	r0, #247	@ 0xf7
 8001576:	f000 f918 	bl	80017aa <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 800157a:	2020      	movs	r0, #32
 800157c:	f000 f922 	bl	80017c4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8001580:	20ea      	movs	r0, #234	@ 0xea
 8001582:	f000 f912 	bl	80017aa <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001586:	2000      	movs	r0, #0
 8001588:	f000 f91c 	bl	80017c4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800158c:	2000      	movs	r0, #0
 800158e:	f000 f919 	bl	80017c4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8001592:	20b1      	movs	r0, #177	@ 0xb1
 8001594:	f000 f909 	bl	80017aa <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001598:	2000      	movs	r0, #0
 800159a:	f000 f913 	bl	80017c4 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 800159e:	201b      	movs	r0, #27
 80015a0:	f000 f910 	bl	80017c4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80015a4:	20b6      	movs	r0, #182	@ 0xb6
 80015a6:	f000 f900 	bl	80017aa <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80015aa:	200a      	movs	r0, #10
 80015ac:	f000 f90a 	bl	80017c4 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 80015b0:	20a2      	movs	r0, #162	@ 0xa2
 80015b2:	f000 f907 	bl	80017c4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 80015b6:	20c0      	movs	r0, #192	@ 0xc0
 80015b8:	f000 f8f7 	bl	80017aa <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80015bc:	2010      	movs	r0, #16
 80015be:	f000 f901 	bl	80017c4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 80015c2:	20c1      	movs	r0, #193	@ 0xc1
 80015c4:	f000 f8f1 	bl	80017aa <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80015c8:	2010      	movs	r0, #16
 80015ca:	f000 f8fb 	bl	80017c4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 80015ce:	20c5      	movs	r0, #197	@ 0xc5
 80015d0:	f000 f8eb 	bl	80017aa <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 80015d4:	2045      	movs	r0, #69	@ 0x45
 80015d6:	f000 f8f5 	bl	80017c4 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 80015da:	2015      	movs	r0, #21
 80015dc:	f000 f8f2 	bl	80017c4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 80015e0:	20c7      	movs	r0, #199	@ 0xc7
 80015e2:	f000 f8e2 	bl	80017aa <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 80015e6:	2090      	movs	r0, #144	@ 0x90
 80015e8:	f000 f8ec 	bl	80017c4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 80015ec:	2036      	movs	r0, #54	@ 0x36
 80015ee:	f000 f8dc 	bl	80017aa <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 80015f2:	20c8      	movs	r0, #200	@ 0xc8
 80015f4:	f000 f8e6 	bl	80017c4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 80015f8:	20f2      	movs	r0, #242	@ 0xf2
 80015fa:	f000 f8d6 	bl	80017aa <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80015fe:	2000      	movs	r0, #0
 8001600:	f000 f8e0 	bl	80017c4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8001604:	20b0      	movs	r0, #176	@ 0xb0
 8001606:	f000 f8d0 	bl	80017aa <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 800160a:	20c2      	movs	r0, #194	@ 0xc2
 800160c:	f000 f8da 	bl	80017c4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001610:	20b6      	movs	r0, #182	@ 0xb6
 8001612:	f000 f8ca 	bl	80017aa <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8001616:	200a      	movs	r0, #10
 8001618:	f000 f8d4 	bl	80017c4 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 800161c:	20a7      	movs	r0, #167	@ 0xa7
 800161e:	f000 f8d1 	bl	80017c4 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8001622:	2027      	movs	r0, #39	@ 0x27
 8001624:	f000 f8ce 	bl	80017c4 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001628:	2004      	movs	r0, #4
 800162a:	f000 f8cb 	bl	80017c4 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 800162e:	202a      	movs	r0, #42	@ 0x2a
 8001630:	f000 f8bb 	bl	80017aa <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001634:	2000      	movs	r0, #0
 8001636:	f000 f8c5 	bl	80017c4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800163a:	2000      	movs	r0, #0
 800163c:	f000 f8c2 	bl	80017c4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001640:	2000      	movs	r0, #0
 8001642:	f000 f8bf 	bl	80017c4 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8001646:	20ef      	movs	r0, #239	@ 0xef
 8001648:	f000 f8bc 	bl	80017c4 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 800164c:	202b      	movs	r0, #43	@ 0x2b
 800164e:	f000 f8ac 	bl	80017aa <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001652:	2000      	movs	r0, #0
 8001654:	f000 f8b6 	bl	80017c4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001658:	2000      	movs	r0, #0
 800165a:	f000 f8b3 	bl	80017c4 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 800165e:	2001      	movs	r0, #1
 8001660:	f000 f8b0 	bl	80017c4 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8001664:	203f      	movs	r0, #63	@ 0x3f
 8001666:	f000 f8ad 	bl	80017c4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 800166a:	20f6      	movs	r0, #246	@ 0xf6
 800166c:	f000 f89d 	bl	80017aa <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001670:	2001      	movs	r0, #1
 8001672:	f000 f8a7 	bl	80017c4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001676:	2000      	movs	r0, #0
 8001678:	f000 f8a4 	bl	80017c4 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 800167c:	2006      	movs	r0, #6
 800167e:	f000 f8a1 	bl	80017c4 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8001682:	202c      	movs	r0, #44	@ 0x2c
 8001684:	f000 f891 	bl	80017aa <ili9341_WriteReg>
  LCD_Delay(200);
 8001688:	20c8      	movs	r0, #200	@ 0xc8
 800168a:	f000 fe65 	bl	8002358 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 800168e:	2026      	movs	r0, #38	@ 0x26
 8001690:	f000 f88b 	bl	80017aa <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001694:	2001      	movs	r0, #1
 8001696:	f000 f895 	bl	80017c4 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 800169a:	20e0      	movs	r0, #224	@ 0xe0
 800169c:	f000 f885 	bl	80017aa <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 80016a0:	200f      	movs	r0, #15
 80016a2:	f000 f88f 	bl	80017c4 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 80016a6:	2029      	movs	r0, #41	@ 0x29
 80016a8:	f000 f88c 	bl	80017c4 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 80016ac:	2024      	movs	r0, #36	@ 0x24
 80016ae:	f000 f889 	bl	80017c4 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80016b2:	200c      	movs	r0, #12
 80016b4:	f000 f886 	bl	80017c4 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 80016b8:	200e      	movs	r0, #14
 80016ba:	f000 f883 	bl	80017c4 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80016be:	2009      	movs	r0, #9
 80016c0:	f000 f880 	bl	80017c4 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 80016c4:	204e      	movs	r0, #78	@ 0x4e
 80016c6:	f000 f87d 	bl	80017c4 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80016ca:	2078      	movs	r0, #120	@ 0x78
 80016cc:	f000 f87a 	bl	80017c4 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 80016d0:	203c      	movs	r0, #60	@ 0x3c
 80016d2:	f000 f877 	bl	80017c4 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80016d6:	2009      	movs	r0, #9
 80016d8:	f000 f874 	bl	80017c4 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 80016dc:	2013      	movs	r0, #19
 80016de:	f000 f871 	bl	80017c4 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80016e2:	2005      	movs	r0, #5
 80016e4:	f000 f86e 	bl	80017c4 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 80016e8:	2017      	movs	r0, #23
 80016ea:	f000 f86b 	bl	80017c4 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80016ee:	2011      	movs	r0, #17
 80016f0:	f000 f868 	bl	80017c4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80016f4:	2000      	movs	r0, #0
 80016f6:	f000 f865 	bl	80017c4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 80016fa:	20e1      	movs	r0, #225	@ 0xe1
 80016fc:	f000 f855 	bl	80017aa <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001700:	2000      	movs	r0, #0
 8001702:	f000 f85f 	bl	80017c4 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8001706:	2016      	movs	r0, #22
 8001708:	f000 f85c 	bl	80017c4 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 800170c:	201b      	movs	r0, #27
 800170e:	f000 f859 	bl	80017c4 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001712:	2004      	movs	r0, #4
 8001714:	f000 f856 	bl	80017c4 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8001718:	2011      	movs	r0, #17
 800171a:	f000 f853 	bl	80017c4 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 800171e:	2007      	movs	r0, #7
 8001720:	f000 f850 	bl	80017c4 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8001724:	2031      	movs	r0, #49	@ 0x31
 8001726:	f000 f84d 	bl	80017c4 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 800172a:	2033      	movs	r0, #51	@ 0x33
 800172c:	f000 f84a 	bl	80017c4 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8001730:	2042      	movs	r0, #66	@ 0x42
 8001732:	f000 f847 	bl	80017c4 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8001736:	2005      	movs	r0, #5
 8001738:	f000 f844 	bl	80017c4 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 800173c:	200c      	movs	r0, #12
 800173e:	f000 f841 	bl	80017c4 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8001742:	200a      	movs	r0, #10
 8001744:	f000 f83e 	bl	80017c4 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8001748:	2028      	movs	r0, #40	@ 0x28
 800174a:	f000 f83b 	bl	80017c4 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 800174e:	202f      	movs	r0, #47	@ 0x2f
 8001750:	f000 f838 	bl	80017c4 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8001754:	200f      	movs	r0, #15
 8001756:	f000 f835 	bl	80017c4 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 800175a:	2011      	movs	r0, #17
 800175c:	f000 f825 	bl	80017aa <ili9341_WriteReg>
  LCD_Delay(200);
 8001760:	20c8      	movs	r0, #200	@ 0xc8
 8001762:	f000 fdf9 	bl	8002358 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001766:	2029      	movs	r0, #41	@ 0x29
 8001768:	f000 f81f 	bl	80017aa <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 800176c:	202c      	movs	r0, #44	@ 0x2c
 800176e:	f000 f81c 	bl	80017aa <ili9341_WriteReg>
}
 8001772:	bf00      	nop
 8001774:	bd80      	pop	{r7, pc}

08001776 <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8001776:	b580      	push	{r7, lr}
 8001778:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 800177a:	f000 fcff 	bl	800217c <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 800177e:	2103      	movs	r1, #3
 8001780:	20d3      	movs	r0, #211	@ 0xd3
 8001782:	f000 f82c 	bl	80017de <ili9341_ReadData>
 8001786:	4603      	mov	r3, r0
 8001788:	b29b      	uxth	r3, r3
}
 800178a:	4618      	mov	r0, r3
 800178c:	bd80      	pop	{r7, pc}

0800178e <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001792:	2029      	movs	r0, #41	@ 0x29
 8001794:	f000 f809 	bl	80017aa <ili9341_WriteReg>
}
 8001798:	bf00      	nop
 800179a:	bd80      	pop	{r7, pc}

0800179c <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 80017a0:	2028      	movs	r0, #40	@ 0x28
 80017a2:	f000 f802 	bl	80017aa <ili9341_WriteReg>
}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}

080017aa <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	b082      	sub	sp, #8
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	4603      	mov	r3, r0
 80017b2:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 80017b4:	79fb      	ldrb	r3, [r7, #7]
 80017b6:	4618      	mov	r0, r3
 80017b8:	f000 fd7a 	bl	80022b0 <LCD_IO_WriteReg>
}
 80017bc:	bf00      	nop
 80017be:	3708      	adds	r7, #8
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	4603      	mov	r3, r0
 80017cc:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 80017ce:	88fb      	ldrh	r3, [r7, #6]
 80017d0:	4618      	mov	r0, r3
 80017d2:	f000 fd4b 	bl	800226c <LCD_IO_WriteData>
}
 80017d6:	bf00      	nop
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}

080017de <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 80017de:	b580      	push	{r7, lr}
 80017e0:	b082      	sub	sp, #8
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	4603      	mov	r3, r0
 80017e6:	460a      	mov	r2, r1
 80017e8:	80fb      	strh	r3, [r7, #6]
 80017ea:	4613      	mov	r3, r2
 80017ec:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 80017ee:	797a      	ldrb	r2, [r7, #5]
 80017f0:	88fb      	ldrh	r3, [r7, #6]
 80017f2:	4611      	mov	r1, r2
 80017f4:	4618      	mov	r0, r3
 80017f6:	f000 fd7d 	bl	80022f4 <LCD_IO_ReadData>
 80017fa:	4603      	mov	r3, r0
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3708      	adds	r7, #8
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}

08001804 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8001808:	23f0      	movs	r3, #240	@ 0xf0
}
 800180a:	4618      	mov	r0, r3
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr

08001814 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8001818:	f44f 73a0 	mov.w	r3, #320	@ 0x140
}
 800181c:	4618      	mov	r0, r3
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
	...

08001828 <stmpe811_Init>:
  * @brief  Initialize the stmpe811 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void stmpe811_Init(uint16_t DeviceAddr)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = stmpe811_GetInstance(DeviceAddr);
 8001832:	88fb      	ldrh	r3, [r7, #6]
 8001834:	4618      	mov	r0, r3
 8001836:	f000 fa59 	bl	8001cec <stmpe811_GetInstance>
 800183a:	4603      	mov	r3, r0
 800183c:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 800183e:	7bfb      	ldrb	r3, [r7, #15]
 8001840:	2bff      	cmp	r3, #255	@ 0xff
 8001842:	d112      	bne.n	800186a <stmpe811_Init+0x42>
  {
    /* Look for empty instance */
    empty = stmpe811_GetInstance(0);
 8001844:	2000      	movs	r0, #0
 8001846:	f000 fa51 	bl	8001cec <stmpe811_GetInstance>
 800184a:	4603      	mov	r3, r0
 800184c:	73bb      	strb	r3, [r7, #14]
    
    if(empty < STMPE811_MAX_INSTANCE)
 800184e:	7bbb      	ldrb	r3, [r7, #14]
 8001850:	2b01      	cmp	r3, #1
 8001852:	d80a      	bhi.n	800186a <stmpe811_Init+0x42>
    {
      /* Register the current device instance */
      stmpe811[empty] = DeviceAddr;
 8001854:	7bbb      	ldrb	r3, [r7, #14]
 8001856:	88fa      	ldrh	r2, [r7, #6]
 8001858:	b2d1      	uxtb	r1, r2
 800185a:	4a06      	ldr	r2, [pc, #24]	@ (8001874 <stmpe811_Init+0x4c>)
 800185c:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      IOE_Init(); 
 800185e:	f000 fd86 	bl	800236e <IOE_Init>
      
      /* Generate stmpe811 Software reset */
      stmpe811_Reset(DeviceAddr);
 8001862:	88fb      	ldrh	r3, [r7, #6]
 8001864:	4618      	mov	r0, r3
 8001866:	f000 f807 	bl	8001878 <stmpe811_Reset>
    }
  }
}
 800186a:	bf00      	nop
 800186c:	3710      	adds	r7, #16
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	200002d0 	.word	0x200002d0

08001878 <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	4603      	mov	r3, r0
 8001880:	80fb      	strh	r3, [r7, #6]
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 8001882:	88fb      	ldrh	r3, [r7, #6]
 8001884:	b2db      	uxtb	r3, r3
 8001886:	2202      	movs	r2, #2
 8001888:	2103      	movs	r1, #3
 800188a:	4618      	mov	r0, r3
 800188c:	f000 fd7b 	bl	8002386 <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 8001890:	200a      	movs	r0, #10
 8001892:	f000 fdb4 	bl	80023fe <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 8001896:	88fb      	ldrh	r3, [r7, #6]
 8001898:	b2db      	uxtb	r3, r3
 800189a:	2200      	movs	r2, #0
 800189c:	2103      	movs	r1, #3
 800189e:	4618      	mov	r0, r3
 80018a0:	f000 fd71 	bl	8002386 <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
 80018a4:	2002      	movs	r0, #2
 80018a6:	f000 fdaa 	bl	80023fe <IOE_Delay>
}
 80018aa:	bf00      	nop
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <stmpe811_ReadID>:
  * @brief  Read the stmpe811 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
 80018b2:	b590      	push	{r4, r7, lr}
 80018b4:	b083      	sub	sp, #12
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	4603      	mov	r3, r0
 80018ba:	80fb      	strh	r3, [r7, #6]
  /* Initialize IO BUS layer */
  IOE_Init(); 
 80018bc:	f000 fd57 	bl	800236e <IOE_Init>
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 80018c0:	88fb      	ldrh	r3, [r7, #6]
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	2100      	movs	r1, #0
 80018c6:	4618      	mov	r0, r3
 80018c8:	f000 fd70 	bl	80023ac <IOE_Read>
 80018cc:	4603      	mov	r3, r0
 80018ce:	021b      	lsls	r3, r3, #8
 80018d0:	b21c      	sxth	r4, r3
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 80018d2:	88fb      	ldrh	r3, [r7, #6]
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	2101      	movs	r1, #1
 80018d8:	4618      	mov	r0, r3
 80018da:	f000 fd67 	bl	80023ac <IOE_Read>
 80018de:	4603      	mov	r3, r0
 80018e0:	b21b      	sxth	r3, r3
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 80018e2:	4323      	orrs	r3, r4
 80018e4:	b21b      	sxth	r3, r3
 80018e6:	b29b      	uxth	r3, r3
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd90      	pop	{r4, r7, pc}

080018f0 <stmpe811_EnableGlobalIT>:
  * @brief  Enable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.       
  * @retval None
  */
void stmpe811_EnableGlobalIT(uint16_t DeviceAddr)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4603      	mov	r3, r0
 80018f8:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 80018fa:	2300      	movs	r3, #0
 80018fc:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 80018fe:	88fb      	ldrh	r3, [r7, #6]
 8001900:	b2db      	uxtb	r3, r3
 8001902:	2109      	movs	r1, #9
 8001904:	4618      	mov	r0, r3
 8001906:	f000 fd51 	bl	80023ac <IOE_Read>
 800190a:	4603      	mov	r3, r0
 800190c:	73fb      	strb	r3, [r7, #15]
  
  /* Set the global interrupts to be Enabled */    
  tmp |= (uint8_t)STMPE811_GIT_EN;
 800190e:	7bfb      	ldrb	r3, [r7, #15]
 8001910:	f043 0301 	orr.w	r3, r3, #1
 8001914:	73fb      	strb	r3, [r7, #15]
  
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 8001916:	88fb      	ldrh	r3, [r7, #6]
 8001918:	b2db      	uxtb	r3, r3
 800191a:	7bfa      	ldrb	r2, [r7, #15]
 800191c:	2109      	movs	r1, #9
 800191e:	4618      	mov	r0, r3
 8001920:	f000 fd31 	bl	8002386 <IOE_Write>
}
 8001924:	bf00      	nop
 8001926:	3710      	adds	r7, #16
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}

0800192c <stmpe811_DisableGlobalIT>:
  * @brief  Disable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.      
  * @retval None
  */
void stmpe811_DisableGlobalIT(uint16_t DeviceAddr)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	4603      	mov	r3, r0
 8001934:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8001936:	2300      	movs	r3, #0
 8001938:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 800193a:	88fb      	ldrh	r3, [r7, #6]
 800193c:	b2db      	uxtb	r3, r3
 800193e:	2109      	movs	r1, #9
 8001940:	4618      	mov	r0, r3
 8001942:	f000 fd33 	bl	80023ac <IOE_Read>
 8001946:	4603      	mov	r3, r0
 8001948:	73fb      	strb	r3, [r7, #15]

  /* Set the global interrupts to be Disabled */    
  tmp &= ~(uint8_t)STMPE811_GIT_EN;
 800194a:	7bfb      	ldrb	r3, [r7, #15]
 800194c:	f023 0301 	bic.w	r3, r3, #1
 8001950:	73fb      	strb	r3, [r7, #15]
 
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 8001952:	88fb      	ldrh	r3, [r7, #6]
 8001954:	b2db      	uxtb	r3, r3
 8001956:	7bfa      	ldrb	r2, [r7, #15]
 8001958:	2109      	movs	r1, #9
 800195a:	4618      	mov	r0, r3
 800195c:	f000 fd13 	bl	8002386 <IOE_Write>
    
}
 8001960:	bf00      	nop
 8001962:	3710      	adds	r7, #16
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}

08001968 <stmpe811_EnableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	4603      	mov	r3, r0
 8001970:	460a      	mov	r2, r1
 8001972:	80fb      	strh	r3, [r7, #6]
 8001974:	4613      	mov	r3, r2
 8001976:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8001978:	2300      	movs	r3, #0
 800197a:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 800197c:	88fb      	ldrh	r3, [r7, #6]
 800197e:	b2db      	uxtb	r3, r3
 8001980:	210a      	movs	r1, #10
 8001982:	4618      	mov	r0, r3
 8001984:	f000 fd12 	bl	80023ac <IOE_Read>
 8001988:	4603      	mov	r3, r0
 800198a:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp |= Source; 
 800198c:	7bfa      	ldrb	r2, [r7, #15]
 800198e:	797b      	ldrb	r3, [r7, #5]
 8001990:	4313      	orrs	r3, r2
 8001992:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8001994:	88fb      	ldrh	r3, [r7, #6]
 8001996:	b2db      	uxtb	r3, r3
 8001998:	7bfa      	ldrb	r2, [r7, #15]
 800199a:	210a      	movs	r1, #10
 800199c:	4618      	mov	r0, r3
 800199e:	f000 fcf2 	bl	8002386 <IOE_Write>
}
 80019a2:	bf00      	nop
 80019a4:	3710      	adds	r7, #16
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}

080019aa <stmpe811_DisableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 80019aa:	b580      	push	{r7, lr}
 80019ac:	b084      	sub	sp, #16
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	4603      	mov	r3, r0
 80019b2:	460a      	mov	r2, r1
 80019b4:	80fb      	strh	r3, [r7, #6]
 80019b6:	4613      	mov	r3, r2
 80019b8:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 80019ba:	2300      	movs	r3, #0
 80019bc:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 80019be:	88fb      	ldrh	r3, [r7, #6]
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	210a      	movs	r1, #10
 80019c4:	4618      	mov	r0, r3
 80019c6:	f000 fcf1 	bl	80023ac <IOE_Read>
 80019ca:	4603      	mov	r3, r0
 80019cc:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp &= ~Source; 
 80019ce:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80019d2:	43db      	mvns	r3, r3
 80019d4:	b25a      	sxtb	r2, r3
 80019d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019da:	4013      	ands	r3, r2
 80019dc:	b25b      	sxtb	r3, r3
 80019de:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 80019e0:	88fb      	ldrh	r3, [r7, #6]
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	7bfa      	ldrb	r2, [r7, #15]
 80019e6:	210a      	movs	r1, #10
 80019e8:	4618      	mov	r0, r3
 80019ea:	f000 fccc 	bl	8002386 <IOE_Write>
}
 80019ee:	bf00      	nop
 80019f0:	3710      	adds	r7, #16
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <stmpe811_ReadGITStatus>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt      
  * @retval The checked Global interrupt source status.
  */
uint8_t stmpe811_ReadGITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b082      	sub	sp, #8
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	4603      	mov	r3, r0
 80019fe:	460a      	mov	r2, r1
 8001a00:	80fb      	strh	r3, [r7, #6]
 8001a02:	4613      	mov	r3, r2
 8001a04:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status */
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 8001a06:	88fb      	ldrh	r3, [r7, #6]
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	210b      	movs	r1, #11
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f000 fccd 	bl	80023ac <IOE_Read>
 8001a12:	4603      	mov	r3, r0
 8001a14:	461a      	mov	r2, r3
 8001a16:	797b      	ldrb	r3, [r7, #5]
 8001a18:	4013      	ands	r3, r2
 8001a1a:	b2db      	uxtb	r3, r3
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3708      	adds	r7, #8
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <stmpe811_ClearGlobalIT>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt 
  * @retval None
  */
void stmpe811_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	460a      	mov	r2, r1
 8001a2e:	80fb      	strh	r3, [r7, #6]
 8001a30:	4613      	mov	r3, r2
 8001a32:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 8001a34:	88fb      	ldrh	r3, [r7, #6]
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	797a      	ldrb	r2, [r7, #5]
 8001a3a:	210b      	movs	r1, #11
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f000 fca2 	bl	8002386 <IOE_Write>
}
 8001a42:	bf00      	nop
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <stmpe811_IO_EnableAF>:
  *         combination of the following values:
  *   @arg  STMPE811_PIN_x: Where x can be from 0 to 7.       
  * @retval None
  */
void stmpe811_IO_EnableAF(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b084      	sub	sp, #16
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	4603      	mov	r3, r0
 8001a52:	6039      	str	r1, [r7, #0]
 8001a54:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8001a56:	2300      	movs	r3, #0
 8001a58:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current register value */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 8001a5a:	88fb      	ldrh	r3, [r7, #6]
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	2117      	movs	r1, #23
 8001a60:	4618      	mov	r0, r3
 8001a62:	f000 fca3 	bl	80023ac <IOE_Read>
 8001a66:	4603      	mov	r3, r0
 8001a68:	73fb      	strb	r3, [r7, #15]

  /* Enable the selected pins alternate function */   
  tmp &= ~(uint8_t)IO_Pin;   
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	b25b      	sxtb	r3, r3
 8001a6e:	43db      	mvns	r3, r3
 8001a70:	b25a      	sxtb	r2, r3
 8001a72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a76:	4013      	ands	r3, r2
 8001a78:	b25b      	sxtb	r3, r3
 8001a7a:	73fb      	strb	r3, [r7, #15]
  
  /* Write back the new register value */
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 8001a7c:	88fb      	ldrh	r3, [r7, #6]
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	7bfa      	ldrb	r2, [r7, #15]
 8001a82:	2117      	movs	r1, #23
 8001a84:	4618      	mov	r0, r3
 8001a86:	f000 fc7e 	bl	8002386 <IOE_Write>
}
 8001a8a:	bf00      	nop
 8001a8c:	3710      	adds	r7, #16
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <stmpe811_TS_Start>:
  * @brief  Configures the touch Screen Controller (Single point detection)
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void stmpe811_TS_Start(uint16_t DeviceAddr)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b084      	sub	sp, #16
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	4603      	mov	r3, r0
 8001a9a:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;
  
  /* Get the current register value */
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8001a9c:	88fb      	ldrh	r3, [r7, #6]
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	2104      	movs	r1, #4
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f000 fc82 	bl	80023ac <IOE_Read>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	73fb      	strb	r3, [r7, #15]
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_IO_FCT);  
 8001aac:	7bfb      	ldrb	r3, [r7, #15]
 8001aae:	f023 0304 	bic.w	r3, r3, #4
 8001ab2:	73fb      	strb	r3, [r7, #15]
  
  /* Write the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8001ab4:	88fb      	ldrh	r3, [r7, #6]
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	7bfa      	ldrb	r2, [r7, #15]
 8001aba:	2104      	movs	r1, #4
 8001abc:	4618      	mov	r0, r3
 8001abe:	f000 fc62 	bl	8002386 <IOE_Write>

  /* Select TSC pins in TSC alternate mode */  
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 8001ac2:	88fb      	ldrh	r3, [r7, #6]
 8001ac4:	21f0      	movs	r1, #240	@ 0xf0
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7ff ffbf 	bl	8001a4a <stmpe811_IO_EnableAF>
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_TS_FCT | STMPE811_ADC_FCT);  
 8001acc:	7bfb      	ldrb	r3, [r7, #15]
 8001ace:	f023 0303 	bic.w	r3, r3, #3
 8001ad2:	73fb      	strb	r3, [r7, #15]
  
  /* Set the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8001ad4:	88fb      	ldrh	r3, [r7, #6]
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	7bfa      	ldrb	r2, [r7, #15]
 8001ada:	2104      	movs	r1, #4
 8001adc:	4618      	mov	r0, r3
 8001ade:	f000 fc52 	bl	8002386 <IOE_Write>
  
  /* Select Sample Time, bit number and ADC Reference */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 8001ae2:	88fb      	ldrh	r3, [r7, #6]
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	2249      	movs	r2, #73	@ 0x49
 8001ae8:	2120      	movs	r1, #32
 8001aea:	4618      	mov	r0, r3
 8001aec:	f000 fc4b 	bl	8002386 <IOE_Write>
  
  /* Wait for 2 ms */
  IOE_Delay(2); 
 8001af0:	2002      	movs	r0, #2
 8001af2:	f000 fc84 	bl	80023fe <IOE_Delay>
  
  /* Select the ADC clock speed: 3.25 MHz */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 8001af6:	88fb      	ldrh	r3, [r7, #6]
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	2201      	movs	r2, #1
 8001afc:	2121      	movs	r1, #33	@ 0x21
 8001afe:	4618      	mov	r0, r3
 8001b00:	f000 fc41 	bl	8002386 <IOE_Write>
  /* Configuration: 
     - Touch average control    : 4 samples
     - Touch delay time         : 500 uS
     - Panel driver setting time: 500 uS 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 8001b04:	88fb      	ldrh	r3, [r7, #6]
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	229a      	movs	r2, #154	@ 0x9a
 8001b0a:	2141      	movs	r1, #65	@ 0x41
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f000 fc3a 	bl	8002386 <IOE_Write>
  
  /* Configure the Touch FIFO threshold: single point reading */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 8001b12:	88fb      	ldrh	r3, [r7, #6]
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	2201      	movs	r2, #1
 8001b18:	214a      	movs	r1, #74	@ 0x4a
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f000 fc33 	bl	8002386 <IOE_Write>
  
  /* Clear the FIFO memory content. */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8001b20:	88fb      	ldrh	r3, [r7, #6]
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	2201      	movs	r2, #1
 8001b26:	214b      	movs	r1, #75	@ 0x4b
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f000 fc2c 	bl	8002386 <IOE_Write>
  
  /* Put the FIFO back into operation mode  */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8001b2e:	88fb      	ldrh	r3, [r7, #6]
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	2200      	movs	r2, #0
 8001b34:	214b      	movs	r1, #75	@ 0x4b
 8001b36:	4618      	mov	r0, r3
 8001b38:	f000 fc25 	bl	8002386 <IOE_Write>
  
  /* Set the range and accuracy pf the pressure measurement (Z) : 
     - Fractional part :7 
     - Whole part      :1 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 8001b3c:	88fb      	ldrh	r3, [r7, #6]
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	2201      	movs	r2, #1
 8001b42:	2156      	movs	r1, #86	@ 0x56
 8001b44:	4618      	mov	r0, r3
 8001b46:	f000 fc1e 	bl	8002386 <IOE_Write>
  
  /* Set the driving capability (limit) of the device for TSC pins: 50mA */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 8001b4a:	88fb      	ldrh	r3, [r7, #6]
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	2201      	movs	r2, #1
 8001b50:	2158      	movs	r1, #88	@ 0x58
 8001b52:	4618      	mov	r0, r3
 8001b54:	f000 fc17 	bl	8002386 <IOE_Write>
  
  /* Touch screen control configuration (enable TSC):
     - No window tracking index
     - XYZ acquisition mode
   */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 8001b58:	88fb      	ldrh	r3, [r7, #6]
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	2140      	movs	r1, #64	@ 0x40
 8001b60:	4618      	mov	r0, r3
 8001b62:	f000 fc10 	bl	8002386 <IOE_Write>
  
  /*  Clear all the status pending bits if any */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 8001b66:	88fb      	ldrh	r3, [r7, #6]
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	22ff      	movs	r2, #255	@ 0xff
 8001b6c:	210b      	movs	r1, #11
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f000 fc09 	bl	8002386 <IOE_Write>

  /* Wait for 2 ms delay */
  IOE_Delay(2); 
 8001b74:	2002      	movs	r0, #2
 8001b76:	f000 fc42 	bl	80023fe <IOE_Delay>
}
 8001b7a:	bf00      	nop
 8001b7c:	3710      	adds	r7, #16
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 8001b82:	b580      	push	{r7, lr}
 8001b84:	b084      	sub	sp, #16
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	4603      	mov	r3, r0
 8001b8a:	80fb      	strh	r3, [r7, #6]
  uint8_t state;
  uint8_t ret = 0;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	73fb      	strb	r3, [r7, #15]
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)0x80);
 8001b90:	88fb      	ldrh	r3, [r7, #6]
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	2140      	movs	r1, #64	@ 0x40
 8001b96:	4618      	mov	r0, r3
 8001b98:	f000 fc08 	bl	80023ac <IOE_Read>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ba2:	2b80      	cmp	r3, #128	@ 0x80
 8001ba4:	bf0c      	ite	eq
 8001ba6:	2301      	moveq	r3, #1
 8001ba8:	2300      	movne	r3, #0
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	73bb      	strb	r3, [r7, #14]
  
  if(state > 0)
 8001bae:	7bbb      	ldrb	r3, [r7, #14]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d00b      	beq.n	8001bcc <stmpe811_TS_DetectTouch+0x4a>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 8001bb4:	88fb      	ldrh	r3, [r7, #6]
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	214c      	movs	r1, #76	@ 0x4c
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f000 fbf6 	bl	80023ac <IOE_Read>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d010      	beq.n	8001be8 <stmpe811_TS_DetectTouch+0x66>
    {
      ret = 1;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	73fb      	strb	r3, [r7, #15]
 8001bca:	e00d      	b.n	8001be8 <stmpe811_TS_DetectTouch+0x66>
    }
  }
  else
  {
    /* Reset FIFO */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8001bcc:	88fb      	ldrh	r3, [r7, #6]
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	214b      	movs	r1, #75	@ 0x4b
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f000 fbd6 	bl	8002386 <IOE_Write>
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8001bda:	88fb      	ldrh	r3, [r7, #6]
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	2200      	movs	r2, #0
 8001be0:	214b      	movs	r1, #75	@ 0x4b
 8001be2:	4618      	mov	r0, r3
 8001be4:	f000 fbcf 	bl	8002386 <IOE_Write>
  }
  
  return ret;
 8001be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3710      	adds	r7, #16
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b086      	sub	sp, #24
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	60b9      	str	r1, [r7, #8]
 8001bfc:	607a      	str	r2, [r7, #4]
 8001bfe:	81fb      	strh	r3, [r7, #14]
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 8001c00:	89fb      	ldrh	r3, [r7, #14]
 8001c02:	b2d8      	uxtb	r0, r3
 8001c04:	f107 0210 	add.w	r2, r7, #16
 8001c08:	2304      	movs	r3, #4
 8001c0a:	21d7      	movs	r1, #215	@ 0xd7
 8001c0c:	f000 fbe1 	bl	80023d2 <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 8001c10:	7c3b      	ldrb	r3, [r7, #16]
 8001c12:	061a      	lsls	r2, r3, #24
 8001c14:	7c7b      	ldrb	r3, [r7, #17]
 8001c16:	041b      	lsls	r3, r3, #16
 8001c18:	431a      	orrs	r2, r3
 8001c1a:	7cbb      	ldrb	r3, [r7, #18]
 8001c1c:	021b      	lsls	r3, r3, #8
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	7cfa      	ldrb	r2, [r7, #19]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	617b      	str	r3, [r7, #20]
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	0d1b      	lsrs	r3, r3, #20
 8001c2a:	b29a      	uxth	r2, r3
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	801a      	strh	r2, [r3, #0]
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	0a1b      	lsrs	r3, r3, #8
 8001c34:	b29b      	uxth	r3, r3
 8001c36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c3a:	b29a      	uxth	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	801a      	strh	r2, [r3, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8001c40:	89fb      	ldrh	r3, [r7, #14]
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	2201      	movs	r2, #1
 8001c46:	214b      	movs	r1, #75	@ 0x4b
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f000 fb9c 	bl	8002386 <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8001c4e:	89fb      	ldrh	r3, [r7, #14]
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	2200      	movs	r2, #0
 8001c54:	214b      	movs	r1, #75	@ 0x4b
 8001c56:	4618      	mov	r0, r3
 8001c58:	f000 fb95 	bl	8002386 <IOE_Write>
}
 8001c5c:	bf00      	nop
 8001c5e:	3718      	adds	r7, #24
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <stmpe811_TS_EnableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_EnableIT(uint16_t DeviceAddr)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	80fb      	strh	r3, [r7, #6]
  IOE_ITConfig();
 8001c6e:	f000 fb84 	bl	800237a <IOE_ITConfig>
  
  /* Enable global TS IT source */
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 8001c72:	88fb      	ldrh	r3, [r7, #6]
 8001c74:	211f      	movs	r1, #31
 8001c76:	4618      	mov	r0, r3
 8001c78:	f7ff fe76 	bl	8001968 <stmpe811_EnableITSource>
  
  /* Enable global interrupt */
  stmpe811_EnableGlobalIT(DeviceAddr);
 8001c7c:	88fb      	ldrh	r3, [r7, #6]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7ff fe36 	bl	80018f0 <stmpe811_EnableGlobalIT>
}
 8001c84:	bf00      	nop
 8001c86:	3708      	adds	r7, #8
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <stmpe811_TS_DisableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval None
  */
void stmpe811_TS_DisableIT(uint16_t DeviceAddr)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	4603      	mov	r3, r0
 8001c94:	80fb      	strh	r3, [r7, #6]
  /* Disable global interrupt */
  stmpe811_DisableGlobalIT(DeviceAddr);
 8001c96:	88fb      	ldrh	r3, [r7, #6]
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7ff fe47 	bl	800192c <stmpe811_DisableGlobalIT>
  
  /* Disable global TS IT source */
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 8001c9e:	88fb      	ldrh	r3, [r7, #6]
 8001ca0:	211f      	movs	r1, #31
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7ff fe81 	bl	80019aa <stmpe811_DisableITSource>
}
 8001ca8:	bf00      	nop
 8001caa:	3708      	adds	r7, #8
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <stmpe811_TS_ITStatus>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval TS interrupts status
  */
uint8_t stmpe811_TS_ITStatus(uint16_t DeviceAddr)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	80fb      	strh	r3, [r7, #6]
  /* Return TS interrupts status */
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 8001cba:	88fb      	ldrh	r3, [r7, #6]
 8001cbc:	211f      	movs	r1, #31
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7ff fe99 	bl	80019f6 <stmpe811_ReadGITStatus>
 8001cc4:	4603      	mov	r3, r0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3708      	adds	r7, #8
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <stmpe811_TS_ClearIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_ClearIT(uint16_t DeviceAddr)
{
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b082      	sub	sp, #8
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	80fb      	strh	r3, [r7, #6]
  /* Clear the global TS IT source */
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 8001cd8:	88fb      	ldrh	r3, [r7, #6]
 8001cda:	211f      	movs	r1, #31
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7ff fea1 	bl	8001a24 <stmpe811_ClearGlobalIT>
}
 8001ce2:	bf00      	nop
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
	...

08001cec <stmpe811_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t stmpe811_GetInstance(uint16_t DeviceAddr)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b085      	sub	sp, #20
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	73fb      	strb	r3, [r7, #15]
 8001cfe:	e00b      	b.n	8001d18 <stmpe811_GetInstance+0x2c>
  {
    if(stmpe811[idx] == DeviceAddr)
 8001d00:	7bfb      	ldrb	r3, [r7, #15]
 8001d02:	4a0a      	ldr	r2, [pc, #40]	@ (8001d2c <stmpe811_GetInstance+0x40>)
 8001d04:	5cd3      	ldrb	r3, [r2, r3]
 8001d06:	461a      	mov	r2, r3
 8001d08:	88fb      	ldrh	r3, [r7, #6]
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d101      	bne.n	8001d12 <stmpe811_GetInstance+0x26>
    {
      return idx; 
 8001d0e:	7bfb      	ldrb	r3, [r7, #15]
 8001d10:	e006      	b.n	8001d20 <stmpe811_GetInstance+0x34>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8001d12:	7bfb      	ldrb	r3, [r7, #15]
 8001d14:	3301      	adds	r3, #1
 8001d16:	73fb      	strb	r3, [r7, #15]
 8001d18:	7bfb      	ldrb	r3, [r7, #15]
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d9f0      	bls.n	8001d00 <stmpe811_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 8001d1e:	23ff      	movs	r3, #255	@ 0xff
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3714      	adds	r7, #20
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr
 8001d2c:	200002d0 	.word	0x200002d0

08001d30 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Initialization
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b08a      	sub	sp, #40	@ 0x28
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  
  I2C_HandleTypeDef* pI2cHandle;
  pI2cHandle = &I2cHandle;
#endif /* EE_M24LR64 */

  if (hi2c->Instance == DISCOVERY_I2Cx)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a33      	ldr	r2, [pc, #204]	@ (8001e0c <I2Cx_MspInit+0xdc>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d15f      	bne.n	8001e02 <I2Cx_MspInit+0xd2>
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 8001d42:	2300      	movs	r3, #0
 8001d44:	613b      	str	r3, [r7, #16]
 8001d46:	4b32      	ldr	r3, [pc, #200]	@ (8001e10 <I2Cx_MspInit+0xe0>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d4a:	4a31      	ldr	r2, [pc, #196]	@ (8001e10 <I2Cx_MspInit+0xe0>)
 8001d4c:	f043 0304 	orr.w	r3, r3, #4
 8001d50:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d52:	4b2f      	ldr	r3, [pc, #188]	@ (8001e10 <I2Cx_MspInit+0xe0>)
 8001d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d56:	f003 0304 	and.w	r3, r3, #4
 8001d5a:	613b      	str	r3, [r7, #16]
 8001d5c:	693b      	ldr	r3, [r7, #16]
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 8001d5e:	2300      	movs	r3, #0
 8001d60:	60fb      	str	r3, [r7, #12]
 8001d62:	4b2b      	ldr	r3, [pc, #172]	@ (8001e10 <I2Cx_MspInit+0xe0>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d66:	4a2a      	ldr	r2, [pc, #168]	@ (8001e10 <I2Cx_MspInit+0xe0>)
 8001d68:	f043 0301 	orr.w	r3, r3, #1
 8001d6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d6e:	4b28      	ldr	r3, [pc, #160]	@ (8001e10 <I2Cx_MspInit+0xe0>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d72:	f003 0301 	and.w	r3, r3, #1
 8001d76:	60fb      	str	r3, [r7, #12]
 8001d78:	68fb      	ldr	r3, [r7, #12]
      
    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
 8001d7a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 8001d80:	2312      	movs	r3, #18
 8001d82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8001d84:	2300      	movs	r3, #0
 8001d86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 8001d88:	2302      	movs	r3, #2
 8001d8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8001d8c:	2304      	movs	r3, #4
 8001d8e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 8001d90:	f107 0314 	add.w	r3, r7, #20
 8001d94:	4619      	mov	r1, r3
 8001d96:	481f      	ldr	r0, [pc, #124]	@ (8001e14 <I2Cx_MspInit+0xe4>)
 8001d98:	f002 f93a 	bl	8004010 <HAL_GPIO_Init>
      
    /* Configure I2C Rx as alternate function  */
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 8001d9c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001da0:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 8001da2:	f107 0314 	add.w	r3, r7, #20
 8001da6:	4619      	mov	r1, r3
 8001da8:	481b      	ldr	r0, [pc, #108]	@ (8001e18 <I2Cx_MspInit+0xe8>)
 8001daa:	f002 f931 	bl	8004010 <HAL_GPIO_Init>
    
    
    /* Configure the Discovery I2Cx peripheral -------------------------------*/ 
    /* Enable I2C3 clock */
    DISCOVERY_I2Cx_CLOCK_ENABLE();
 8001dae:	2300      	movs	r3, #0
 8001db0:	60bb      	str	r3, [r7, #8]
 8001db2:	4b17      	ldr	r3, [pc, #92]	@ (8001e10 <I2Cx_MspInit+0xe0>)
 8001db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db6:	4a16      	ldr	r2, [pc, #88]	@ (8001e10 <I2Cx_MspInit+0xe0>)
 8001db8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001dbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dbe:	4b14      	ldr	r3, [pc, #80]	@ (8001e10 <I2Cx_MspInit+0xe0>)
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001dc6:	60bb      	str	r3, [r7, #8]
 8001dc8:	68bb      	ldr	r3, [r7, #8]
    
    /* Force the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_FORCE_RESET();
 8001dca:	4b11      	ldr	r3, [pc, #68]	@ (8001e10 <I2Cx_MspInit+0xe0>)
 8001dcc:	6a1b      	ldr	r3, [r3, #32]
 8001dce:	4a10      	ldr	r2, [pc, #64]	@ (8001e10 <I2Cx_MspInit+0xe0>)
 8001dd0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001dd4:	6213      	str	r3, [r2, #32]
      
    /* Release the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_RELEASE_RESET(); 
 8001dd6:	4b0e      	ldr	r3, [pc, #56]	@ (8001e10 <I2Cx_MspInit+0xe0>)
 8001dd8:	6a1b      	ldr	r3, [r3, #32]
 8001dda:	4a0d      	ldr	r2, [pc, #52]	@ (8001e10 <I2Cx_MspInit+0xe0>)
 8001ddc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001de0:	6213      	str	r3, [r2, #32]
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8001de2:	2200      	movs	r2, #0
 8001de4:	210f      	movs	r1, #15
 8001de6:	2048      	movs	r0, #72	@ 0x48
 8001de8:	f001 fc91 	bl	800370e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8001dec:	2048      	movs	r0, #72	@ 0x48
 8001dee:	f001 fcaa 	bl	8003746 <HAL_NVIC_EnableIRQ>
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8001df2:	2200      	movs	r2, #0
 8001df4:	210f      	movs	r1, #15
 8001df6:	2049      	movs	r0, #73	@ 0x49
 8001df8:	f001 fc89 	bl	800370e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);  
 8001dfc:	2049      	movs	r0, #73	@ 0x49
 8001dfe:	f001 fca2 	bl	8003746 <HAL_NVIC_EnableIRQ>
    /* Configure and enable I2C DMA RX Channel interrupt */
    HAL_NVIC_SetPriority((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn), EEPROM_I2C_DMA_PREPRIO, 0);
    HAL_NVIC_EnableIRQ((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn));
#endif /* EE_M24LR64 */
  }
}
 8001e02:	bf00      	nop
 8001e04:	3728      	adds	r7, #40	@ 0x28
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	40005c00 	.word	0x40005c00
 8001e10:	40023800 	.word	0x40023800
 8001e14:	40020000 	.word	0x40020000
 8001e18:	40020800 	.word	0x40020800

08001e1c <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8001e20:	4814      	ldr	r0, [pc, #80]	@ (8001e74 <I2Cx_Init+0x58>)
 8001e22:	f003 f87f 	bl	8004f24 <HAL_I2C_GetState>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d121      	bne.n	8001e70 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
 8001e2c:	4b11      	ldr	r3, [pc, #68]	@ (8001e74 <I2Cx_Init+0x58>)
 8001e2e:	4a12      	ldr	r2, [pc, #72]	@ (8001e78 <I2Cx_Init+0x5c>)
 8001e30:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 8001e32:	4b10      	ldr	r3, [pc, #64]	@ (8001e74 <I2Cx_Init+0x58>)
 8001e34:	4a11      	ldr	r2, [pc, #68]	@ (8001e7c <I2Cx_Init+0x60>)
 8001e36:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
 8001e38:	4b0e      	ldr	r3, [pc, #56]	@ (8001e74 <I2Cx_Init+0x58>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.OwnAddress1      = 0;
 8001e3e:	4b0d      	ldr	r3, [pc, #52]	@ (8001e74 <I2Cx_Init+0x58>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001e44:	4b0b      	ldr	r3, [pc, #44]	@ (8001e74 <I2Cx_Init+0x58>)
 8001e46:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001e4a:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLED;
 8001e4c:	4b09      	ldr	r3, [pc, #36]	@ (8001e74 <I2Cx_Init+0x58>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2      = 0;
 8001e52:	4b08      	ldr	r3, [pc, #32]	@ (8001e74 <I2Cx_Init+0x58>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLED;
 8001e58:	4b06      	ldr	r3, [pc, #24]	@ (8001e74 <I2Cx_Init+0x58>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLED;  
 8001e5e:	4b05      	ldr	r3, [pc, #20]	@ (8001e74 <I2Cx_Init+0x58>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	621a      	str	r2, [r3, #32]
    
    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 8001e64:	4803      	ldr	r0, [pc, #12]	@ (8001e74 <I2Cx_Init+0x58>)
 8001e66:	f7ff ff63 	bl	8001d30 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 8001e6a:	4802      	ldr	r0, [pc, #8]	@ (8001e74 <I2Cx_Init+0x58>)
 8001e6c:	f002 fbba 	bl	80045e4 <HAL_I2C_Init>
  }
}
 8001e70:	bf00      	nop
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	200002d4 	.word	0x200002d4
 8001e78:	40005c00 	.word	0x40005c00
 8001e7c:	000186a0 	.word	0x000186a0

08001e80 <I2Cx_ITConfig>:

/**
  * @brief  Configures Interruption pin for I2C communication.
  */
static void I2Cx_ITConfig(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b086      	sub	sp, #24
 8001e84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
    
  /* Enable the GPIO EXTI Clock */
  STMPE811_INT_CLK_ENABLE();
 8001e86:	2300      	movs	r3, #0
 8001e88:	603b      	str	r3, [r7, #0]
 8001e8a:	4b13      	ldr	r3, [pc, #76]	@ (8001ed8 <I2Cx_ITConfig+0x58>)
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e8e:	4a12      	ldr	r2, [pc, #72]	@ (8001ed8 <I2Cx_ITConfig+0x58>)
 8001e90:	f043 0301 	orr.w	r3, r3, #1
 8001e94:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e96:	4b10      	ldr	r3, [pc, #64]	@ (8001ed8 <I2Cx_ITConfig+0x58>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e9a:	f003 0301 	and.w	r3, r3, #1
 8001e9e:	603b      	str	r3, [r7, #0]
 8001ea0:	683b      	ldr	r3, [r7, #0]
  
  GPIO_InitStruct.Pin   = STMPE811_INT_PIN;
 8001ea2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001ea6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8001eac:	2300      	movs	r3, #0
 8001eae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 8001eb0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001eb4:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 8001eb6:	1d3b      	adds	r3, r7, #4
 8001eb8:	4619      	mov	r1, r3
 8001eba:	4808      	ldr	r0, [pc, #32]	@ (8001edc <I2Cx_ITConfig+0x5c>)
 8001ebc:	f002 f8a8 	bl	8004010 <HAL_GPIO_Init>
    
  /* Enable and set GPIO EXTI Interrupt to the highest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(STMPE811_INT_EXTI), 0x0F, 0x00);
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	210f      	movs	r1, #15
 8001ec4:	2028      	movs	r0, #40	@ 0x28
 8001ec6:	f001 fc22 	bl	800370e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(STMPE811_INT_EXTI));
 8001eca:	2028      	movs	r0, #40	@ 0x28
 8001ecc:	f001 fc3b 	bl	8003746 <HAL_NVIC_EnableIRQ>
}
 8001ed0:	bf00      	nop
 8001ed2:	3718      	adds	r7, #24
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	40023800 	.word	0x40023800
 8001edc:	40020000 	.word	0x40020000

08001ee0 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value)
  {
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b088      	sub	sp, #32
 8001ee4:	af04      	add	r7, sp, #16
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	71fb      	strb	r3, [r7, #7]
 8001eea:	460b      	mov	r3, r1
 8001eec:	71bb      	strb	r3, [r7, #6]
 8001eee:	4613      	mov	r3, r2
 8001ef0:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout); 
 8001ef6:	79fb      	ldrb	r3, [r7, #7]
 8001ef8:	b299      	uxth	r1, r3
 8001efa:	79bb      	ldrb	r3, [r7, #6]
 8001efc:	b29a      	uxth	r2, r3
 8001efe:	4b0b      	ldr	r3, [pc, #44]	@ (8001f2c <I2Cx_WriteData+0x4c>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	9302      	str	r3, [sp, #8]
 8001f04:	2301      	movs	r3, #1
 8001f06:	9301      	str	r3, [sp, #4]
 8001f08:	1d7b      	adds	r3, r7, #5
 8001f0a:	9300      	str	r3, [sp, #0]
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	4808      	ldr	r0, [pc, #32]	@ (8001f30 <I2Cx_WriteData+0x50>)
 8001f10:	f002 fcdc 	bl	80048cc <HAL_I2C_Mem_Write>
 8001f14:	4603      	mov	r3, r0
 8001f16:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001f18:	7bfb      	ldrb	r3, [r7, #15]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <I2Cx_WriteData+0x42>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8001f1e:	f000 f863 	bl	8001fe8 <I2Cx_Error>
  }        
}
 8001f22:	bf00      	nop
 8001f24:	3710      	adds	r7, #16
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	20000064 	.word	0x20000064
 8001f30:	200002d4 	.word	0x200002d4

08001f34 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint8_t Addr, uint8_t Reg)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b088      	sub	sp, #32
 8001f38:	af04      	add	r7, sp, #16
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	460a      	mov	r2, r1
 8001f3e:	71fb      	strb	r3, [r7, #7]
 8001f40:	4613      	mov	r3, r2
 8001f42:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001f44:	2300      	movs	r3, #0
 8001f46:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8001f4c:	79fb      	ldrb	r3, [r7, #7]
 8001f4e:	b299      	uxth	r1, r3
 8001f50:	79bb      	ldrb	r3, [r7, #6]
 8001f52:	b29a      	uxth	r2, r3
 8001f54:	4b0b      	ldr	r3, [pc, #44]	@ (8001f84 <I2Cx_ReadData+0x50>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	9302      	str	r3, [sp, #8]
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	9301      	str	r3, [sp, #4]
 8001f5e:	f107 030e 	add.w	r3, r7, #14
 8001f62:	9300      	str	r3, [sp, #0]
 8001f64:	2301      	movs	r3, #1
 8001f66:	4808      	ldr	r0, [pc, #32]	@ (8001f88 <I2Cx_ReadData+0x54>)
 8001f68:	f002 fdaa 	bl	8004ac0 <HAL_I2C_Mem_Read>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	73fb      	strb	r3, [r7, #15]
 
  /* Check the communication status */
  if(status != HAL_OK)
 8001f70:	7bfb      	ldrb	r3, [r7, #15]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <I2Cx_ReadData+0x46>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8001f76:	f000 f837 	bl	8001fe8 <I2Cx_Error>
  
  }
  return value;
 8001f7a:	7bbb      	ldrb	r3, [r7, #14]
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3710      	adds	r7, #16
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	20000064 	.word	0x20000064
 8001f88:	200002d4 	.word	0x200002d4

08001f8c <I2Cx_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static uint8_t I2Cx_ReadBuffer(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b088      	sub	sp, #32
 8001f90:	af04      	add	r7, sp, #16
 8001f92:	603a      	str	r2, [r7, #0]
 8001f94:	461a      	mov	r2, r3
 8001f96:	4603      	mov	r3, r0
 8001f98:	71fb      	strb	r3, [r7, #7]
 8001f9a:	460b      	mov	r3, r1
 8001f9c:	71bb      	strb	r3, [r7, #6]
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2cxTimeout);
 8001fa6:	79fb      	ldrb	r3, [r7, #7]
 8001fa8:	b299      	uxth	r1, r3
 8001faa:	79bb      	ldrb	r3, [r7, #6]
 8001fac:	b29a      	uxth	r2, r3
 8001fae:	4b0c      	ldr	r3, [pc, #48]	@ (8001fe0 <I2Cx_ReadBuffer+0x54>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	9302      	str	r3, [sp, #8]
 8001fb4:	88bb      	ldrh	r3, [r7, #4]
 8001fb6:	9301      	str	r3, [sp, #4]
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	9300      	str	r3, [sp, #0]
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	4809      	ldr	r0, [pc, #36]	@ (8001fe4 <I2Cx_ReadBuffer+0x58>)
 8001fc0:	f002 fd7e 	bl	8004ac0 <HAL_I2C_Mem_Read>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status == HAL_OK)
 8001fc8:	7bfb      	ldrb	r3, [r7, #15]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d101      	bne.n	8001fd2 <I2Cx_ReadBuffer+0x46>
  {
    return 0;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	e002      	b.n	8001fd8 <I2Cx_ReadBuffer+0x4c>
  }
  else
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8001fd2:	f000 f809 	bl	8001fe8 <I2Cx_Error>

    return 1;
 8001fd6:	2301      	movs	r3, #1
  }
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3710      	adds	r7, #16
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	20000064 	.word	0x20000064
 8001fe4:	200002d4 	.word	0x200002d4

08001fe8 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function
  */
static void I2Cx_Error(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8001fec:	4803      	ldr	r0, [pc, #12]	@ (8001ffc <I2Cx_Error+0x14>)
 8001fee:	f002 fc3d 	bl	800486c <HAL_I2C_DeInit>
  
  /* Re-Initialize the SPI communication BUS */
  I2Cx_Init();
 8001ff2:	f7ff ff13 	bl	8001e1c <I2Cx_Init>
}
 8001ff6:	bf00      	nop
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	200002d4 	.word	0x200002d4

08002000 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8002004:	4819      	ldr	r0, [pc, #100]	@ (800206c <SPIx_Init+0x6c>)
 8002006:	f005 fa77 	bl	80074f8 <HAL_SPI_GetState>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d12b      	bne.n	8002068 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8002010:	4b16      	ldr	r3, [pc, #88]	@ (800206c <SPIx_Init+0x6c>)
 8002012:	4a17      	ldr	r2, [pc, #92]	@ (8002070 <SPIx_Init+0x70>)
 8002014:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002016:	4b15      	ldr	r3, [pc, #84]	@ (800206c <SPIx_Init+0x6c>)
 8002018:	2218      	movs	r2, #24
 800201a:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 800201c:	4b13      	ldr	r3, [pc, #76]	@ (800206c <SPIx_Init+0x6c>)
 800201e:	2200      	movs	r2, #0
 8002020:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8002022:	4b12      	ldr	r3, [pc, #72]	@ (800206c <SPIx_Init+0x6c>)
 8002024:	2200      	movs	r2, #0
 8002026:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8002028:	4b10      	ldr	r3, [pc, #64]	@ (800206c <SPIx_Init+0x6c>)
 800202a:	2200      	movs	r2, #0
 800202c:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 800202e:	4b0f      	ldr	r3, [pc, #60]	@ (800206c <SPIx_Init+0x6c>)
 8002030:	2200      	movs	r2, #0
 8002032:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8002034:	4b0d      	ldr	r3, [pc, #52]	@ (800206c <SPIx_Init+0x6c>)
 8002036:	2207      	movs	r2, #7
 8002038:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 800203a:	4b0c      	ldr	r3, [pc, #48]	@ (800206c <SPIx_Init+0x6c>)
 800203c:	2200      	movs	r2, #0
 800203e:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8002040:	4b0a      	ldr	r3, [pc, #40]	@ (800206c <SPIx_Init+0x6c>)
 8002042:	2200      	movs	r2, #0
 8002044:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8002046:	4b09      	ldr	r3, [pc, #36]	@ (800206c <SPIx_Init+0x6c>)
 8002048:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800204c:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 800204e:	4b07      	ldr	r3, [pc, #28]	@ (800206c <SPIx_Init+0x6c>)
 8002050:	2200      	movs	r2, #0
 8002052:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8002054:	4b05      	ldr	r3, [pc, #20]	@ (800206c <SPIx_Init+0x6c>)
 8002056:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800205a:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 800205c:	4803      	ldr	r0, [pc, #12]	@ (800206c <SPIx_Init+0x6c>)
 800205e:	f000 f853 	bl	8002108 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8002062:	4802      	ldr	r0, [pc, #8]	@ (800206c <SPIx_Init+0x6c>)
 8002064:	f004 fd91 	bl	8006b8a <HAL_SPI_Init>
  } 
}
 8002068:	bf00      	nop
 800206a:	bd80      	pop	{r7, pc}
 800206c:	20000328 	.word	0x20000328
 8002070:	40015000 	.word	0x40015000

08002074 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	4603      	mov	r3, r0
 800207c:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 800207e:	2300      	movs	r3, #0
 8002080:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8002082:	79fb      	ldrb	r3, [r7, #7]
 8002084:	b29a      	uxth	r2, r3
 8002086:	4b09      	ldr	r3, [pc, #36]	@ (80020ac <SPIx_Read+0x38>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f107 0108 	add.w	r1, r7, #8
 800208e:	4808      	ldr	r0, [pc, #32]	@ (80020b0 <SPIx_Read+0x3c>)
 8002090:	f004 ff70 	bl	8006f74 <HAL_SPI_Receive>
 8002094:	4603      	mov	r3, r0
 8002096:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002098:	7bfb      	ldrb	r3, [r7, #15]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 800209e:	f000 f827 	bl	80020f0 <SPIx_Error>
  }
  
  return readvalue;
 80020a2:	68bb      	ldr	r3, [r7, #8]
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3710      	adds	r7, #16
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	20000068 	.word	0x20000068
 80020b0:	20000328 	.word	0x20000328

080020b4 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	4603      	mov	r3, r0
 80020bc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80020be:	2300      	movs	r3, #0
 80020c0:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 80020c2:	4b09      	ldr	r3, [pc, #36]	@ (80020e8 <SPIx_Write+0x34>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	1db9      	adds	r1, r7, #6
 80020c8:	2201      	movs	r2, #1
 80020ca:	4808      	ldr	r0, [pc, #32]	@ (80020ec <SPIx_Write+0x38>)
 80020cc:	f004 fe0e 	bl	8006cec <HAL_SPI_Transmit>
 80020d0:	4603      	mov	r3, r0
 80020d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80020d4:	7bfb      	ldrb	r3, [r7, #15]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80020da:	f000 f809 	bl	80020f0 <SPIx_Error>
  }
}
 80020de:	bf00      	nop
 80020e0:	3710      	adds	r7, #16
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	20000068 	.word	0x20000068
 80020ec:	20000328 	.word	0x20000328

080020f0 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 80020f4:	4803      	ldr	r0, [pc, #12]	@ (8002104 <SPIx_Error+0x14>)
 80020f6:	f004 fdd1 	bl	8006c9c <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 80020fa:	f7ff ff81 	bl	8002000 <SPIx_Init>
}
 80020fe:	bf00      	nop
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	20000328 	.word	0x20000328

08002108 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b08a      	sub	sp, #40	@ 0x28
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8002110:	2300      	movs	r3, #0
 8002112:	613b      	str	r3, [r7, #16]
 8002114:	4b17      	ldr	r3, [pc, #92]	@ (8002174 <SPIx_MspInit+0x6c>)
 8002116:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002118:	4a16      	ldr	r2, [pc, #88]	@ (8002174 <SPIx_MspInit+0x6c>)
 800211a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800211e:	6453      	str	r3, [r2, #68]	@ 0x44
 8002120:	4b14      	ldr	r3, [pc, #80]	@ (8002174 <SPIx_MspInit+0x6c>)
 8002122:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002124:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002128:	613b      	str	r3, [r7, #16]
 800212a:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 800212c:	2300      	movs	r3, #0
 800212e:	60fb      	str	r3, [r7, #12]
 8002130:	4b10      	ldr	r3, [pc, #64]	@ (8002174 <SPIx_MspInit+0x6c>)
 8002132:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002134:	4a0f      	ldr	r2, [pc, #60]	@ (8002174 <SPIx_MspInit+0x6c>)
 8002136:	f043 0320 	orr.w	r3, r3, #32
 800213a:	6313      	str	r3, [r2, #48]	@ 0x30
 800213c:	4b0d      	ldr	r3, [pc, #52]	@ (8002174 <SPIx_MspInit+0x6c>)
 800213e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002140:	f003 0320 	and.w	r3, r3, #32
 8002144:	60fb      	str	r3, [r7, #12]
 8002146:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8002148:	f44f 7360 	mov.w	r3, #896	@ 0x380
 800214c:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 800214e:	2302      	movs	r3, #2
 8002150:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8002152:	2302      	movs	r3, #2
 8002154:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8002156:	2301      	movs	r3, #1
 8002158:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 800215a:	2305      	movs	r3, #5
 800215c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 800215e:	f107 0314 	add.w	r3, r7, #20
 8002162:	4619      	mov	r1, r3
 8002164:	4804      	ldr	r0, [pc, #16]	@ (8002178 <SPIx_MspInit+0x70>)
 8002166:	f001 ff53 	bl	8004010 <HAL_GPIO_Init>
}
 800216a:	bf00      	nop
 800216c:	3728      	adds	r7, #40	@ 0x28
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	40023800 	.word	0x40023800
 8002178:	40021400 	.word	0x40021400

0800217c <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b088      	sub	sp, #32
 8002180:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8002182:	4b36      	ldr	r3, [pc, #216]	@ (800225c <LCD_IO_Init+0xe0>)
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d164      	bne.n	8002254 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 800218a:	4b34      	ldr	r3, [pc, #208]	@ (800225c <LCD_IO_Init+0xe0>)
 800218c:	2201      	movs	r2, #1
 800218e:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8002190:	2300      	movs	r3, #0
 8002192:	60bb      	str	r3, [r7, #8]
 8002194:	4b32      	ldr	r3, [pc, #200]	@ (8002260 <LCD_IO_Init+0xe4>)
 8002196:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002198:	4a31      	ldr	r2, [pc, #196]	@ (8002260 <LCD_IO_Init+0xe4>)
 800219a:	f043 0308 	orr.w	r3, r3, #8
 800219e:	6313      	str	r3, [r2, #48]	@ 0x30
 80021a0:	4b2f      	ldr	r3, [pc, #188]	@ (8002260 <LCD_IO_Init+0xe4>)
 80021a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021a4:	f003 0308 	and.w	r3, r3, #8
 80021a8:	60bb      	str	r3, [r7, #8]
 80021aa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 80021ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80021b0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80021b2:	2301      	movs	r3, #1
 80021b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80021b6:	2300      	movs	r3, #0
 80021b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80021ba:	2302      	movs	r3, #2
 80021bc:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80021be:	f107 030c 	add.w	r3, r7, #12
 80021c2:	4619      	mov	r1, r3
 80021c4:	4827      	ldr	r0, [pc, #156]	@ (8002264 <LCD_IO_Init+0xe8>)
 80021c6:	f001 ff23 	bl	8004010 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 80021ca:	2300      	movs	r3, #0
 80021cc:	607b      	str	r3, [r7, #4]
 80021ce:	4b24      	ldr	r3, [pc, #144]	@ (8002260 <LCD_IO_Init+0xe4>)
 80021d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d2:	4a23      	ldr	r2, [pc, #140]	@ (8002260 <LCD_IO_Init+0xe4>)
 80021d4:	f043 0308 	orr.w	r3, r3, #8
 80021d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80021da:	4b21      	ldr	r3, [pc, #132]	@ (8002260 <LCD_IO_Init+0xe4>)
 80021dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021de:	f003 0308 	and.w	r3, r3, #8
 80021e2:	607b      	str	r3, [r7, #4]
 80021e4:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 80021e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021ea:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80021ec:	2301      	movs	r3, #1
 80021ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80021f0:	2300      	movs	r3, #0
 80021f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80021f4:	2302      	movs	r3, #2
 80021f6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80021f8:	f107 030c 	add.w	r3, r7, #12
 80021fc:	4619      	mov	r1, r3
 80021fe:	4819      	ldr	r0, [pc, #100]	@ (8002264 <LCD_IO_Init+0xe8>)
 8002200:	f001 ff06 	bl	8004010 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8002204:	2300      	movs	r3, #0
 8002206:	603b      	str	r3, [r7, #0]
 8002208:	4b15      	ldr	r3, [pc, #84]	@ (8002260 <LCD_IO_Init+0xe4>)
 800220a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800220c:	4a14      	ldr	r2, [pc, #80]	@ (8002260 <LCD_IO_Init+0xe4>)
 800220e:	f043 0304 	orr.w	r3, r3, #4
 8002212:	6313      	str	r3, [r2, #48]	@ 0x30
 8002214:	4b12      	ldr	r3, [pc, #72]	@ (8002260 <LCD_IO_Init+0xe4>)
 8002216:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002218:	f003 0304 	and.w	r3, r3, #4
 800221c:	603b      	str	r3, [r7, #0]
 800221e:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8002220:	2304      	movs	r3, #4
 8002222:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002224:	2301      	movs	r3, #1
 8002226:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002228:	2300      	movs	r3, #0
 800222a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800222c:	2302      	movs	r3, #2
 800222e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8002230:	f107 030c 	add.w	r3, r7, #12
 8002234:	4619      	mov	r1, r3
 8002236:	480c      	ldr	r0, [pc, #48]	@ (8002268 <LCD_IO_Init+0xec>)
 8002238:	f001 feea 	bl	8004010 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 800223c:	2200      	movs	r2, #0
 800223e:	2104      	movs	r1, #4
 8002240:	4809      	ldr	r0, [pc, #36]	@ (8002268 <LCD_IO_Init+0xec>)
 8002242:	f002 f9b5 	bl	80045b0 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8002246:	2201      	movs	r2, #1
 8002248:	2104      	movs	r1, #4
 800224a:	4807      	ldr	r0, [pc, #28]	@ (8002268 <LCD_IO_Init+0xec>)
 800224c:	f002 f9b0 	bl	80045b0 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8002250:	f7ff fed6 	bl	8002000 <SPIx_Init>
  }
}
 8002254:	bf00      	nop
 8002256:	3720      	adds	r7, #32
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	20000380 	.word	0x20000380
 8002260:	40023800 	.word	0x40023800
 8002264:	40020c00 	.word	0x40020c00
 8002268:	40020800 	.word	0x40020800

0800226c <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	4603      	mov	r3, r0
 8002274:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8002276:	2201      	movs	r2, #1
 8002278:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800227c:	480a      	ldr	r0, [pc, #40]	@ (80022a8 <LCD_IO_WriteData+0x3c>)
 800227e:	f002 f997 	bl	80045b0 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8002282:	2200      	movs	r2, #0
 8002284:	2104      	movs	r1, #4
 8002286:	4809      	ldr	r0, [pc, #36]	@ (80022ac <LCD_IO_WriteData+0x40>)
 8002288:	f002 f992 	bl	80045b0 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 800228c:	88fb      	ldrh	r3, [r7, #6]
 800228e:	4618      	mov	r0, r3
 8002290:	f7ff ff10 	bl	80020b4 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002294:	2201      	movs	r2, #1
 8002296:	2104      	movs	r1, #4
 8002298:	4804      	ldr	r0, [pc, #16]	@ (80022ac <LCD_IO_WriteData+0x40>)
 800229a:	f002 f989 	bl	80045b0 <HAL_GPIO_WritePin>
}
 800229e:	bf00      	nop
 80022a0:	3708      	adds	r7, #8
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	40020c00 	.word	0x40020c00
 80022ac:	40020800 	.word	0x40020800

080022b0 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	4603      	mov	r3, r0
 80022b8:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80022ba:	2200      	movs	r2, #0
 80022bc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80022c0:	480a      	ldr	r0, [pc, #40]	@ (80022ec <LCD_IO_WriteReg+0x3c>)
 80022c2:	f002 f975 	bl	80045b0 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 80022c6:	2200      	movs	r2, #0
 80022c8:	2104      	movs	r1, #4
 80022ca:	4809      	ldr	r0, [pc, #36]	@ (80022f0 <LCD_IO_WriteReg+0x40>)
 80022cc:	f002 f970 	bl	80045b0 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 80022d0:	79fb      	ldrb	r3, [r7, #7]
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	4618      	mov	r0, r3
 80022d6:	f7ff feed 	bl	80020b4 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80022da:	2201      	movs	r2, #1
 80022dc:	2104      	movs	r1, #4
 80022de:	4804      	ldr	r0, [pc, #16]	@ (80022f0 <LCD_IO_WriteReg+0x40>)
 80022e0:	f002 f966 	bl	80045b0 <HAL_GPIO_WritePin>
}
 80022e4:	bf00      	nop
 80022e6:	3708      	adds	r7, #8
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	40020c00 	.word	0x40020c00
 80022f0:	40020800 	.word	0x40020800

080022f4 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	4603      	mov	r3, r0
 80022fc:	460a      	mov	r2, r1
 80022fe:	80fb      	strh	r3, [r7, #6]
 8002300:	4613      	mov	r3, r2
 8002302:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8002304:	2300      	movs	r3, #0
 8002306:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8002308:	2200      	movs	r2, #0
 800230a:	2104      	movs	r1, #4
 800230c:	4810      	ldr	r0, [pc, #64]	@ (8002350 <LCD_IO_ReadData+0x5c>)
 800230e:	f002 f94f 	bl	80045b0 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002312:	2200      	movs	r2, #0
 8002314:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002318:	480e      	ldr	r0, [pc, #56]	@ (8002354 <LCD_IO_ReadData+0x60>)
 800231a:	f002 f949 	bl	80045b0 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 800231e:	88fb      	ldrh	r3, [r7, #6]
 8002320:	4618      	mov	r0, r3
 8002322:	f7ff fec7 	bl	80020b4 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8002326:	797b      	ldrb	r3, [r7, #5]
 8002328:	4618      	mov	r0, r3
 800232a:	f7ff fea3 	bl	8002074 <SPIx_Read>
 800232e:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8002330:	2201      	movs	r2, #1
 8002332:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002336:	4807      	ldr	r0, [pc, #28]	@ (8002354 <LCD_IO_ReadData+0x60>)
 8002338:	f002 f93a 	bl	80045b0 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800233c:	2201      	movs	r2, #1
 800233e:	2104      	movs	r1, #4
 8002340:	4803      	ldr	r0, [pc, #12]	@ (8002350 <LCD_IO_ReadData+0x5c>)
 8002342:	f002 f935 	bl	80045b0 <HAL_GPIO_WritePin>
  
  return readvalue;
 8002346:	68fb      	ldr	r3, [r7, #12]
}
 8002348:	4618      	mov	r0, r3
 800234a:	3710      	adds	r7, #16
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	40020800 	.word	0x40020800
 8002354:	40020c00 	.word	0x40020c00

08002358 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f001 f8d5 	bl	8003510 <HAL_Delay>
}
 8002366:	bf00      	nop
 8002368:	3708      	adds	r7, #8
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}

0800236e <IOE_Init>:

/**
  * @brief  IOE Low Level Initialization.
  */
void IOE_Init(void) 
{
 800236e:	b580      	push	{r7, lr}
 8002370:	af00      	add	r7, sp, #0
  I2Cx_Init();
 8002372:	f7ff fd53 	bl	8001e1c <I2Cx_Init>
}
 8002376:	bf00      	nop
 8002378:	bd80      	pop	{r7, pc}

0800237a <IOE_ITConfig>:

/**
  * @brief  IOE Low Level Interrupt configuration.
  */
void IOE_ITConfig(void)
{
 800237a:	b580      	push	{r7, lr}
 800237c:	af00      	add	r7, sp, #0
  I2Cx_ITConfig();
 800237e:	f7ff fd7f 	bl	8001e80 <I2Cx_ITConfig>
}
 8002382:	bf00      	nop
 8002384:	bd80      	pop	{r7, pc}

08002386 <IOE_Write>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @param  Value: Data to be written
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002386:	b580      	push	{r7, lr}
 8002388:	b082      	sub	sp, #8
 800238a:	af00      	add	r7, sp, #0
 800238c:	4603      	mov	r3, r0
 800238e:	71fb      	strb	r3, [r7, #7]
 8002390:	460b      	mov	r3, r1
 8002392:	71bb      	strb	r3, [r7, #6]
 8002394:	4613      	mov	r3, r2
 8002396:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 8002398:	797a      	ldrb	r2, [r7, #5]
 800239a:	79b9      	ldrb	r1, [r7, #6]
 800239c:	79fb      	ldrb	r3, [r7, #7]
 800239e:	4618      	mov	r0, r3
 80023a0:	f7ff fd9e 	bl	8001ee0 <I2Cx_WriteData>
}
 80023a4:	bf00      	nop
 80023a6:	3708      	adds	r7, #8
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}

080023ac <IOE_Read>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @retval The read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	4603      	mov	r3, r0
 80023b4:	460a      	mov	r2, r1
 80023b6:	71fb      	strb	r3, [r7, #7]
 80023b8:	4613      	mov	r3, r2
 80023ba:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 80023bc:	79ba      	ldrb	r2, [r7, #6]
 80023be:	79fb      	ldrb	r3, [r7, #7]
 80023c0:	4611      	mov	r1, r2
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7ff fdb6 	bl	8001f34 <I2Cx_ReadData>
 80023c8:	4603      	mov	r3, r0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3708      	adds	r7, #8
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}

080023d2 <IOE_ReadMultiple>:
  * @param  pBuffer: pointer to data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 80023d2:	b580      	push	{r7, lr}
 80023d4:	b082      	sub	sp, #8
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	603a      	str	r2, [r7, #0]
 80023da:	461a      	mov	r2, r3
 80023dc:	4603      	mov	r3, r0
 80023de:	71fb      	strb	r3, [r7, #7]
 80023e0:	460b      	mov	r3, r1
 80023e2:	71bb      	strb	r3, [r7, #6]
 80023e4:	4613      	mov	r3, r2
 80023e6:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadBuffer(Addr, Reg, pBuffer, Length);
 80023e8:	88bb      	ldrh	r3, [r7, #4]
 80023ea:	79b9      	ldrb	r1, [r7, #6]
 80023ec:	79f8      	ldrb	r0, [r7, #7]
 80023ee:	683a      	ldr	r2, [r7, #0]
 80023f0:	f7ff fdcc 	bl	8001f8c <I2Cx_ReadBuffer>
 80023f4:	4603      	mov	r3, r0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3708      	adds	r7, #8
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}

080023fe <IOE_Delay>:
/**
  * @brief  IOE Delay.
  * @param  Delay in ms
  */
void IOE_Delay(uint32_t Delay)
{
 80023fe:	b580      	push	{r7, lr}
 8002400:	b082      	sub	sp, #8
 8002402:	af00      	add	r7, sp, #0
 8002404:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f001 f882 	bl	8003510 <HAL_Delay>
}
 800240c:	bf00      	nop
 800240e:	3708      	adds	r7, #8
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}

08002414 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8002418:	4b2d      	ldr	r3, [pc, #180]	@ (80024d0 <BSP_LCD_Init+0xbc>)
 800241a:	4a2e      	ldr	r2, [pc, #184]	@ (80024d4 <BSP_LCD_Init+0xc0>)
 800241c:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 800241e:	4b2c      	ldr	r3, [pc, #176]	@ (80024d0 <BSP_LCD_Init+0xbc>)
 8002420:	2209      	movs	r2, #9
 8002422:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8002424:	4b2a      	ldr	r3, [pc, #168]	@ (80024d0 <BSP_LCD_Init+0xbc>)
 8002426:	2201      	movs	r2, #1
 8002428:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 800242a:	4b29      	ldr	r3, [pc, #164]	@ (80024d0 <BSP_LCD_Init+0xbc>)
 800242c:	221d      	movs	r2, #29
 800242e:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8002430:	4b27      	ldr	r3, [pc, #156]	@ (80024d0 <BSP_LCD_Init+0xbc>)
 8002432:	2203      	movs	r2, #3
 8002434:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 8002436:	4b26      	ldr	r3, [pc, #152]	@ (80024d0 <BSP_LCD_Init+0xbc>)
 8002438:	f240 120d 	movw	r2, #269	@ 0x10d
 800243c:	625a      	str	r2, [r3, #36]	@ 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 800243e:	4b24      	ldr	r3, [pc, #144]	@ (80024d0 <BSP_LCD_Init+0xbc>)
 8002440:	f240 1243 	movw	r2, #323	@ 0x143
 8002444:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 8002446:	4b22      	ldr	r3, [pc, #136]	@ (80024d0 <BSP_LCD_Init+0xbc>)
 8002448:	f240 1217 	movw	r2, #279	@ 0x117
 800244c:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 800244e:	4b20      	ldr	r3, [pc, #128]	@ (80024d0 <BSP_LCD_Init+0xbc>)
 8002450:	f240 1247 	movw	r2, #327	@ 0x147
 8002454:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 8002456:	4b1e      	ldr	r3, [pc, #120]	@ (80024d0 <BSP_LCD_Init+0xbc>)
 8002458:	2200      	movs	r2, #0
 800245a:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 800245e:	4b1c      	ldr	r3, [pc, #112]	@ (80024d0 <BSP_LCD_Init+0xbc>)
 8002460:	2200      	movs	r2, #0
 8002462:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 8002466:	4b1a      	ldr	r3, [pc, #104]	@ (80024d0 <BSP_LCD_Init+0xbc>)
 8002468:	2200      	movs	r2, #0
 800246a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800246e:	4b1a      	ldr	r3, [pc, #104]	@ (80024d8 <BSP_LCD_Init+0xc4>)
 8002470:	2208      	movs	r2, #8
 8002472:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8002474:	4b18      	ldr	r3, [pc, #96]	@ (80024d8 <BSP_LCD_Init+0xc4>)
 8002476:	22c0      	movs	r2, #192	@ 0xc0
 8002478:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 800247a:	4b17      	ldr	r3, [pc, #92]	@ (80024d8 <BSP_LCD_Init+0xc4>)
 800247c:	2204      	movs	r2, #4
 800247e:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8002480:	4b15      	ldr	r3, [pc, #84]	@ (80024d8 <BSP_LCD_Init+0xc4>)
 8002482:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002486:	625a      	str	r2, [r3, #36]	@ 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8002488:	4813      	ldr	r0, [pc, #76]	@ (80024d8 <BSP_LCD_Init+0xc4>)
 800248a:	f004 f92d 	bl	80066e8 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800248e:	4b10      	ldr	r3, [pc, #64]	@ (80024d0 <BSP_LCD_Init+0xbc>)
 8002490:	2200      	movs	r2, #0
 8002492:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002494:	4b0e      	ldr	r3, [pc, #56]	@ (80024d0 <BSP_LCD_Init+0xbc>)
 8002496:	2200      	movs	r2, #0
 8002498:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800249a:	4b0d      	ldr	r3, [pc, #52]	@ (80024d0 <BSP_LCD_Init+0xbc>)
 800249c:	2200      	movs	r2, #0
 800249e:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80024a0:	4b0b      	ldr	r3, [pc, #44]	@ (80024d0 <BSP_LCD_Init+0xbc>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 80024a6:	f000 fbcf 	bl	8002c48 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 80024aa:	4809      	ldr	r0, [pc, #36]	@ (80024d0 <BSP_LCD_Init+0xbc>)
 80024ac:	f003 f978 	bl	80057a0 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 80024b0:	4b0a      	ldr	r3, [pc, #40]	@ (80024dc <BSP_LCD_Init+0xc8>)
 80024b2:	4a0b      	ldr	r2, [pc, #44]	@ (80024e0 <BSP_LCD_Init+0xcc>)
 80024b4:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 80024b6:	4b09      	ldr	r3, [pc, #36]	@ (80024dc <BSP_LCD_Init+0xc8>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 80024be:	f000 fdb1 	bl	8003024 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80024c2:	4808      	ldr	r0, [pc, #32]	@ (80024e4 <BSP_LCD_Init+0xd0>)
 80024c4:	f000 f8b4 	bl	8002630 <BSP_LCD_SetFont>

  return LCD_OK;
 80024c8:	2300      	movs	r3, #0
}  
 80024ca:	4618      	mov	r0, r3
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	20000384 	.word	0x20000384
 80024d4:	40016800 	.word	0x40016800
 80024d8:	2000046c 	.word	0x2000046c
 80024dc:	200004b8 	.word	0x200004b8
 80024e0:	20000004 	.word	0x20000004
 80024e4:	2000006c 	.word	0x2000006c

080024e8 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 80024ec:	4b03      	ldr	r3, [pc, #12]	@ (80024fc <BSP_LCD_GetXSize+0x14>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024f2:	4798      	blx	r3
 80024f4:	4603      	mov	r3, r0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	200004b8 	.word	0x200004b8

08002500 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8002504:	4b03      	ldr	r3, [pc, #12]	@ (8002514 <BSP_LCD_GetYSize+0x14>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800250a:	4798      	blx	r3
 800250c:	4603      	mov	r3, r0
}
 800250e:	4618      	mov	r0, r3
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	200004b8 	.word	0x200004b8

08002518 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8002518:	b580      	push	{r7, lr}
 800251a:	b090      	sub	sp, #64	@ 0x40
 800251c:	af00      	add	r7, sp, #0
 800251e:	4603      	mov	r3, r0
 8002520:	6039      	str	r1, [r7, #0]
 8002522:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8002524:	2300      	movs	r3, #0
 8002526:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8002528:	f7ff ffde 	bl	80024e8 <BSP_LCD_GetXSize>
 800252c:	4603      	mov	r3, r0
 800252e:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8002530:	2300      	movs	r3, #0
 8002532:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8002534:	f7ff ffe4 	bl	8002500 <BSP_LCD_GetYSize>
 8002538:	4603      	mov	r3, r0
 800253a:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800253c:	2300      	movs	r3, #0
 800253e:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	633b      	str	r3, [r7, #48]	@ 0x30
  Layercfg.Alpha = 255;
 8002544:	23ff      	movs	r3, #255	@ 0xff
 8002546:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8002548:	2300      	movs	r3, #0
 800254a:	627b      	str	r3, [r7, #36]	@ 0x24
  Layercfg.Backcolor.Blue = 0;
 800254c:	2300      	movs	r3, #0
 800254e:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  Layercfg.Backcolor.Green = 0;
 8002552:	2300      	movs	r3, #0
 8002554:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  Layercfg.Backcolor.Red = 0;
 8002558:	2300      	movs	r3, #0
 800255a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800255e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002562:	62bb      	str	r3, [r7, #40]	@ 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002564:	2307      	movs	r3, #7
 8002566:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8002568:	f7ff ffbe 	bl	80024e8 <BSP_LCD_GetXSize>
 800256c:	4603      	mov	r3, r0
 800256e:	637b      	str	r3, [r7, #52]	@ 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8002570:	f7ff ffc6 	bl	8002500 <BSP_LCD_GetYSize>
 8002574:	4603      	mov	r3, r0
 8002576:	63bb      	str	r3, [r7, #56]	@ 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8002578:	88fa      	ldrh	r2, [r7, #6]
 800257a:	f107 030c 	add.w	r3, r7, #12
 800257e:	4619      	mov	r1, r3
 8002580:	4814      	ldr	r0, [pc, #80]	@ (80025d4 <BSP_LCD_LayerDefaultInit+0xbc>)
 8002582:	f003 f9dd 	bl	8005940 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8002586:	88fa      	ldrh	r2, [r7, #6]
 8002588:	4913      	ldr	r1, [pc, #76]	@ (80025d8 <BSP_LCD_LayerDefaultInit+0xc0>)
 800258a:	4613      	mov	r3, r2
 800258c:	005b      	lsls	r3, r3, #1
 800258e:	4413      	add	r3, r2
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	440b      	add	r3, r1
 8002594:	3304      	adds	r3, #4
 8002596:	f04f 32ff 	mov.w	r2, #4294967295
 800259a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 800259c:	88fa      	ldrh	r2, [r7, #6]
 800259e:	490e      	ldr	r1, [pc, #56]	@ (80025d8 <BSP_LCD_LayerDefaultInit+0xc0>)
 80025a0:	4613      	mov	r3, r2
 80025a2:	005b      	lsls	r3, r3, #1
 80025a4:	4413      	add	r3, r2
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	440b      	add	r3, r1
 80025aa:	3308      	adds	r3, #8
 80025ac:	4a0b      	ldr	r2, [pc, #44]	@ (80025dc <BSP_LCD_LayerDefaultInit+0xc4>)
 80025ae:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80025b0:	88fa      	ldrh	r2, [r7, #6]
 80025b2:	4909      	ldr	r1, [pc, #36]	@ (80025d8 <BSP_LCD_LayerDefaultInit+0xc0>)
 80025b4:	4613      	mov	r3, r2
 80025b6:	005b      	lsls	r3, r3, #1
 80025b8:	4413      	add	r3, r2
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	440b      	add	r3, r1
 80025be:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 80025c2:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 80025c4:	4803      	ldr	r0, [pc, #12]	@ (80025d4 <BSP_LCD_LayerDefaultInit+0xbc>)
 80025c6:	f003 f9f9 	bl	80059bc <HAL_LTDC_EnableDither>
}
 80025ca:	bf00      	nop
 80025cc:	3740      	adds	r7, #64	@ 0x40
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	20000384 	.word	0x20000384
 80025d8:	200004a0 	.word	0x200004a0
 80025dc:	2000006c 	.word	0x2000006c

080025e0 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 80025e8:	4a04      	ldr	r2, [pc, #16]	@ (80025fc <BSP_LCD_SelectLayer+0x1c>)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6013      	str	r3, [r2, #0]
}
 80025ee:	bf00      	nop
 80025f0:	370c      	adds	r7, #12
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	2000049c 	.word	0x2000049c

08002600 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002608:	4b07      	ldr	r3, [pc, #28]	@ (8002628 <BSP_LCD_SetTextColor+0x28>)
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	4907      	ldr	r1, [pc, #28]	@ (800262c <BSP_LCD_SetTextColor+0x2c>)
 800260e:	4613      	mov	r3, r2
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	4413      	add	r3, r2
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	440b      	add	r3, r1
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	601a      	str	r2, [r3, #0]
}
 800261c:	bf00      	nop
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr
 8002628:	2000049c 	.word	0x2000049c
 800262c:	200004a0 	.word	0x200004a0

08002630 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8002638:	4b08      	ldr	r3, [pc, #32]	@ (800265c <BSP_LCD_SetFont+0x2c>)
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	4908      	ldr	r1, [pc, #32]	@ (8002660 <BSP_LCD_SetFont+0x30>)
 800263e:	4613      	mov	r3, r2
 8002640:	005b      	lsls	r3, r3, #1
 8002642:	4413      	add	r3, r2
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	440b      	add	r3, r1
 8002648:	3308      	adds	r3, #8
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	601a      	str	r2, [r3, #0]
}
 800264e:	bf00      	nop
 8002650:	370c      	adds	r7, #12
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	2000049c 	.word	0x2000049c
 8002660:	200004a0 	.word	0x200004a0

08002664 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8002664:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002666:	b085      	sub	sp, #20
 8002668:	af02      	add	r7, sp, #8
 800266a:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 800266c:	4b0f      	ldr	r3, [pc, #60]	@ (80026ac <BSP_LCD_Clear+0x48>)
 800266e:	681c      	ldr	r4, [r3, #0]
 8002670:	4b0e      	ldr	r3, [pc, #56]	@ (80026ac <BSP_LCD_Clear+0x48>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a0e      	ldr	r2, [pc, #56]	@ (80026b0 <BSP_LCD_Clear+0x4c>)
 8002676:	2134      	movs	r1, #52	@ 0x34
 8002678:	fb01 f303 	mul.w	r3, r1, r3
 800267c:	4413      	add	r3, r2
 800267e:	335c      	adds	r3, #92	@ 0x5c
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	461e      	mov	r6, r3
 8002684:	f7ff ff30 	bl	80024e8 <BSP_LCD_GetXSize>
 8002688:	4605      	mov	r5, r0
 800268a:	f7ff ff39 	bl	8002500 <BSP_LCD_GetYSize>
 800268e:	4602      	mov	r2, r0
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	9301      	str	r3, [sp, #4]
 8002694:	2300      	movs	r3, #0
 8002696:	9300      	str	r3, [sp, #0]
 8002698:	4613      	mov	r3, r2
 800269a:	462a      	mov	r2, r5
 800269c:	4631      	mov	r1, r6
 800269e:	4620      	mov	r0, r4
 80026a0:	f000 fc88 	bl	8002fb4 <FillBuffer>
}
 80026a4:	bf00      	nop
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026ac:	2000049c 	.word	0x2000049c
 80026b0:	20000384 	.word	0x20000384

080026b4 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80026b4:	b590      	push	{r4, r7, lr}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	4603      	mov	r3, r0
 80026bc:	80fb      	strh	r3, [r7, #6]
 80026be:	460b      	mov	r3, r1
 80026c0:	80bb      	strh	r3, [r7, #4]
 80026c2:	4613      	mov	r3, r2
 80026c4:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80026c6:	4b1b      	ldr	r3, [pc, #108]	@ (8002734 <BSP_LCD_DisplayChar+0x80>)
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	491b      	ldr	r1, [pc, #108]	@ (8002738 <BSP_LCD_DisplayChar+0x84>)
 80026cc:	4613      	mov	r3, r2
 80026ce:	005b      	lsls	r3, r3, #1
 80026d0:	4413      	add	r3, r2
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	440b      	add	r3, r1
 80026d6:	3308      	adds	r3, #8
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	6819      	ldr	r1, [r3, #0]
 80026dc:	78fb      	ldrb	r3, [r7, #3]
 80026de:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80026e2:	4b14      	ldr	r3, [pc, #80]	@ (8002734 <BSP_LCD_DisplayChar+0x80>)
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	4c14      	ldr	r4, [pc, #80]	@ (8002738 <BSP_LCD_DisplayChar+0x84>)
 80026e8:	4613      	mov	r3, r2
 80026ea:	005b      	lsls	r3, r3, #1
 80026ec:	4413      	add	r3, r2
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	4423      	add	r3, r4
 80026f2:	3308      	adds	r3, #8
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80026f8:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80026fc:	4b0d      	ldr	r3, [pc, #52]	@ (8002734 <BSP_LCD_DisplayChar+0x80>)
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	4c0d      	ldr	r4, [pc, #52]	@ (8002738 <BSP_LCD_DisplayChar+0x84>)
 8002702:	4613      	mov	r3, r2
 8002704:	005b      	lsls	r3, r3, #1
 8002706:	4413      	add	r3, r2
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	4423      	add	r3, r4
 800270c:	3308      	adds	r3, #8
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	889b      	ldrh	r3, [r3, #4]
 8002712:	3307      	adds	r3, #7
 8002714:	2b00      	cmp	r3, #0
 8002716:	da00      	bge.n	800271a <BSP_LCD_DisplayChar+0x66>
 8002718:	3307      	adds	r3, #7
 800271a:	10db      	asrs	r3, r3, #3
 800271c:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002720:	18ca      	adds	r2, r1, r3
 8002722:	88b9      	ldrh	r1, [r7, #4]
 8002724:	88fb      	ldrh	r3, [r7, #6]
 8002726:	4618      	mov	r0, r3
 8002728:	f000 fb8a 	bl	8002e40 <DrawChar>
}
 800272c:	bf00      	nop
 800272e:	370c      	adds	r7, #12
 8002730:	46bd      	mov	sp, r7
 8002732:	bd90      	pop	{r4, r7, pc}
 8002734:	2000049c 	.word	0x2000049c
 8002738:	200004a0 	.word	0x200004a0

0800273c <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 800273c:	b5b0      	push	{r4, r5, r7, lr}
 800273e:	b088      	sub	sp, #32
 8002740:	af00      	add	r7, sp, #0
 8002742:	60ba      	str	r2, [r7, #8]
 8002744:	461a      	mov	r2, r3
 8002746:	4603      	mov	r3, r0
 8002748:	81fb      	strh	r3, [r7, #14]
 800274a:	460b      	mov	r3, r1
 800274c:	81bb      	strh	r3, [r7, #12]
 800274e:	4613      	mov	r3, r2
 8002750:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8002752:	2301      	movs	r3, #1
 8002754:	83fb      	strh	r3, [r7, #30]
 8002756:	2300      	movs	r3, #0
 8002758:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 800275a:	2300      	movs	r3, #0
 800275c:	61bb      	str	r3, [r7, #24]
 800275e:	2300      	movs	r3, #0
 8002760:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8002766:	e002      	b.n	800276e <BSP_LCD_DisplayStringAt+0x32>
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	3301      	adds	r3, #1
 800276c:	61bb      	str	r3, [r7, #24]
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	1c5a      	adds	r2, r3, #1
 8002772:	617a      	str	r2, [r7, #20]
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d1f6      	bne.n	8002768 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 800277a:	f7ff feb5 	bl	80024e8 <BSP_LCD_GetXSize>
 800277e:	4601      	mov	r1, r0
 8002780:	4b4b      	ldr	r3, [pc, #300]	@ (80028b0 <BSP_LCD_DisplayStringAt+0x174>)
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	484b      	ldr	r0, [pc, #300]	@ (80028b4 <BSP_LCD_DisplayStringAt+0x178>)
 8002786:	4613      	mov	r3, r2
 8002788:	005b      	lsls	r3, r3, #1
 800278a:	4413      	add	r3, r2
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	4403      	add	r3, r0
 8002790:	3308      	adds	r3, #8
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	889b      	ldrh	r3, [r3, #4]
 8002796:	fbb1 f3f3 	udiv	r3, r1, r3
 800279a:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 800279c:	79fb      	ldrb	r3, [r7, #7]
 800279e:	2b03      	cmp	r3, #3
 80027a0:	d01c      	beq.n	80027dc <BSP_LCD_DisplayStringAt+0xa0>
 80027a2:	2b03      	cmp	r3, #3
 80027a4:	dc33      	bgt.n	800280e <BSP_LCD_DisplayStringAt+0xd2>
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d002      	beq.n	80027b0 <BSP_LCD_DisplayStringAt+0x74>
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d019      	beq.n	80027e2 <BSP_LCD_DisplayStringAt+0xa6>
 80027ae:	e02e      	b.n	800280e <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80027b0:	693a      	ldr	r2, [r7, #16]
 80027b2:	69bb      	ldr	r3, [r7, #24]
 80027b4:	1ad1      	subs	r1, r2, r3
 80027b6:	4b3e      	ldr	r3, [pc, #248]	@ (80028b0 <BSP_LCD_DisplayStringAt+0x174>)
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	483e      	ldr	r0, [pc, #248]	@ (80028b4 <BSP_LCD_DisplayStringAt+0x178>)
 80027bc:	4613      	mov	r3, r2
 80027be:	005b      	lsls	r3, r3, #1
 80027c0:	4413      	add	r3, r2
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	4403      	add	r3, r0
 80027c6:	3308      	adds	r3, #8
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	889b      	ldrh	r3, [r3, #4]
 80027cc:	fb01 f303 	mul.w	r3, r1, r3
 80027d0:	085b      	lsrs	r3, r3, #1
 80027d2:	b29a      	uxth	r2, r3
 80027d4:	89fb      	ldrh	r3, [r7, #14]
 80027d6:	4413      	add	r3, r2
 80027d8:	83fb      	strh	r3, [r7, #30]
      break;
 80027da:	e01b      	b.n	8002814 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 80027dc:	89fb      	ldrh	r3, [r7, #14]
 80027de:	83fb      	strh	r3, [r7, #30]
      break;
 80027e0:	e018      	b.n	8002814 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80027e2:	693a      	ldr	r2, [r7, #16]
 80027e4:	69bb      	ldr	r3, [r7, #24]
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	b299      	uxth	r1, r3
 80027ea:	4b31      	ldr	r3, [pc, #196]	@ (80028b0 <BSP_LCD_DisplayStringAt+0x174>)
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	4831      	ldr	r0, [pc, #196]	@ (80028b4 <BSP_LCD_DisplayStringAt+0x178>)
 80027f0:	4613      	mov	r3, r2
 80027f2:	005b      	lsls	r3, r3, #1
 80027f4:	4413      	add	r3, r2
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	4403      	add	r3, r0
 80027fa:	3308      	adds	r3, #8
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	889b      	ldrh	r3, [r3, #4]
 8002800:	fb11 f303 	smulbb	r3, r1, r3
 8002804:	b29a      	uxth	r2, r3
 8002806:	89fb      	ldrh	r3, [r7, #14]
 8002808:	4413      	add	r3, r2
 800280a:	83fb      	strh	r3, [r7, #30]
      break;
 800280c:	e002      	b.n	8002814 <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 800280e:	89fb      	ldrh	r3, [r7, #14]
 8002810:	83fb      	strh	r3, [r7, #30]
      break;
 8002812:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002814:	e01a      	b.n	800284c <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	781a      	ldrb	r2, [r3, #0]
 800281a:	89b9      	ldrh	r1, [r7, #12]
 800281c:	8bfb      	ldrh	r3, [r7, #30]
 800281e:	4618      	mov	r0, r3
 8002820:	f7ff ff48 	bl	80026b4 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8002824:	4b22      	ldr	r3, [pc, #136]	@ (80028b0 <BSP_LCD_DisplayStringAt+0x174>)
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	4922      	ldr	r1, [pc, #136]	@ (80028b4 <BSP_LCD_DisplayStringAt+0x178>)
 800282a:	4613      	mov	r3, r2
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	4413      	add	r3, r2
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	440b      	add	r3, r1
 8002834:	3308      	adds	r3, #8
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	889a      	ldrh	r2, [r3, #4]
 800283a:	8bfb      	ldrh	r3, [r7, #30]
 800283c:	4413      	add	r3, r2
 800283e:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	3301      	adds	r3, #1
 8002844:	60bb      	str	r3, [r7, #8]
    i++;
 8002846:	8bbb      	ldrh	r3, [r7, #28]
 8002848:	3301      	adds	r3, #1
 800284a:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	2b00      	cmp	r3, #0
 8002852:	bf14      	ite	ne
 8002854:	2301      	movne	r3, #1
 8002856:	2300      	moveq	r3, #0
 8002858:	b2dc      	uxtb	r4, r3
 800285a:	f7ff fe45 	bl	80024e8 <BSP_LCD_GetXSize>
 800285e:	8bb9      	ldrh	r1, [r7, #28]
 8002860:	4b13      	ldr	r3, [pc, #76]	@ (80028b0 <BSP_LCD_DisplayStringAt+0x174>)
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	4d13      	ldr	r5, [pc, #76]	@ (80028b4 <BSP_LCD_DisplayStringAt+0x178>)
 8002866:	4613      	mov	r3, r2
 8002868:	005b      	lsls	r3, r3, #1
 800286a:	4413      	add	r3, r2
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	442b      	add	r3, r5
 8002870:	3308      	adds	r3, #8
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	889b      	ldrh	r3, [r3, #4]
 8002876:	fb01 f303 	mul.w	r3, r1, r3
 800287a:	1ac3      	subs	r3, r0, r3
 800287c:	b299      	uxth	r1, r3
 800287e:	4b0c      	ldr	r3, [pc, #48]	@ (80028b0 <BSP_LCD_DisplayStringAt+0x174>)
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	480c      	ldr	r0, [pc, #48]	@ (80028b4 <BSP_LCD_DisplayStringAt+0x178>)
 8002884:	4613      	mov	r3, r2
 8002886:	005b      	lsls	r3, r3, #1
 8002888:	4413      	add	r3, r2
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	4403      	add	r3, r0
 800288e:	3308      	adds	r3, #8
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	889b      	ldrh	r3, [r3, #4]
 8002894:	4299      	cmp	r1, r3
 8002896:	bf2c      	ite	cs
 8002898:	2301      	movcs	r3, #1
 800289a:	2300      	movcc	r3, #0
 800289c:	b2db      	uxtb	r3, r3
 800289e:	4023      	ands	r3, r4
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d1b7      	bne.n	8002816 <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 80028a6:	bf00      	nop
 80028a8:	bf00      	nop
 80028aa:	3720      	adds	r7, #32
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bdb0      	pop	{r4, r5, r7, pc}
 80028b0:	2000049c 	.word	0x2000049c
 80028b4:	200004a0 	.word	0x200004a0

080028b8 <BSP_LCD_DrawHLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80028b8:	b5b0      	push	{r4, r5, r7, lr}
 80028ba:	b086      	sub	sp, #24
 80028bc:	af02      	add	r7, sp, #8
 80028be:	4603      	mov	r3, r0
 80028c0:	80fb      	strh	r3, [r7, #6]
 80028c2:	460b      	mov	r3, r1
 80028c4:	80bb      	strh	r3, [r7, #4]
 80028c6:	4613      	mov	r3, r2
 80028c8:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 80028ca:	2300      	movs	r3, #0
 80028cc:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80028ce:	4b16      	ldr	r3, [pc, #88]	@ (8002928 <BSP_LCD_DrawHLine+0x70>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a16      	ldr	r2, [pc, #88]	@ (800292c <BSP_LCD_DrawHLine+0x74>)
 80028d4:	2134      	movs	r1, #52	@ 0x34
 80028d6:	fb01 f303 	mul.w	r3, r1, r3
 80028da:	4413      	add	r3, r2
 80028dc:	335c      	adds	r3, #92	@ 0x5c
 80028de:	681c      	ldr	r4, [r3, #0]
 80028e0:	f7ff fe02 	bl	80024e8 <BSP_LCD_GetXSize>
 80028e4:	4602      	mov	r2, r0
 80028e6:	88bb      	ldrh	r3, [r7, #4]
 80028e8:	fb03 f202 	mul.w	r2, r3, r2
 80028ec:	88fb      	ldrh	r3, [r7, #6]
 80028ee:	4413      	add	r3, r2
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	4423      	add	r3, r4
 80028f4:	60fb      	str	r3, [r7, #12]

  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 80028f6:	4b0c      	ldr	r3, [pc, #48]	@ (8002928 <BSP_LCD_DrawHLine+0x70>)
 80028f8:	6818      	ldr	r0, [r3, #0]
 80028fa:	68f9      	ldr	r1, [r7, #12]
 80028fc:	887c      	ldrh	r4, [r7, #2]
 80028fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002928 <BSP_LCD_DrawHLine+0x70>)
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	4d0b      	ldr	r5, [pc, #44]	@ (8002930 <BSP_LCD_DrawHLine+0x78>)
 8002904:	4613      	mov	r3, r2
 8002906:	005b      	lsls	r3, r3, #1
 8002908:	4413      	add	r3, r2
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	442b      	add	r3, r5
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	9301      	str	r3, [sp, #4]
 8002912:	2300      	movs	r3, #0
 8002914:	9300      	str	r3, [sp, #0]
 8002916:	2301      	movs	r3, #1
 8002918:	4622      	mov	r2, r4
 800291a:	f000 fb4b 	bl	8002fb4 <FillBuffer>
}
 800291e:	bf00      	nop
 8002920:	3710      	adds	r7, #16
 8002922:	46bd      	mov	sp, r7
 8002924:	bdb0      	pop	{r4, r5, r7, pc}
 8002926:	bf00      	nop
 8002928:	2000049c 	.word	0x2000049c
 800292c:	20000384 	.word	0x20000384
 8002930:	200004a0 	.word	0x200004a0

08002934 <BSP_LCD_DrawCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8002934:	b590      	push	{r4, r7, lr}
 8002936:	b087      	sub	sp, #28
 8002938:	af00      	add	r7, sp, #0
 800293a:	4603      	mov	r3, r0
 800293c:	80fb      	strh	r3, [r7, #6]
 800293e:	460b      	mov	r3, r1
 8002940:	80bb      	strh	r3, [r7, #4]
 8002942:	4613      	mov	r3, r2
 8002944:	807b      	strh	r3, [r7, #2]
  int32_t  d;/* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 8002946:	887b      	ldrh	r3, [r7, #2]
 8002948:	005b      	lsls	r3, r3, #1
 800294a:	f1c3 0303 	rsb	r3, r3, #3
 800294e:	617b      	str	r3, [r7, #20]
  curx = 0;
 8002950:	2300      	movs	r3, #0
 8002952:	613b      	str	r3, [r7, #16]
  cury = Radius;
 8002954:	887b      	ldrh	r3, [r7, #2]
 8002956:	60fb      	str	r3, [r7, #12]
  
  while (curx <= cury)
 8002958:	e0c7      	b.n	8002aea <BSP_LCD_DrawCircle+0x1b6>
  {
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	b29a      	uxth	r2, r3
 800295e:	88fb      	ldrh	r3, [r7, #6]
 8002960:	4413      	add	r3, r2
 8002962:	b298      	uxth	r0, r3
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	b29b      	uxth	r3, r3
 8002968:	88ba      	ldrh	r2, [r7, #4]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	b299      	uxth	r1, r3
 800296e:	4b64      	ldr	r3, [pc, #400]	@ (8002b00 <BSP_LCD_DrawCircle+0x1cc>)
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	4c64      	ldr	r4, [pc, #400]	@ (8002b04 <BSP_LCD_DrawCircle+0x1d0>)
 8002974:	4613      	mov	r3, r2
 8002976:	005b      	lsls	r3, r3, #1
 8002978:	4413      	add	r3, r2
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	4423      	add	r3, r4
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	461a      	mov	r2, r3
 8002982:	f000 fa37 	bl	8002df4 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	b29b      	uxth	r3, r3
 800298a:	88fa      	ldrh	r2, [r7, #6]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	b298      	uxth	r0, r3
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	b29b      	uxth	r3, r3
 8002994:	88ba      	ldrh	r2, [r7, #4]
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	b299      	uxth	r1, r3
 800299a:	4b59      	ldr	r3, [pc, #356]	@ (8002b00 <BSP_LCD_DrawCircle+0x1cc>)
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	4c59      	ldr	r4, [pc, #356]	@ (8002b04 <BSP_LCD_DrawCircle+0x1d0>)
 80029a0:	4613      	mov	r3, r2
 80029a2:	005b      	lsls	r3, r3, #1
 80029a4:	4413      	add	r3, r2
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	4423      	add	r3, r4
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	461a      	mov	r2, r3
 80029ae:	f000 fa21 	bl	8002df4 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	b29a      	uxth	r2, r3
 80029b6:	88fb      	ldrh	r3, [r7, #6]
 80029b8:	4413      	add	r3, r2
 80029ba:	b298      	uxth	r0, r3
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	b29b      	uxth	r3, r3
 80029c0:	88ba      	ldrh	r2, [r7, #4]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	b299      	uxth	r1, r3
 80029c6:	4b4e      	ldr	r3, [pc, #312]	@ (8002b00 <BSP_LCD_DrawCircle+0x1cc>)
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	4c4e      	ldr	r4, [pc, #312]	@ (8002b04 <BSP_LCD_DrawCircle+0x1d0>)
 80029cc:	4613      	mov	r3, r2
 80029ce:	005b      	lsls	r3, r3, #1
 80029d0:	4413      	add	r3, r2
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	4423      	add	r3, r4
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	461a      	mov	r2, r3
 80029da:	f000 fa0b 	bl	8002df4 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	88fa      	ldrh	r2, [r7, #6]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	b298      	uxth	r0, r3
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	88ba      	ldrh	r2, [r7, #4]
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	b299      	uxth	r1, r3
 80029f2:	4b43      	ldr	r3, [pc, #268]	@ (8002b00 <BSP_LCD_DrawCircle+0x1cc>)
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	4c43      	ldr	r4, [pc, #268]	@ (8002b04 <BSP_LCD_DrawCircle+0x1d0>)
 80029f8:	4613      	mov	r3, r2
 80029fa:	005b      	lsls	r3, r3, #1
 80029fc:	4413      	add	r3, r2
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	4423      	add	r3, r4
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	461a      	mov	r2, r3
 8002a06:	f000 f9f5 	bl	8002df4 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	b29a      	uxth	r2, r3
 8002a0e:	88fb      	ldrh	r3, [r7, #6]
 8002a10:	4413      	add	r3, r2
 8002a12:	b298      	uxth	r0, r3
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	b29a      	uxth	r2, r3
 8002a18:	88bb      	ldrh	r3, [r7, #4]
 8002a1a:	4413      	add	r3, r2
 8002a1c:	b299      	uxth	r1, r3
 8002a1e:	4b38      	ldr	r3, [pc, #224]	@ (8002b00 <BSP_LCD_DrawCircle+0x1cc>)
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	4c38      	ldr	r4, [pc, #224]	@ (8002b04 <BSP_LCD_DrawCircle+0x1d0>)
 8002a24:	4613      	mov	r3, r2
 8002a26:	005b      	lsls	r3, r3, #1
 8002a28:	4413      	add	r3, r2
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	4423      	add	r3, r4
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	461a      	mov	r2, r3
 8002a32:	f000 f9df 	bl	8002df4 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	88fa      	ldrh	r2, [r7, #6]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	b298      	uxth	r0, r3
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	b29a      	uxth	r2, r3
 8002a44:	88bb      	ldrh	r3, [r7, #4]
 8002a46:	4413      	add	r3, r2
 8002a48:	b299      	uxth	r1, r3
 8002a4a:	4b2d      	ldr	r3, [pc, #180]	@ (8002b00 <BSP_LCD_DrawCircle+0x1cc>)
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	4c2d      	ldr	r4, [pc, #180]	@ (8002b04 <BSP_LCD_DrawCircle+0x1d0>)
 8002a50:	4613      	mov	r3, r2
 8002a52:	005b      	lsls	r3, r3, #1
 8002a54:	4413      	add	r3, r2
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	4423      	add	r3, r4
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	f000 f9c9 	bl	8002df4 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	b29a      	uxth	r2, r3
 8002a66:	88fb      	ldrh	r3, [r7, #6]
 8002a68:	4413      	add	r3, r2
 8002a6a:	b298      	uxth	r0, r3
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	b29a      	uxth	r2, r3
 8002a70:	88bb      	ldrh	r3, [r7, #4]
 8002a72:	4413      	add	r3, r2
 8002a74:	b299      	uxth	r1, r3
 8002a76:	4b22      	ldr	r3, [pc, #136]	@ (8002b00 <BSP_LCD_DrawCircle+0x1cc>)
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	4c22      	ldr	r4, [pc, #136]	@ (8002b04 <BSP_LCD_DrawCircle+0x1d0>)
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	005b      	lsls	r3, r3, #1
 8002a80:	4413      	add	r3, r2
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	4423      	add	r3, r4
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	461a      	mov	r2, r3
 8002a8a:	f000 f9b3 	bl	8002df4 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);   
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	88fa      	ldrh	r2, [r7, #6]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	b298      	uxth	r0, r3
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	b29a      	uxth	r2, r3
 8002a9c:	88bb      	ldrh	r3, [r7, #4]
 8002a9e:	4413      	add	r3, r2
 8002aa0:	b299      	uxth	r1, r3
 8002aa2:	4b17      	ldr	r3, [pc, #92]	@ (8002b00 <BSP_LCD_DrawCircle+0x1cc>)
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	4c17      	ldr	r4, [pc, #92]	@ (8002b04 <BSP_LCD_DrawCircle+0x1d0>)
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	005b      	lsls	r3, r3, #1
 8002aac:	4413      	add	r3, r2
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	4423      	add	r3, r4
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	f000 f99d 	bl	8002df4 <BSP_LCD_DrawPixel>

    if (d < 0)
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	da06      	bge.n	8002ace <BSP_LCD_DrawCircle+0x19a>
    { 
      d += (curx << 2) + 6;
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	009a      	lsls	r2, r3, #2
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	4413      	add	r3, r2
 8002ac8:	3306      	adds	r3, #6
 8002aca:	617b      	str	r3, [r7, #20]
 8002acc:	e00a      	b.n	8002ae4 <BSP_LCD_DrawCircle+0x1b0>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 8002ace:	693a      	ldr	r2, [r7, #16]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	009a      	lsls	r2, r3, #2
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	4413      	add	r3, r2
 8002ada:	330a      	adds	r3, #10
 8002adc:	617b      	str	r3, [r7, #20]
      cury--;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	3b01      	subs	r3, #1
 8002ae2:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 8002aea:	693a      	ldr	r2, [r7, #16]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	429a      	cmp	r2, r3
 8002af0:	f67f af33 	bls.w	800295a <BSP_LCD_DrawCircle+0x26>
  } 
}
 8002af4:	bf00      	nop
 8002af6:	bf00      	nop
 8002af8:	371c      	adds	r7, #28
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd90      	pop	{r4, r7, pc}
 8002afe:	bf00      	nop
 8002b00:	2000049c 	.word	0x2000049c
 8002b04:	200004a0 	.word	0x200004a0

08002b08 <BSP_LCD_FillCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b086      	sub	sp, #24
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	4603      	mov	r3, r0
 8002b10:	80fb      	strh	r3, [r7, #6]
 8002b12:	460b      	mov	r3, r1
 8002b14:	80bb      	strh	r3, [r7, #4]
 8002b16:	4613      	mov	r3, r2
 8002b18:	807b      	strh	r3, [r7, #2]
  int32_t  d;    /* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 8002b1a:	887b      	ldrh	r3, [r7, #2]
 8002b1c:	005b      	lsls	r3, r3, #1
 8002b1e:	f1c3 0303 	rsb	r3, r3, #3
 8002b22:	617b      	str	r3, [r7, #20]

  curx = 0;
 8002b24:	2300      	movs	r3, #0
 8002b26:	613b      	str	r3, [r7, #16]
  cury = Radius;
 8002b28:	887b      	ldrh	r3, [r7, #2]
 8002b2a:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8002b2c:	4b44      	ldr	r3, [pc, #272]	@ (8002c40 <BSP_LCD_FillCircle+0x138>)
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	4944      	ldr	r1, [pc, #272]	@ (8002c44 <BSP_LCD_FillCircle+0x13c>)
 8002b32:	4613      	mov	r3, r2
 8002b34:	005b      	lsls	r3, r3, #1
 8002b36:	4413      	add	r3, r2
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	440b      	add	r3, r1
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7ff fd5e 	bl	8002600 <BSP_LCD_SetTextColor>

  while (curx <= cury)
 8002b44:	e061      	b.n	8002c0a <BSP_LCD_FillCircle+0x102>
  {
    if(cury > 0) 
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d021      	beq.n	8002b90 <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - cury, Ypos + curx, 2*cury);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	88fa      	ldrh	r2, [r7, #6]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	b298      	uxth	r0, r3
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	b29a      	uxth	r2, r3
 8002b5a:	88bb      	ldrh	r3, [r7, #4]
 8002b5c:	4413      	add	r3, r2
 8002b5e:	b299      	uxth	r1, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	005b      	lsls	r3, r3, #1
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	461a      	mov	r2, r3
 8002b6a:	f7ff fea5 	bl	80028b8 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - cury, Ypos - curx, 2*cury);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	88fa      	ldrh	r2, [r7, #6]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	b298      	uxth	r0, r3
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	88ba      	ldrh	r2, [r7, #4]
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	b299      	uxth	r1, r3
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	b29b      	uxth	r3, r3
 8002b86:	005b      	lsls	r3, r3, #1
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	f7ff fe94 	bl	80028b8 <BSP_LCD_DrawHLine>
    }

    if(curx > 0) 
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d021      	beq.n	8002bda <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - curx, Ypos - cury, 2*curx);
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	88fa      	ldrh	r2, [r7, #6]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	b298      	uxth	r0, r3
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	88ba      	ldrh	r2, [r7, #4]
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	b299      	uxth	r1, r3
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	005b      	lsls	r3, r3, #1
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	f7ff fe80 	bl	80028b8 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - curx, Ypos + cury, 2*curx);
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	88fa      	ldrh	r2, [r7, #6]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	b298      	uxth	r0, r3
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	b29a      	uxth	r2, r3
 8002bc6:	88bb      	ldrh	r3, [r7, #4]
 8002bc8:	4413      	add	r3, r2
 8002bca:	b299      	uxth	r1, r3
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	005b      	lsls	r3, r3, #1
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	f7ff fe6f 	bl	80028b8 <BSP_LCD_DrawHLine>
    }
    if (d < 0)
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	da06      	bge.n	8002bee <BSP_LCD_FillCircle+0xe6>
    { 
      d += (curx << 2) + 6;
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	009a      	lsls	r2, r3, #2
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	4413      	add	r3, r2
 8002be8:	3306      	adds	r3, #6
 8002bea:	617b      	str	r3, [r7, #20]
 8002bec:	e00a      	b.n	8002c04 <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 8002bee:	693a      	ldr	r2, [r7, #16]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	009a      	lsls	r2, r3, #2
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	4413      	add	r3, r2
 8002bfa:	330a      	adds	r3, #10
 8002bfc:	617b      	str	r3, [r7, #20]
      cury--;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	3b01      	subs	r3, #1
 8002c02:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	3301      	adds	r3, #1
 8002c08:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 8002c0a:	693a      	ldr	r2, [r7, #16]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d999      	bls.n	8002b46 <BSP_LCD_FillCircle+0x3e>
  }

  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8002c12:	4b0b      	ldr	r3, [pc, #44]	@ (8002c40 <BSP_LCD_FillCircle+0x138>)
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	490b      	ldr	r1, [pc, #44]	@ (8002c44 <BSP_LCD_FillCircle+0x13c>)
 8002c18:	4613      	mov	r3, r2
 8002c1a:	005b      	lsls	r3, r3, #1
 8002c1c:	4413      	add	r3, r2
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	440b      	add	r3, r1
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4618      	mov	r0, r3
 8002c26:	f7ff fceb 	bl	8002600 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8002c2a:	887a      	ldrh	r2, [r7, #2]
 8002c2c:	88b9      	ldrh	r1, [r7, #4]
 8002c2e:	88fb      	ldrh	r3, [r7, #6]
 8002c30:	4618      	mov	r0, r3
 8002c32:	f7ff fe7f 	bl	8002934 <BSP_LCD_DrawCircle>
}
 8002c36:	bf00      	nop
 8002c38:	3718      	adds	r7, #24
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	2000049c 	.word	0x2000049c
 8002c44:	200004a0 	.word	0x200004a0

08002c48 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b08e      	sub	sp, #56	@ 0x38
 8002c4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002c4e:	2300      	movs	r3, #0
 8002c50:	623b      	str	r3, [r7, #32]
 8002c52:	4b61      	ldr	r3, [pc, #388]	@ (8002dd8 <BSP_LCD_MspInit+0x190>)
 8002c54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c56:	4a60      	ldr	r2, [pc, #384]	@ (8002dd8 <BSP_LCD_MspInit+0x190>)
 8002c58:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002c5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c5e:	4b5e      	ldr	r3, [pc, #376]	@ (8002dd8 <BSP_LCD_MspInit+0x190>)
 8002c60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c62:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002c66:	623b      	str	r3, [r7, #32]
 8002c68:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	61fb      	str	r3, [r7, #28]
 8002c6e:	4b5a      	ldr	r3, [pc, #360]	@ (8002dd8 <BSP_LCD_MspInit+0x190>)
 8002c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c72:	4a59      	ldr	r2, [pc, #356]	@ (8002dd8 <BSP_LCD_MspInit+0x190>)
 8002c74:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002c78:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c7a:	4b57      	ldr	r3, [pc, #348]	@ (8002dd8 <BSP_LCD_MspInit+0x190>)
 8002c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c7e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002c82:	61fb      	str	r3, [r7, #28]
 8002c84:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c86:	2300      	movs	r3, #0
 8002c88:	61bb      	str	r3, [r7, #24]
 8002c8a:	4b53      	ldr	r3, [pc, #332]	@ (8002dd8 <BSP_LCD_MspInit+0x190>)
 8002c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c8e:	4a52      	ldr	r2, [pc, #328]	@ (8002dd8 <BSP_LCD_MspInit+0x190>)
 8002c90:	f043 0301 	orr.w	r3, r3, #1
 8002c94:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c96:	4b50      	ldr	r3, [pc, #320]	@ (8002dd8 <BSP_LCD_MspInit+0x190>)
 8002c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c9a:	f003 0301 	and.w	r3, r3, #1
 8002c9e:	61bb      	str	r3, [r7, #24]
 8002ca0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	617b      	str	r3, [r7, #20]
 8002ca6:	4b4c      	ldr	r3, [pc, #304]	@ (8002dd8 <BSP_LCD_MspInit+0x190>)
 8002ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002caa:	4a4b      	ldr	r2, [pc, #300]	@ (8002dd8 <BSP_LCD_MspInit+0x190>)
 8002cac:	f043 0302 	orr.w	r3, r3, #2
 8002cb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cb2:	4b49      	ldr	r3, [pc, #292]	@ (8002dd8 <BSP_LCD_MspInit+0x190>)
 8002cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cb6:	f003 0302 	and.w	r3, r3, #2
 8002cba:	617b      	str	r3, [r7, #20]
 8002cbc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	613b      	str	r3, [r7, #16]
 8002cc2:	4b45      	ldr	r3, [pc, #276]	@ (8002dd8 <BSP_LCD_MspInit+0x190>)
 8002cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cc6:	4a44      	ldr	r2, [pc, #272]	@ (8002dd8 <BSP_LCD_MspInit+0x190>)
 8002cc8:	f043 0304 	orr.w	r3, r3, #4
 8002ccc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cce:	4b42      	ldr	r3, [pc, #264]	@ (8002dd8 <BSP_LCD_MspInit+0x190>)
 8002cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cd2:	f003 0304 	and.w	r3, r3, #4
 8002cd6:	613b      	str	r3, [r7, #16]
 8002cd8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002cda:	2300      	movs	r3, #0
 8002cdc:	60fb      	str	r3, [r7, #12]
 8002cde:	4b3e      	ldr	r3, [pc, #248]	@ (8002dd8 <BSP_LCD_MspInit+0x190>)
 8002ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ce2:	4a3d      	ldr	r2, [pc, #244]	@ (8002dd8 <BSP_LCD_MspInit+0x190>)
 8002ce4:	f043 0308 	orr.w	r3, r3, #8
 8002ce8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cea:	4b3b      	ldr	r3, [pc, #236]	@ (8002dd8 <BSP_LCD_MspInit+0x190>)
 8002cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cee:	f003 0308 	and.w	r3, r3, #8
 8002cf2:	60fb      	str	r3, [r7, #12]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	60bb      	str	r3, [r7, #8]
 8002cfa:	4b37      	ldr	r3, [pc, #220]	@ (8002dd8 <BSP_LCD_MspInit+0x190>)
 8002cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cfe:	4a36      	ldr	r2, [pc, #216]	@ (8002dd8 <BSP_LCD_MspInit+0x190>)
 8002d00:	f043 0320 	orr.w	r3, r3, #32
 8002d04:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d06:	4b34      	ldr	r3, [pc, #208]	@ (8002dd8 <BSP_LCD_MspInit+0x190>)
 8002d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d0a:	f003 0320 	and.w	r3, r3, #32
 8002d0e:	60bb      	str	r3, [r7, #8]
 8002d10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002d12:	2300      	movs	r3, #0
 8002d14:	607b      	str	r3, [r7, #4]
 8002d16:	4b30      	ldr	r3, [pc, #192]	@ (8002dd8 <BSP_LCD_MspInit+0x190>)
 8002d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d1a:	4a2f      	ldr	r2, [pc, #188]	@ (8002dd8 <BSP_LCD_MspInit+0x190>)
 8002d1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002d20:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d22:	4b2d      	ldr	r3, [pc, #180]	@ (8002dd8 <BSP_LCD_MspInit+0x190>)
 8002d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d2a:	607b      	str	r3, [r7, #4]
 8002d2c:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8002d2e:	f641 0358 	movw	r3, #6232	@ 0x1858
 8002d32:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8002d34:	2302      	movs	r3, #2
 8002d36:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002d3c:	2302      	movs	r3, #2
 8002d3e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8002d40:	230e      	movs	r3, #14
 8002d42:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002d44:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d48:	4619      	mov	r1, r3
 8002d4a:	4824      	ldr	r0, [pc, #144]	@ (8002ddc <BSP_LCD_MspInit+0x194>)
 8002d4c:	f001 f960 	bl	8004010 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8002d50:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8002d54:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002d56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	4820      	ldr	r0, [pc, #128]	@ (8002de0 <BSP_LCD_MspInit+0x198>)
 8002d5e:	f001 f957 	bl	8004010 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8002d62:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8002d66:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8002d68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	481d      	ldr	r0, [pc, #116]	@ (8002de4 <BSP_LCD_MspInit+0x19c>)
 8002d70:	f001 f94e 	bl	8004010 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8002d74:	2348      	movs	r3, #72	@ 0x48
 8002d76:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002d78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	481a      	ldr	r0, [pc, #104]	@ (8002de8 <BSP_LCD_MspInit+0x1a0>)
 8002d80:	f001 f946 	bl	8004010 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8002d84:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002d88:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8002d8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d8e:	4619      	mov	r1, r3
 8002d90:	4816      	ldr	r0, [pc, #88]	@ (8002dec <BSP_LCD_MspInit+0x1a4>)
 8002d92:	f001 f93d 	bl	8004010 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8002d96:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8002d9a:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002d9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002da0:	4619      	mov	r1, r3
 8002da2:	4813      	ldr	r0, [pc, #76]	@ (8002df0 <BSP_LCD_MspInit+0x1a8>)
 8002da4:	f001 f934 	bl	8004010 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8002da8:	2303      	movs	r3, #3
 8002daa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8002dac:	2309      	movs	r3, #9
 8002dae:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002db0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002db4:	4619      	mov	r1, r3
 8002db6:	480a      	ldr	r0, [pc, #40]	@ (8002de0 <BSP_LCD_MspInit+0x198>)
 8002db8:	f001 f92a 	bl	8004010 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8002dbc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002dc0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002dc2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	4809      	ldr	r0, [pc, #36]	@ (8002df0 <BSP_LCD_MspInit+0x1a8>)
 8002dca:	f001 f921 	bl	8004010 <HAL_GPIO_Init>
}
 8002dce:	bf00      	nop
 8002dd0:	3738      	adds	r7, #56	@ 0x38
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	40023800 	.word	0x40023800
 8002ddc:	40020000 	.word	0x40020000
 8002de0:	40020400 	.word	0x40020400
 8002de4:	40020800 	.word	0x40020800
 8002de8:	40020c00 	.word	0x40020c00
 8002dec:	40021400 	.word	0x40021400
 8002df0:	40021800 	.word	0x40021800

08002df4 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8002df4:	b5b0      	push	{r4, r5, r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	603a      	str	r2, [r7, #0]
 8002dfe:	80fb      	strh	r3, [r7, #6]
 8002e00:	460b      	mov	r3, r1
 8002e02:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8002e04:	4b0c      	ldr	r3, [pc, #48]	@ (8002e38 <BSP_LCD_DrawPixel+0x44>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a0c      	ldr	r2, [pc, #48]	@ (8002e3c <BSP_LCD_DrawPixel+0x48>)
 8002e0a:	2134      	movs	r1, #52	@ 0x34
 8002e0c:	fb01 f303 	mul.w	r3, r1, r3
 8002e10:	4413      	add	r3, r2
 8002e12:	335c      	adds	r3, #92	@ 0x5c
 8002e14:	681c      	ldr	r4, [r3, #0]
 8002e16:	88bd      	ldrh	r5, [r7, #4]
 8002e18:	f7ff fb66 	bl	80024e8 <BSP_LCD_GetXSize>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	fb03 f205 	mul.w	r2, r3, r5
 8002e22:	88fb      	ldrh	r3, [r7, #6]
 8002e24:	4413      	add	r3, r2
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	4423      	add	r3, r4
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	6013      	str	r3, [r2, #0]
}
 8002e30:	bf00      	nop
 8002e32:	3708      	adds	r7, #8
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bdb0      	pop	{r4, r5, r7, pc}
 8002e38:	2000049c 	.word	0x2000049c
 8002e3c:	20000384 	.word	0x20000384

08002e40 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b088      	sub	sp, #32
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	4603      	mov	r3, r0
 8002e48:	603a      	str	r2, [r7, #0]
 8002e4a:	80fb      	strh	r3, [r7, #6]
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8002e50:	2300      	movs	r3, #0
 8002e52:	61fb      	str	r3, [r7, #28]
 8002e54:	2300      	movs	r3, #0
 8002e56:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 8002e5c:	4b53      	ldr	r3, [pc, #332]	@ (8002fac <DrawChar+0x16c>)
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	4953      	ldr	r1, [pc, #332]	@ (8002fb0 <DrawChar+0x170>)
 8002e62:	4613      	mov	r3, r2
 8002e64:	005b      	lsls	r3, r3, #1
 8002e66:	4413      	add	r3, r2
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	440b      	add	r3, r1
 8002e6c:	3308      	adds	r3, #8
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	88db      	ldrh	r3, [r3, #6]
 8002e72:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8002e74:	4b4d      	ldr	r3, [pc, #308]	@ (8002fac <DrawChar+0x16c>)
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	494d      	ldr	r1, [pc, #308]	@ (8002fb0 <DrawChar+0x170>)
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	005b      	lsls	r3, r3, #1
 8002e7e:	4413      	add	r3, r2
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	440b      	add	r3, r1
 8002e84:	3308      	adds	r3, #8
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	889b      	ldrh	r3, [r3, #4]
 8002e8a:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 8002e8c:	8a3b      	ldrh	r3, [r7, #16]
 8002e8e:	3307      	adds	r3, #7
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	da00      	bge.n	8002e96 <DrawChar+0x56>
 8002e94:	3307      	adds	r3, #7
 8002e96:	10db      	asrs	r3, r3, #3
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	00db      	lsls	r3, r3, #3
 8002e9c:	b2da      	uxtb	r2, r3
 8002e9e:	8a3b      	ldrh	r3, [r7, #16]
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	61fb      	str	r3, [r7, #28]
 8002eaa:	e076      	b.n	8002f9a <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8002eac:	8a3b      	ldrh	r3, [r7, #16]
 8002eae:	3307      	adds	r3, #7
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	da00      	bge.n	8002eb6 <DrawChar+0x76>
 8002eb4:	3307      	adds	r3, #7
 8002eb6:	10db      	asrs	r3, r3, #3
 8002eb8:	461a      	mov	r2, r3
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	fb02 f303 	mul.w	r3, r2, r3
 8002ec0:	683a      	ldr	r2, [r7, #0]
 8002ec2:	4413      	add	r3, r2
 8002ec4:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8002ec6:	8a3b      	ldrh	r3, [r7, #16]
 8002ec8:	3307      	adds	r3, #7
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	da00      	bge.n	8002ed0 <DrawChar+0x90>
 8002ece:	3307      	adds	r3, #7
 8002ed0:	10db      	asrs	r3, r3, #3
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d002      	beq.n	8002edc <DrawChar+0x9c>
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d004      	beq.n	8002ee4 <DrawChar+0xa4>
 8002eda:	e00c      	b.n	8002ef6 <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	617b      	str	r3, [r7, #20]
      break;
 8002ee2:	e016      	b.n	8002f12 <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	021b      	lsls	r3, r3, #8
 8002eea:	68ba      	ldr	r2, [r7, #8]
 8002eec:	3201      	adds	r2, #1
 8002eee:	7812      	ldrb	r2, [r2, #0]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	617b      	str	r3, [r7, #20]
      break;
 8002ef4:	e00d      	b.n	8002f12 <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	041a      	lsls	r2, r3, #16
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	3301      	adds	r3, #1
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	021b      	lsls	r3, r3, #8
 8002f04:	4313      	orrs	r3, r2
 8002f06:	68ba      	ldr	r2, [r7, #8]
 8002f08:	3202      	adds	r2, #2
 8002f0a:	7812      	ldrb	r2, [r2, #0]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	617b      	str	r3, [r7, #20]
      break;
 8002f10:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8002f12:	2300      	movs	r3, #0
 8002f14:	61bb      	str	r3, [r7, #24]
 8002f16:	e036      	b.n	8002f86 <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8002f18:	8a3a      	ldrh	r2, [r7, #16]
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	1ad2      	subs	r2, r2, r3
 8002f1e:	7bfb      	ldrb	r3, [r7, #15]
 8002f20:	4413      	add	r3, r2
 8002f22:	3b01      	subs	r3, #1
 8002f24:	2201      	movs	r2, #1
 8002f26:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	4013      	ands	r3, r2
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d012      	beq.n	8002f5a <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	b29a      	uxth	r2, r3
 8002f38:	88fb      	ldrh	r3, [r7, #6]
 8002f3a:	4413      	add	r3, r2
 8002f3c:	b298      	uxth	r0, r3
 8002f3e:	4b1b      	ldr	r3, [pc, #108]	@ (8002fac <DrawChar+0x16c>)
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	491b      	ldr	r1, [pc, #108]	@ (8002fb0 <DrawChar+0x170>)
 8002f44:	4613      	mov	r3, r2
 8002f46:	005b      	lsls	r3, r3, #1
 8002f48:	4413      	add	r3, r2
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	440b      	add	r3, r1
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	88bb      	ldrh	r3, [r7, #4]
 8002f52:	4619      	mov	r1, r3
 8002f54:	f7ff ff4e 	bl	8002df4 <BSP_LCD_DrawPixel>
 8002f58:	e012      	b.n	8002f80 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8002f5a:	69bb      	ldr	r3, [r7, #24]
 8002f5c:	b29a      	uxth	r2, r3
 8002f5e:	88fb      	ldrh	r3, [r7, #6]
 8002f60:	4413      	add	r3, r2
 8002f62:	b298      	uxth	r0, r3
 8002f64:	4b11      	ldr	r3, [pc, #68]	@ (8002fac <DrawChar+0x16c>)
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	4911      	ldr	r1, [pc, #68]	@ (8002fb0 <DrawChar+0x170>)
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	005b      	lsls	r3, r3, #1
 8002f6e:	4413      	add	r3, r2
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	440b      	add	r3, r1
 8002f74:	3304      	adds	r3, #4
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	88bb      	ldrh	r3, [r7, #4]
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	f7ff ff3a 	bl	8002df4 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8002f80:	69bb      	ldr	r3, [r7, #24]
 8002f82:	3301      	adds	r3, #1
 8002f84:	61bb      	str	r3, [r7, #24]
 8002f86:	8a3b      	ldrh	r3, [r7, #16]
 8002f88:	69ba      	ldr	r2, [r7, #24]
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d3c4      	bcc.n	8002f18 <DrawChar+0xd8>
      } 
    }
    Ypos++;
 8002f8e:	88bb      	ldrh	r3, [r7, #4]
 8002f90:	3301      	adds	r3, #1
 8002f92:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	3301      	adds	r3, #1
 8002f98:	61fb      	str	r3, [r7, #28]
 8002f9a:	8a7b      	ldrh	r3, [r7, #18]
 8002f9c:	69fa      	ldr	r2, [r7, #28]
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d384      	bcc.n	8002eac <DrawChar+0x6c>
  }
}
 8002fa2:	bf00      	nop
 8002fa4:	bf00      	nop
 8002fa6:	3720      	adds	r7, #32
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	2000049c 	.word	0x2000049c
 8002fb0:	200004a0 	.word	0x200004a0

08002fb4 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b086      	sub	sp, #24
 8002fb8:	af02      	add	r7, sp, #8
 8002fba:	60f8      	str	r0, [r7, #12]
 8002fbc:	60b9      	str	r1, [r7, #8]
 8002fbe:	607a      	str	r2, [r7, #4]
 8002fc0:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8002fc2:	4b16      	ldr	r3, [pc, #88]	@ (800301c <FillBuffer+0x68>)
 8002fc4:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002fc8:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8002fca:	4b14      	ldr	r3, [pc, #80]	@ (800301c <FillBuffer+0x68>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8002fd0:	4a12      	ldr	r2, [pc, #72]	@ (800301c <FillBuffer+0x68>)
 8002fd2:	69bb      	ldr	r3, [r7, #24]
 8002fd4:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 8002fd6:	4b11      	ldr	r3, [pc, #68]	@ (800301c <FillBuffer+0x68>)
 8002fd8:	4a11      	ldr	r2, [pc, #68]	@ (8003020 <FillBuffer+0x6c>)
 8002fda:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8002fdc:	480f      	ldr	r0, [pc, #60]	@ (800301c <FillBuffer+0x68>)
 8002fde:	f000 fd8b 	bl	8003af8 <HAL_DMA2D_Init>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d115      	bne.n	8003014 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8002fe8:	68f9      	ldr	r1, [r7, #12]
 8002fea:	480c      	ldr	r0, [pc, #48]	@ (800301c <FillBuffer+0x68>)
 8002fec:	f000 fee2 	bl	8003db4 <HAL_DMA2D_ConfigLayer>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d10e      	bne.n	8003014 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8002ff6:	68ba      	ldr	r2, [r7, #8]
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	9300      	str	r3, [sp, #0]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	69f9      	ldr	r1, [r7, #28]
 8003000:	4806      	ldr	r0, [pc, #24]	@ (800301c <FillBuffer+0x68>)
 8003002:	f000 fdc2 	bl	8003b8a <HAL_DMA2D_Start>
 8003006:	4603      	mov	r3, r0
 8003008:	2b00      	cmp	r3, #0
 800300a:	d103      	bne.n	8003014 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 800300c:	210a      	movs	r1, #10
 800300e:	4803      	ldr	r0, [pc, #12]	@ (800301c <FillBuffer+0x68>)
 8003010:	f000 fde6 	bl	8003be0 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8003014:	bf00      	nop
 8003016:	3710      	adds	r7, #16
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}
 800301c:	2000042c 	.word	0x2000042c
 8003020:	4002b000 	.word	0x4002b000

08003024 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8003028:	4b29      	ldr	r3, [pc, #164]	@ (80030d0 <BSP_SDRAM_Init+0xac>)
 800302a:	4a2a      	ldr	r2, [pc, #168]	@ (80030d4 <BSP_SDRAM_Init+0xb0>)
 800302c:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 800302e:	4b2a      	ldr	r3, [pc, #168]	@ (80030d8 <BSP_SDRAM_Init+0xb4>)
 8003030:	2202      	movs	r2, #2
 8003032:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8003034:	4b28      	ldr	r3, [pc, #160]	@ (80030d8 <BSP_SDRAM_Init+0xb4>)
 8003036:	2207      	movs	r2, #7
 8003038:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 800303a:	4b27      	ldr	r3, [pc, #156]	@ (80030d8 <BSP_SDRAM_Init+0xb4>)
 800303c:	2204      	movs	r2, #4
 800303e:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8003040:	4b25      	ldr	r3, [pc, #148]	@ (80030d8 <BSP_SDRAM_Init+0xb4>)
 8003042:	2207      	movs	r2, #7
 8003044:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8003046:	4b24      	ldr	r3, [pc, #144]	@ (80030d8 <BSP_SDRAM_Init+0xb4>)
 8003048:	2202      	movs	r2, #2
 800304a:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 800304c:	4b22      	ldr	r3, [pc, #136]	@ (80030d8 <BSP_SDRAM_Init+0xb4>)
 800304e:	2202      	movs	r2, #2
 8003050:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8003052:	4b21      	ldr	r3, [pc, #132]	@ (80030d8 <BSP_SDRAM_Init+0xb4>)
 8003054:	2202      	movs	r2, #2
 8003056:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8003058:	4b1d      	ldr	r3, [pc, #116]	@ (80030d0 <BSP_SDRAM_Init+0xac>)
 800305a:	2201      	movs	r2, #1
 800305c:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800305e:	4b1c      	ldr	r3, [pc, #112]	@ (80030d0 <BSP_SDRAM_Init+0xac>)
 8003060:	2200      	movs	r2, #0
 8003062:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8003064:	4b1a      	ldr	r3, [pc, #104]	@ (80030d0 <BSP_SDRAM_Init+0xac>)
 8003066:	2204      	movs	r2, #4
 8003068:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 800306a:	4b19      	ldr	r3, [pc, #100]	@ (80030d0 <BSP_SDRAM_Init+0xac>)
 800306c:	2210      	movs	r2, #16
 800306e:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003070:	4b17      	ldr	r3, [pc, #92]	@ (80030d0 <BSP_SDRAM_Init+0xac>)
 8003072:	2240      	movs	r2, #64	@ 0x40
 8003074:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8003076:	4b16      	ldr	r3, [pc, #88]	@ (80030d0 <BSP_SDRAM_Init+0xac>)
 8003078:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800307c:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800307e:	4b14      	ldr	r3, [pc, #80]	@ (80030d0 <BSP_SDRAM_Init+0xac>)
 8003080:	2200      	movs	r2, #0
 8003082:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8003084:	4b12      	ldr	r3, [pc, #72]	@ (80030d0 <BSP_SDRAM_Init+0xac>)
 8003086:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800308a:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 800308c:	4b10      	ldr	r3, [pc, #64]	@ (80030d0 <BSP_SDRAM_Init+0xac>)
 800308e:	2200      	movs	r2, #0
 8003090:	625a      	str	r2, [r3, #36]	@ 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8003092:	4b0f      	ldr	r3, [pc, #60]	@ (80030d0 <BSP_SDRAM_Init+0xac>)
 8003094:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003098:	629a      	str	r2, [r3, #40]	@ 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 800309a:	2100      	movs	r1, #0
 800309c:	480c      	ldr	r0, [pc, #48]	@ (80030d0 <BSP_SDRAM_Init+0xac>)
 800309e:	f000 f87f 	bl	80031a0 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 80030a2:	490d      	ldr	r1, [pc, #52]	@ (80030d8 <BSP_SDRAM_Init+0xb4>)
 80030a4:	480a      	ldr	r0, [pc, #40]	@ (80030d0 <BSP_SDRAM_Init+0xac>)
 80030a6:	f003 fcdf 	bl	8006a68 <HAL_SDRAM_Init>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d003      	beq.n	80030b8 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 80030b0:	4b0a      	ldr	r3, [pc, #40]	@ (80030dc <BSP_SDRAM_Init+0xb8>)
 80030b2:	2201      	movs	r2, #1
 80030b4:	701a      	strb	r2, [r3, #0]
 80030b6:	e002      	b.n	80030be <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 80030b8:	4b08      	ldr	r3, [pc, #32]	@ (80030dc <BSP_SDRAM_Init+0xb8>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80030be:	f240 506a 	movw	r0, #1386	@ 0x56a
 80030c2:	f000 f80d 	bl	80030e0 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 80030c6:	4b05      	ldr	r3, [pc, #20]	@ (80030dc <BSP_SDRAM_Init+0xb8>)
 80030c8:	781b      	ldrb	r3, [r3, #0]
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	200004bc 	.word	0x200004bc
 80030d4:	a0000140 	.word	0xa0000140
 80030d8:	200004f0 	.word	0x200004f0
 80030dc:	2000007c 	.word	0x2000007c

080030e0 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 80030e8:	2300      	movs	r3, #0
 80030ea:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 80030ec:	4b2a      	ldr	r3, [pc, #168]	@ (8003198 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80030ee:	2201      	movs	r2, #1
 80030f0:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80030f2:	4b29      	ldr	r3, [pc, #164]	@ (8003198 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80030f4:	2208      	movs	r2, #8
 80030f6:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80030f8:	4b27      	ldr	r3, [pc, #156]	@ (8003198 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80030fa:	2201      	movs	r2, #1
 80030fc:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80030fe:	4b26      	ldr	r3, [pc, #152]	@ (8003198 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003100:	2200      	movs	r2, #0
 8003102:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003104:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003108:	4923      	ldr	r1, [pc, #140]	@ (8003198 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800310a:	4824      	ldr	r0, [pc, #144]	@ (800319c <BSP_SDRAM_Initialization_sequence+0xbc>)
 800310c:	f003 fce0 	bl	8006ad0 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8003110:	2001      	movs	r0, #1
 8003112:	f000 f9fd 	bl	8003510 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8003116:	4b20      	ldr	r3, [pc, #128]	@ (8003198 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003118:	2202      	movs	r2, #2
 800311a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800311c:	4b1e      	ldr	r3, [pc, #120]	@ (8003198 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800311e:	2208      	movs	r2, #8
 8003120:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003122:	4b1d      	ldr	r3, [pc, #116]	@ (8003198 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003124:	2201      	movs	r2, #1
 8003126:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003128:	4b1b      	ldr	r3, [pc, #108]	@ (8003198 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800312a:	2200      	movs	r2, #0
 800312c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 800312e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003132:	4919      	ldr	r1, [pc, #100]	@ (8003198 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003134:	4819      	ldr	r0, [pc, #100]	@ (800319c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003136:	f003 fccb 	bl	8006ad0 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800313a:	4b17      	ldr	r3, [pc, #92]	@ (8003198 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800313c:	2203      	movs	r2, #3
 800313e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003140:	4b15      	ldr	r3, [pc, #84]	@ (8003198 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003142:	2208      	movs	r2, #8
 8003144:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8003146:	4b14      	ldr	r3, [pc, #80]	@ (8003198 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003148:	2204      	movs	r2, #4
 800314a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 800314c:	4b12      	ldr	r3, [pc, #72]	@ (8003198 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800314e:	2200      	movs	r2, #0
 8003150:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003152:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003156:	4910      	ldr	r1, [pc, #64]	@ (8003198 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003158:	4810      	ldr	r0, [pc, #64]	@ (800319c <BSP_SDRAM_Initialization_sequence+0xbc>)
 800315a:	f003 fcb9 	bl	8006ad0 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 800315e:	f44f 730c 	mov.w	r3, #560	@ 0x230
 8003162:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8003164:	4b0c      	ldr	r3, [pc, #48]	@ (8003198 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003166:	2204      	movs	r2, #4
 8003168:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800316a:	4b0b      	ldr	r3, [pc, #44]	@ (8003198 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800316c:	2208      	movs	r2, #8
 800316e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003170:	4b09      	ldr	r3, [pc, #36]	@ (8003198 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003172:	2201      	movs	r2, #1
 8003174:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	4a07      	ldr	r2, [pc, #28]	@ (8003198 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800317a:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800317c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003180:	4905      	ldr	r1, [pc, #20]	@ (8003198 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003182:	4806      	ldr	r0, [pc, #24]	@ (800319c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003184:	f003 fca4 	bl	8006ad0 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8003188:	6879      	ldr	r1, [r7, #4]
 800318a:	4804      	ldr	r0, [pc, #16]	@ (800319c <BSP_SDRAM_Initialization_sequence+0xbc>)
 800318c:	f003 fcd5 	bl	8006b3a <HAL_SDRAM_ProgramRefreshRate>
}
 8003190:	bf00      	nop
 8003192:	3710      	adds	r7, #16
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}
 8003198:	2000050c 	.word	0x2000050c
 800319c:	200004bc 	.word	0x200004bc

080031a0 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b090      	sub	sp, #64	@ 0x40
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	f000 80ec 	beq.w	800338a <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80031b2:	2300      	movs	r3, #0
 80031b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80031b6:	4b77      	ldr	r3, [pc, #476]	@ (8003394 <BSP_SDRAM_MspInit+0x1f4>)
 80031b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031ba:	4a76      	ldr	r2, [pc, #472]	@ (8003394 <BSP_SDRAM_MspInit+0x1f4>)
 80031bc:	f043 0301 	orr.w	r3, r3, #1
 80031c0:	6393      	str	r3, [r2, #56]	@ 0x38
 80031c2:	4b74      	ldr	r3, [pc, #464]	@ (8003394 <BSP_SDRAM_MspInit+0x1f4>)
 80031c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031c6:	f003 0301 	and.w	r3, r3, #1
 80031ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 80031cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 80031ce:	2300      	movs	r3, #0
 80031d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80031d2:	4b70      	ldr	r3, [pc, #448]	@ (8003394 <BSP_SDRAM_MspInit+0x1f4>)
 80031d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031d6:	4a6f      	ldr	r2, [pc, #444]	@ (8003394 <BSP_SDRAM_MspInit+0x1f4>)
 80031d8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80031dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80031de:	4b6d      	ldr	r3, [pc, #436]	@ (8003394 <BSP_SDRAM_MspInit+0x1f4>)
 80031e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80031e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80031ea:	2300      	movs	r3, #0
 80031ec:	623b      	str	r3, [r7, #32]
 80031ee:	4b69      	ldr	r3, [pc, #420]	@ (8003394 <BSP_SDRAM_MspInit+0x1f4>)
 80031f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031f2:	4a68      	ldr	r2, [pc, #416]	@ (8003394 <BSP_SDRAM_MspInit+0x1f4>)
 80031f4:	f043 0302 	orr.w	r3, r3, #2
 80031f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80031fa:	4b66      	ldr	r3, [pc, #408]	@ (8003394 <BSP_SDRAM_MspInit+0x1f4>)
 80031fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031fe:	f003 0302 	and.w	r3, r3, #2
 8003202:	623b      	str	r3, [r7, #32]
 8003204:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003206:	2300      	movs	r3, #0
 8003208:	61fb      	str	r3, [r7, #28]
 800320a:	4b62      	ldr	r3, [pc, #392]	@ (8003394 <BSP_SDRAM_MspInit+0x1f4>)
 800320c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800320e:	4a61      	ldr	r2, [pc, #388]	@ (8003394 <BSP_SDRAM_MspInit+0x1f4>)
 8003210:	f043 0304 	orr.w	r3, r3, #4
 8003214:	6313      	str	r3, [r2, #48]	@ 0x30
 8003216:	4b5f      	ldr	r3, [pc, #380]	@ (8003394 <BSP_SDRAM_MspInit+0x1f4>)
 8003218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800321a:	f003 0304 	and.w	r3, r3, #4
 800321e:	61fb      	str	r3, [r7, #28]
 8003220:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003222:	2300      	movs	r3, #0
 8003224:	61bb      	str	r3, [r7, #24]
 8003226:	4b5b      	ldr	r3, [pc, #364]	@ (8003394 <BSP_SDRAM_MspInit+0x1f4>)
 8003228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800322a:	4a5a      	ldr	r2, [pc, #360]	@ (8003394 <BSP_SDRAM_MspInit+0x1f4>)
 800322c:	f043 0308 	orr.w	r3, r3, #8
 8003230:	6313      	str	r3, [r2, #48]	@ 0x30
 8003232:	4b58      	ldr	r3, [pc, #352]	@ (8003394 <BSP_SDRAM_MspInit+0x1f4>)
 8003234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003236:	f003 0308 	and.w	r3, r3, #8
 800323a:	61bb      	str	r3, [r7, #24]
 800323c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800323e:	2300      	movs	r3, #0
 8003240:	617b      	str	r3, [r7, #20]
 8003242:	4b54      	ldr	r3, [pc, #336]	@ (8003394 <BSP_SDRAM_MspInit+0x1f4>)
 8003244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003246:	4a53      	ldr	r2, [pc, #332]	@ (8003394 <BSP_SDRAM_MspInit+0x1f4>)
 8003248:	f043 0310 	orr.w	r3, r3, #16
 800324c:	6313      	str	r3, [r2, #48]	@ 0x30
 800324e:	4b51      	ldr	r3, [pc, #324]	@ (8003394 <BSP_SDRAM_MspInit+0x1f4>)
 8003250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003252:	f003 0310 	and.w	r3, r3, #16
 8003256:	617b      	str	r3, [r7, #20]
 8003258:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800325a:	2300      	movs	r3, #0
 800325c:	613b      	str	r3, [r7, #16]
 800325e:	4b4d      	ldr	r3, [pc, #308]	@ (8003394 <BSP_SDRAM_MspInit+0x1f4>)
 8003260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003262:	4a4c      	ldr	r2, [pc, #304]	@ (8003394 <BSP_SDRAM_MspInit+0x1f4>)
 8003264:	f043 0320 	orr.w	r3, r3, #32
 8003268:	6313      	str	r3, [r2, #48]	@ 0x30
 800326a:	4b4a      	ldr	r3, [pc, #296]	@ (8003394 <BSP_SDRAM_MspInit+0x1f4>)
 800326c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800326e:	f003 0320 	and.w	r3, r3, #32
 8003272:	613b      	str	r3, [r7, #16]
 8003274:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003276:	2300      	movs	r3, #0
 8003278:	60fb      	str	r3, [r7, #12]
 800327a:	4b46      	ldr	r3, [pc, #280]	@ (8003394 <BSP_SDRAM_MspInit+0x1f4>)
 800327c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800327e:	4a45      	ldr	r2, [pc, #276]	@ (8003394 <BSP_SDRAM_MspInit+0x1f4>)
 8003280:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003284:	6313      	str	r3, [r2, #48]	@ 0x30
 8003286:	4b43      	ldr	r3, [pc, #268]	@ (8003394 <BSP_SDRAM_MspInit+0x1f4>)
 8003288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800328a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800328e:	60fb      	str	r3, [r7, #12]
 8003290:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8003292:	2302      	movs	r3, #2
 8003294:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8003296:	2302      	movs	r3, #2
 8003298:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800329a:	2300      	movs	r3, #0
 800329c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 800329e:	230c      	movs	r3, #12
 80032a0:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 80032a2:	2360      	movs	r3, #96	@ 0x60
 80032a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 80032a6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80032aa:	4619      	mov	r1, r3
 80032ac:	483a      	ldr	r0, [pc, #232]	@ (8003398 <BSP_SDRAM_MspInit+0x1f8>)
 80032ae:	f000 feaf 	bl	8004010 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 80032b2:	2301      	movs	r3, #1
 80032b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 80032b6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80032ba:	4619      	mov	r1, r3
 80032bc:	4837      	ldr	r0, [pc, #220]	@ (800339c <BSP_SDRAM_MspInit+0x1fc>)
 80032be:	f000 fea7 	bl	8004010 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 80032c2:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80032c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80032c8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80032cc:	4619      	mov	r1, r3
 80032ce:	4834      	ldr	r0, [pc, #208]	@ (80033a0 <BSP_SDRAM_MspInit+0x200>)
 80032d0:	f000 fe9e 	bl	8004010 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 80032d4:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80032d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 80032da:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80032de:	4619      	mov	r1, r3
 80032e0:	4830      	ldr	r0, [pc, #192]	@ (80033a4 <BSP_SDRAM_MspInit+0x204>)
 80032e2:	f000 fe95 	bl	8004010 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 80032e6:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80032ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80032ec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80032f0:	4619      	mov	r1, r3
 80032f2:	482d      	ldr	r0, [pc, #180]	@ (80033a8 <BSP_SDRAM_MspInit+0x208>)
 80032f4:	f000 fe8c 	bl	8004010 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 80032f8:	f248 1333 	movw	r3, #33075	@ 0x8133
 80032fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80032fe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003302:	4619      	mov	r1, r3
 8003304:	4829      	ldr	r0, [pc, #164]	@ (80033ac <BSP_SDRAM_MspInit+0x20c>)
 8003306:	f000 fe83 	bl	8004010 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800330a:	4b29      	ldr	r3, [pc, #164]	@ (80033b0 <BSP_SDRAM_MspInit+0x210>)
 800330c:	2200      	movs	r2, #0
 800330e:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8003310:	4b27      	ldr	r3, [pc, #156]	@ (80033b0 <BSP_SDRAM_MspInit+0x210>)
 8003312:	2280      	movs	r2, #128	@ 0x80
 8003314:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8003316:	4b26      	ldr	r3, [pc, #152]	@ (80033b0 <BSP_SDRAM_MspInit+0x210>)
 8003318:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800331c:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 800331e:	4b24      	ldr	r3, [pc, #144]	@ (80033b0 <BSP_SDRAM_MspInit+0x210>)
 8003320:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003324:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003326:	4b22      	ldr	r3, [pc, #136]	@ (80033b0 <BSP_SDRAM_MspInit+0x210>)
 8003328:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800332c:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800332e:	4b20      	ldr	r3, [pc, #128]	@ (80033b0 <BSP_SDRAM_MspInit+0x210>)
 8003330:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003334:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8003336:	4b1e      	ldr	r3, [pc, #120]	@ (80033b0 <BSP_SDRAM_MspInit+0x210>)
 8003338:	2200      	movs	r2, #0
 800333a:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 800333c:	4b1c      	ldr	r3, [pc, #112]	@ (80033b0 <BSP_SDRAM_MspInit+0x210>)
 800333e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003342:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8003344:	4b1a      	ldr	r3, [pc, #104]	@ (80033b0 <BSP_SDRAM_MspInit+0x210>)
 8003346:	2200      	movs	r2, #0
 8003348:	625a      	str	r2, [r3, #36]	@ 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800334a:	4b19      	ldr	r3, [pc, #100]	@ (80033b0 <BSP_SDRAM_MspInit+0x210>)
 800334c:	2203      	movs	r2, #3
 800334e:	629a      	str	r2, [r3, #40]	@ 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003350:	4b17      	ldr	r3, [pc, #92]	@ (80033b0 <BSP_SDRAM_MspInit+0x210>)
 8003352:	2200      	movs	r2, #0
 8003354:	62da      	str	r2, [r3, #44]	@ 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8003356:	4b16      	ldr	r3, [pc, #88]	@ (80033b0 <BSP_SDRAM_MspInit+0x210>)
 8003358:	2200      	movs	r2, #0
 800335a:	631a      	str	r2, [r3, #48]	@ 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 800335c:	4b14      	ldr	r3, [pc, #80]	@ (80033b0 <BSP_SDRAM_MspInit+0x210>)
 800335e:	4a15      	ldr	r2, [pc, #84]	@ (80033b4 <BSP_SDRAM_MspInit+0x214>)
 8003360:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a12      	ldr	r2, [pc, #72]	@ (80033b0 <BSP_SDRAM_MspInit+0x210>)
 8003366:	631a      	str	r2, [r3, #48]	@ 0x30
 8003368:	4a11      	ldr	r2, [pc, #68]	@ (80033b0 <BSP_SDRAM_MspInit+0x210>)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6393      	str	r3, [r2, #56]	@ 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 800336e:	4810      	ldr	r0, [pc, #64]	@ (80033b0 <BSP_SDRAM_MspInit+0x210>)
 8003370:	f000 fab2 	bl	80038d8 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8003374:	480e      	ldr	r0, [pc, #56]	@ (80033b0 <BSP_SDRAM_MspInit+0x210>)
 8003376:	f000 fa01 	bl	800377c <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 800337a:	2200      	movs	r2, #0
 800337c:	210f      	movs	r1, #15
 800337e:	2038      	movs	r0, #56	@ 0x38
 8003380:	f000 f9c5 	bl	800370e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8003384:	2038      	movs	r0, #56	@ 0x38
 8003386:	f000 f9de 	bl	8003746 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 800338a:	bf00      	nop
 800338c:	3740      	adds	r7, #64	@ 0x40
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	40023800 	.word	0x40023800
 8003398:	40020400 	.word	0x40020400
 800339c:	40020800 	.word	0x40020800
 80033a0:	40020c00 	.word	0x40020c00
 80033a4:	40021000 	.word	0x40021000
 80033a8:	40021400 	.word	0x40021400
 80033ac:	40021800 	.word	0x40021800
 80033b0:	2000051c 	.word	0x2000051c
 80033b4:	40026410 	.word	0x40026410

080033b8 <BSP_TS_Init>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD  
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0
 80033be:	4603      	mov	r3, r0
 80033c0:	460a      	mov	r2, r1
 80033c2:	80fb      	strh	r3, [r7, #6]
 80033c4:	4613      	mov	r3, r2
 80033c6:	80bb      	strh	r3, [r7, #4]
  uint8_t ret = TS_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	73fb      	strb	r3, [r7, #15]

  /* Initialize x and y positions boundaries */
  TsXBoundary = XSize;
 80033cc:	4a13      	ldr	r2, [pc, #76]	@ (800341c <BSP_TS_Init+0x64>)
 80033ce:	88fb      	ldrh	r3, [r7, #6]
 80033d0:	8013      	strh	r3, [r2, #0]
  TsYBoundary = YSize;
 80033d2:	4a13      	ldr	r2, [pc, #76]	@ (8003420 <BSP_TS_Init+0x68>)
 80033d4:	88bb      	ldrh	r3, [r7, #4]
 80033d6:	8013      	strh	r3, [r2, #0]

  /* Read ID and verify if the IO expander is ready */
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 80033d8:	4b12      	ldr	r3, [pc, #72]	@ (8003424 <BSP_TS_Init+0x6c>)
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	2082      	movs	r0, #130	@ 0x82
 80033de:	4798      	blx	r3
 80033e0:	4603      	mov	r3, r0
 80033e2:	461a      	mov	r2, r3
 80033e4:	f640 0311 	movw	r3, #2065	@ 0x811
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d104      	bne.n	80033f6 <BSP_TS_Init+0x3e>
  {
    /* Initialize the TS driver structure */
    TsDrv = &stmpe811_ts_drv;
 80033ec:	4b0e      	ldr	r3, [pc, #56]	@ (8003428 <BSP_TS_Init+0x70>)
 80033ee:	4a0d      	ldr	r2, [pc, #52]	@ (8003424 <BSP_TS_Init+0x6c>)
 80033f0:	601a      	str	r2, [r3, #0]

    ret = TS_OK;
 80033f2:	2300      	movs	r3, #0
 80033f4:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == TS_OK)
 80033f6:	7bfb      	ldrb	r3, [r7, #15]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d109      	bne.n	8003410 <BSP_TS_Init+0x58>
  {
    /* Initialize the LL TS Driver */
    TsDrv->Init(TS_I2C_ADDRESS);
 80033fc:	4b0a      	ldr	r3, [pc, #40]	@ (8003428 <BSP_TS_Init+0x70>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	2082      	movs	r0, #130	@ 0x82
 8003404:	4798      	blx	r3
    TsDrv->Start(TS_I2C_ADDRESS);
 8003406:	4b08      	ldr	r3, [pc, #32]	@ (8003428 <BSP_TS_Init+0x70>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	2082      	movs	r0, #130	@ 0x82
 800340e:	4798      	blx	r3
  }

  return ret;
 8003410:	7bfb      	ldrb	r3, [r7, #15]
}
 8003412:	4618      	mov	r0, r3
 8003414:	3710      	adds	r7, #16
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	20000580 	.word	0x20000580
 8003420:	20000582 	.word	0x20000582
 8003424:	2000003c 	.word	0x2000003c
 8003428:	2000057c 	.word	0x2000057c

0800342c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003430:	4b0e      	ldr	r3, [pc, #56]	@ (800346c <HAL_Init+0x40>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a0d      	ldr	r2, [pc, #52]	@ (800346c <HAL_Init+0x40>)
 8003436:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800343a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800343c:	4b0b      	ldr	r3, [pc, #44]	@ (800346c <HAL_Init+0x40>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a0a      	ldr	r2, [pc, #40]	@ (800346c <HAL_Init+0x40>)
 8003442:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003446:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003448:	4b08      	ldr	r3, [pc, #32]	@ (800346c <HAL_Init+0x40>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a07      	ldr	r2, [pc, #28]	@ (800346c <HAL_Init+0x40>)
 800344e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003452:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003454:	2003      	movs	r0, #3
 8003456:	f000 f94f 	bl	80036f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800345a:	200f      	movs	r0, #15
 800345c:	f000 f808 	bl	8003470 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003460:	f7fd fc0a 	bl	8000c78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003464:	2300      	movs	r3, #0
}
 8003466:	4618      	mov	r0, r3
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	40023c00 	.word	0x40023c00

08003470 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b082      	sub	sp, #8
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003478:	4b12      	ldr	r3, [pc, #72]	@ (80034c4 <HAL_InitTick+0x54>)
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	4b12      	ldr	r3, [pc, #72]	@ (80034c8 <HAL_InitTick+0x58>)
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	4619      	mov	r1, r3
 8003482:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003486:	fbb3 f3f1 	udiv	r3, r3, r1
 800348a:	fbb2 f3f3 	udiv	r3, r2, r3
 800348e:	4618      	mov	r0, r3
 8003490:	f000 f967 	bl	8003762 <HAL_SYSTICK_Config>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d001      	beq.n	800349e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e00e      	b.n	80034bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2b0f      	cmp	r3, #15
 80034a2:	d80a      	bhi.n	80034ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80034a4:	2200      	movs	r2, #0
 80034a6:	6879      	ldr	r1, [r7, #4]
 80034a8:	f04f 30ff 	mov.w	r0, #4294967295
 80034ac:	f000 f92f 	bl	800370e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80034b0:	4a06      	ldr	r2, [pc, #24]	@ (80034cc <HAL_InitTick+0x5c>)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80034b6:	2300      	movs	r3, #0
 80034b8:	e000      	b.n	80034bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3708      	adds	r7, #8
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	20000000 	.word	0x20000000
 80034c8:	20000084 	.word	0x20000084
 80034cc:	20000080 	.word	0x20000080

080034d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80034d0:	b480      	push	{r7}
 80034d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80034d4:	4b06      	ldr	r3, [pc, #24]	@ (80034f0 <HAL_IncTick+0x20>)
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	461a      	mov	r2, r3
 80034da:	4b06      	ldr	r3, [pc, #24]	@ (80034f4 <HAL_IncTick+0x24>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4413      	add	r3, r2
 80034e0:	4a04      	ldr	r2, [pc, #16]	@ (80034f4 <HAL_IncTick+0x24>)
 80034e2:	6013      	str	r3, [r2, #0]
}
 80034e4:	bf00      	nop
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr
 80034ee:	bf00      	nop
 80034f0:	20000084 	.word	0x20000084
 80034f4:	20000584 	.word	0x20000584

080034f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80034f8:	b480      	push	{r7}
 80034fa:	af00      	add	r7, sp, #0
  return uwTick;
 80034fc:	4b03      	ldr	r3, [pc, #12]	@ (800350c <HAL_GetTick+0x14>)
 80034fe:	681b      	ldr	r3, [r3, #0]
}
 8003500:	4618      	mov	r0, r3
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr
 800350a:	bf00      	nop
 800350c:	20000584 	.word	0x20000584

08003510 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003518:	f7ff ffee 	bl	80034f8 <HAL_GetTick>
 800351c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003528:	d005      	beq.n	8003536 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800352a:	4b0a      	ldr	r3, [pc, #40]	@ (8003554 <HAL_Delay+0x44>)
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	461a      	mov	r2, r3
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	4413      	add	r3, r2
 8003534:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003536:	bf00      	nop
 8003538:	f7ff ffde 	bl	80034f8 <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	68fa      	ldr	r2, [r7, #12]
 8003544:	429a      	cmp	r2, r3
 8003546:	d8f7      	bhi.n	8003538 <HAL_Delay+0x28>
  {
  }
}
 8003548:	bf00      	nop
 800354a:	bf00      	nop
 800354c:	3710      	adds	r7, #16
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	20000084 	.word	0x20000084

08003558 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003558:	b480      	push	{r7}
 800355a:	b085      	sub	sp, #20
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f003 0307 	and.w	r3, r3, #7
 8003566:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003568:	4b0c      	ldr	r3, [pc, #48]	@ (800359c <__NVIC_SetPriorityGrouping+0x44>)
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800356e:	68ba      	ldr	r2, [r7, #8]
 8003570:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003574:	4013      	ands	r3, r2
 8003576:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003580:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003584:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003588:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800358a:	4a04      	ldr	r2, [pc, #16]	@ (800359c <__NVIC_SetPriorityGrouping+0x44>)
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	60d3      	str	r3, [r2, #12]
}
 8003590:	bf00      	nop
 8003592:	3714      	adds	r7, #20
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr
 800359c:	e000ed00 	.word	0xe000ed00

080035a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035a0:	b480      	push	{r7}
 80035a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035a4:	4b04      	ldr	r3, [pc, #16]	@ (80035b8 <__NVIC_GetPriorityGrouping+0x18>)
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	0a1b      	lsrs	r3, r3, #8
 80035aa:	f003 0307 	and.w	r3, r3, #7
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr
 80035b8:	e000ed00 	.word	0xe000ed00

080035bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	4603      	mov	r3, r0
 80035c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	db0b      	blt.n	80035e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035ce:	79fb      	ldrb	r3, [r7, #7]
 80035d0:	f003 021f 	and.w	r2, r3, #31
 80035d4:	4907      	ldr	r1, [pc, #28]	@ (80035f4 <__NVIC_EnableIRQ+0x38>)
 80035d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035da:	095b      	lsrs	r3, r3, #5
 80035dc:	2001      	movs	r0, #1
 80035de:	fa00 f202 	lsl.w	r2, r0, r2
 80035e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80035e6:	bf00      	nop
 80035e8:	370c      	adds	r7, #12
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr
 80035f2:	bf00      	nop
 80035f4:	e000e100 	.word	0xe000e100

080035f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	4603      	mov	r3, r0
 8003600:	6039      	str	r1, [r7, #0]
 8003602:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003604:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003608:	2b00      	cmp	r3, #0
 800360a:	db0a      	blt.n	8003622 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	b2da      	uxtb	r2, r3
 8003610:	490c      	ldr	r1, [pc, #48]	@ (8003644 <__NVIC_SetPriority+0x4c>)
 8003612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003616:	0112      	lsls	r2, r2, #4
 8003618:	b2d2      	uxtb	r2, r2
 800361a:	440b      	add	r3, r1
 800361c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003620:	e00a      	b.n	8003638 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	b2da      	uxtb	r2, r3
 8003626:	4908      	ldr	r1, [pc, #32]	@ (8003648 <__NVIC_SetPriority+0x50>)
 8003628:	79fb      	ldrb	r3, [r7, #7]
 800362a:	f003 030f 	and.w	r3, r3, #15
 800362e:	3b04      	subs	r3, #4
 8003630:	0112      	lsls	r2, r2, #4
 8003632:	b2d2      	uxtb	r2, r2
 8003634:	440b      	add	r3, r1
 8003636:	761a      	strb	r2, [r3, #24]
}
 8003638:	bf00      	nop
 800363a:	370c      	adds	r7, #12
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr
 8003644:	e000e100 	.word	0xe000e100
 8003648:	e000ed00 	.word	0xe000ed00

0800364c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800364c:	b480      	push	{r7}
 800364e:	b089      	sub	sp, #36	@ 0x24
 8003650:	af00      	add	r7, sp, #0
 8003652:	60f8      	str	r0, [r7, #12]
 8003654:	60b9      	str	r1, [r7, #8]
 8003656:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f003 0307 	and.w	r3, r3, #7
 800365e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	f1c3 0307 	rsb	r3, r3, #7
 8003666:	2b04      	cmp	r3, #4
 8003668:	bf28      	it	cs
 800366a:	2304      	movcs	r3, #4
 800366c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	3304      	adds	r3, #4
 8003672:	2b06      	cmp	r3, #6
 8003674:	d902      	bls.n	800367c <NVIC_EncodePriority+0x30>
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	3b03      	subs	r3, #3
 800367a:	e000      	b.n	800367e <NVIC_EncodePriority+0x32>
 800367c:	2300      	movs	r3, #0
 800367e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003680:	f04f 32ff 	mov.w	r2, #4294967295
 8003684:	69bb      	ldr	r3, [r7, #24]
 8003686:	fa02 f303 	lsl.w	r3, r2, r3
 800368a:	43da      	mvns	r2, r3
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	401a      	ands	r2, r3
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003694:	f04f 31ff 	mov.w	r1, #4294967295
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	fa01 f303 	lsl.w	r3, r1, r3
 800369e:	43d9      	mvns	r1, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036a4:	4313      	orrs	r3, r2
         );
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3724      	adds	r7, #36	@ 0x24
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr
	...

080036b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	3b01      	subs	r3, #1
 80036c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80036c4:	d301      	bcc.n	80036ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036c6:	2301      	movs	r3, #1
 80036c8:	e00f      	b.n	80036ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036ca:	4a0a      	ldr	r2, [pc, #40]	@ (80036f4 <SysTick_Config+0x40>)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	3b01      	subs	r3, #1
 80036d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036d2:	210f      	movs	r1, #15
 80036d4:	f04f 30ff 	mov.w	r0, #4294967295
 80036d8:	f7ff ff8e 	bl	80035f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036dc:	4b05      	ldr	r3, [pc, #20]	@ (80036f4 <SysTick_Config+0x40>)
 80036de:	2200      	movs	r2, #0
 80036e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036e2:	4b04      	ldr	r3, [pc, #16]	@ (80036f4 <SysTick_Config+0x40>)
 80036e4:	2207      	movs	r2, #7
 80036e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036e8:	2300      	movs	r3, #0
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3708      	adds	r7, #8
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	e000e010 	.word	0xe000e010

080036f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f7ff ff29 	bl	8003558 <__NVIC_SetPriorityGrouping>
}
 8003706:	bf00      	nop
 8003708:	3708      	adds	r7, #8
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}

0800370e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800370e:	b580      	push	{r7, lr}
 8003710:	b086      	sub	sp, #24
 8003712:	af00      	add	r7, sp, #0
 8003714:	4603      	mov	r3, r0
 8003716:	60b9      	str	r1, [r7, #8]
 8003718:	607a      	str	r2, [r7, #4]
 800371a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800371c:	2300      	movs	r3, #0
 800371e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003720:	f7ff ff3e 	bl	80035a0 <__NVIC_GetPriorityGrouping>
 8003724:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	68b9      	ldr	r1, [r7, #8]
 800372a:	6978      	ldr	r0, [r7, #20]
 800372c:	f7ff ff8e 	bl	800364c <NVIC_EncodePriority>
 8003730:	4602      	mov	r2, r0
 8003732:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003736:	4611      	mov	r1, r2
 8003738:	4618      	mov	r0, r3
 800373a:	f7ff ff5d 	bl	80035f8 <__NVIC_SetPriority>
}
 800373e:	bf00      	nop
 8003740:	3718      	adds	r7, #24
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}

08003746 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003746:	b580      	push	{r7, lr}
 8003748:	b082      	sub	sp, #8
 800374a:	af00      	add	r7, sp, #0
 800374c:	4603      	mov	r3, r0
 800374e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003754:	4618      	mov	r0, r3
 8003756:	f7ff ff31 	bl	80035bc <__NVIC_EnableIRQ>
}
 800375a:	bf00      	nop
 800375c:	3708      	adds	r7, #8
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}

08003762 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003762:	b580      	push	{r7, lr}
 8003764:	b082      	sub	sp, #8
 8003766:	af00      	add	r7, sp, #0
 8003768:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f7ff ffa2 	bl	80036b4 <SysTick_Config>
 8003770:	4603      	mov	r3, r0
}
 8003772:	4618      	mov	r0, r3
 8003774:	3708      	adds	r7, #8
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
	...

0800377c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b086      	sub	sp, #24
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003784:	2300      	movs	r3, #0
 8003786:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003788:	f7ff feb6 	bl	80034f8 <HAL_GetTick>
 800378c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d101      	bne.n	8003798 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e099      	b.n	80038cc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2202      	movs	r2, #2
 800379c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f022 0201 	bic.w	r2, r2, #1
 80037b6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037b8:	e00f      	b.n	80037da <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80037ba:	f7ff fe9d 	bl	80034f8 <HAL_GetTick>
 80037be:	4602      	mov	r2, r0
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	2b05      	cmp	r3, #5
 80037c6:	d908      	bls.n	80037da <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2220      	movs	r2, #32
 80037cc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2203      	movs	r2, #3
 80037d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e078      	b.n	80038cc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0301 	and.w	r3, r3, #1
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d1e8      	bne.n	80037ba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80037f0:	697a      	ldr	r2, [r7, #20]
 80037f2:	4b38      	ldr	r3, [pc, #224]	@ (80038d4 <HAL_DMA_Init+0x158>)
 80037f4:	4013      	ands	r3, r2
 80037f6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	685a      	ldr	r2, [r3, #4]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003806:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	691b      	ldr	r3, [r3, #16]
 800380c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003812:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	699b      	ldr	r3, [r3, #24]
 8003818:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800381e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6a1b      	ldr	r3, [r3, #32]
 8003824:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003826:	697a      	ldr	r2, [r7, #20]
 8003828:	4313      	orrs	r3, r2
 800382a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003830:	2b04      	cmp	r3, #4
 8003832:	d107      	bne.n	8003844 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800383c:	4313      	orrs	r3, r2
 800383e:	697a      	ldr	r2, [r7, #20]
 8003840:	4313      	orrs	r3, r2
 8003842:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	697a      	ldr	r2, [r7, #20]
 800384a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	695b      	ldr	r3, [r3, #20]
 8003852:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	f023 0307 	bic.w	r3, r3, #7
 800385a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003860:	697a      	ldr	r2, [r7, #20]
 8003862:	4313      	orrs	r3, r2
 8003864:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800386a:	2b04      	cmp	r3, #4
 800386c:	d117      	bne.n	800389e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003872:	697a      	ldr	r2, [r7, #20]
 8003874:	4313      	orrs	r3, r2
 8003876:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800387c:	2b00      	cmp	r3, #0
 800387e:	d00e      	beq.n	800389e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f000 f8bd 	bl	8003a00 <DMA_CheckFifoParam>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d008      	beq.n	800389e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2240      	movs	r2, #64	@ 0x40
 8003890:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2201      	movs	r2, #1
 8003896:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800389a:	2301      	movs	r3, #1
 800389c:	e016      	b.n	80038cc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	697a      	ldr	r2, [r7, #20]
 80038a4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f000 f874 	bl	8003994 <DMA_CalcBaseAndBitshift>
 80038ac:	4603      	mov	r3, r0
 80038ae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038b4:	223f      	movs	r2, #63	@ 0x3f
 80038b6:	409a      	lsls	r2, r3
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2201      	movs	r2, #1
 80038c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80038ca:	2300      	movs	r3, #0
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3718      	adds	r7, #24
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	f010803f 	.word	0xf010803f

080038d8 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b084      	sub	sp, #16
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d101      	bne.n	80038ea <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e050      	b.n	800398c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	2b02      	cmp	r3, #2
 80038f4:	d101      	bne.n	80038fa <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80038f6:	2302      	movs	r3, #2
 80038f8:	e048      	b.n	800398c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f022 0201 	bic.w	r2, r2, #1
 8003908:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	2200      	movs	r2, #0
 8003910:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	2200      	movs	r2, #0
 8003918:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	2200      	movs	r2, #0
 8003920:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	2200      	movs	r2, #0
 8003928:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	2200      	movs	r2, #0
 8003930:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	2221      	movs	r2, #33	@ 0x21
 8003938:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f000 f82a 	bl	8003994 <DMA_CalcBaseAndBitshift>
 8003940:	4603      	mov	r3, r0
 8003942:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800396c:	223f      	movs	r2, #63	@ 0x3f
 800396e:	409a      	lsls	r2, r3
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800398a:	2300      	movs	r3, #0
}
 800398c:	4618      	mov	r0, r3
 800398e:	3710      	adds	r7, #16
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}

08003994 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003994:	b480      	push	{r7}
 8003996:	b085      	sub	sp, #20
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	3b10      	subs	r3, #16
 80039a4:	4a14      	ldr	r2, [pc, #80]	@ (80039f8 <DMA_CalcBaseAndBitshift+0x64>)
 80039a6:	fba2 2303 	umull	r2, r3, r2, r3
 80039aa:	091b      	lsrs	r3, r3, #4
 80039ac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80039ae:	4a13      	ldr	r2, [pc, #76]	@ (80039fc <DMA_CalcBaseAndBitshift+0x68>)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	4413      	add	r3, r2
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	461a      	mov	r2, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2b03      	cmp	r3, #3
 80039c0:	d909      	bls.n	80039d6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80039ca:	f023 0303 	bic.w	r3, r3, #3
 80039ce:	1d1a      	adds	r2, r3, #4
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	659a      	str	r2, [r3, #88]	@ 0x58
 80039d4:	e007      	b.n	80039e6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80039de:	f023 0303 	bic.w	r3, r3, #3
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3714      	adds	r7, #20
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr
 80039f6:	bf00      	nop
 80039f8:	aaaaaaab 	.word	0xaaaaaaab
 80039fc:	0800b428 	.word	0x0800b428

08003a00 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b085      	sub	sp, #20
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a10:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	699b      	ldr	r3, [r3, #24]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d11f      	bne.n	8003a5a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	2b03      	cmp	r3, #3
 8003a1e:	d856      	bhi.n	8003ace <DMA_CheckFifoParam+0xce>
 8003a20:	a201      	add	r2, pc, #4	@ (adr r2, 8003a28 <DMA_CheckFifoParam+0x28>)
 8003a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a26:	bf00      	nop
 8003a28:	08003a39 	.word	0x08003a39
 8003a2c:	08003a4b 	.word	0x08003a4b
 8003a30:	08003a39 	.word	0x08003a39
 8003a34:	08003acf 	.word	0x08003acf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a3c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d046      	beq.n	8003ad2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a48:	e043      	b.n	8003ad2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a4e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003a52:	d140      	bne.n	8003ad6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a58:	e03d      	b.n	8003ad6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	699b      	ldr	r3, [r3, #24]
 8003a5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a62:	d121      	bne.n	8003aa8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	2b03      	cmp	r3, #3
 8003a68:	d837      	bhi.n	8003ada <DMA_CheckFifoParam+0xda>
 8003a6a:	a201      	add	r2, pc, #4	@ (adr r2, 8003a70 <DMA_CheckFifoParam+0x70>)
 8003a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a70:	08003a81 	.word	0x08003a81
 8003a74:	08003a87 	.word	0x08003a87
 8003a78:	08003a81 	.word	0x08003a81
 8003a7c:	08003a99 	.word	0x08003a99
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	73fb      	strb	r3, [r7, #15]
      break;
 8003a84:	e030      	b.n	8003ae8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a8a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d025      	beq.n	8003ade <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a96:	e022      	b.n	8003ade <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a9c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003aa0:	d11f      	bne.n	8003ae2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003aa6:	e01c      	b.n	8003ae2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	2b02      	cmp	r3, #2
 8003aac:	d903      	bls.n	8003ab6 <DMA_CheckFifoParam+0xb6>
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	2b03      	cmp	r3, #3
 8003ab2:	d003      	beq.n	8003abc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003ab4:	e018      	b.n	8003ae8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	73fb      	strb	r3, [r7, #15]
      break;
 8003aba:	e015      	b.n	8003ae8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ac0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d00e      	beq.n	8003ae6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	73fb      	strb	r3, [r7, #15]
      break;
 8003acc:	e00b      	b.n	8003ae6 <DMA_CheckFifoParam+0xe6>
      break;
 8003ace:	bf00      	nop
 8003ad0:	e00a      	b.n	8003ae8 <DMA_CheckFifoParam+0xe8>
      break;
 8003ad2:	bf00      	nop
 8003ad4:	e008      	b.n	8003ae8 <DMA_CheckFifoParam+0xe8>
      break;
 8003ad6:	bf00      	nop
 8003ad8:	e006      	b.n	8003ae8 <DMA_CheckFifoParam+0xe8>
      break;
 8003ada:	bf00      	nop
 8003adc:	e004      	b.n	8003ae8 <DMA_CheckFifoParam+0xe8>
      break;
 8003ade:	bf00      	nop
 8003ae0:	e002      	b.n	8003ae8 <DMA_CheckFifoParam+0xe8>
      break;   
 8003ae2:	bf00      	nop
 8003ae4:	e000      	b.n	8003ae8 <DMA_CheckFifoParam+0xe8>
      break;
 8003ae6:	bf00      	nop
    }
  } 
  
  return status; 
 8003ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3714      	adds	r7, #20
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr
 8003af6:	bf00      	nop

08003af8 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b082      	sub	sp, #8
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d101      	bne.n	8003b0a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e03b      	b.n	8003b82 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d106      	bne.n	8003b24 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f7fd f8d2 	bl	8000cc8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2202      	movs	r2, #2
 8003b28:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685a      	ldr	r2, [r3, #4]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	430a      	orrs	r2, r1
 8003b40:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b48:	f023 0107 	bic.w	r1, r3, #7
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	689a      	ldr	r2, [r3, #8]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	430a      	orrs	r2, r1
 8003b56:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b5e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003b62:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	68d1      	ldr	r1, [r2, #12]
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	6812      	ldr	r2, [r2, #0]
 8003b6e:	430b      	orrs	r3, r1
 8003b70:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2200      	movs	r2, #0
 8003b76:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8003b80:	2300      	movs	r3, #0
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3708      	adds	r7, #8
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}

08003b8a <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8003b8a:	b580      	push	{r7, lr}
 8003b8c:	b086      	sub	sp, #24
 8003b8e:	af02      	add	r7, sp, #8
 8003b90:	60f8      	str	r0, [r7, #12]
 8003b92:	60b9      	str	r1, [r7, #8]
 8003b94:	607a      	str	r2, [r7, #4]
 8003b96:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d101      	bne.n	8003ba6 <HAL_DMA2D_Start+0x1c>
 8003ba2:	2302      	movs	r3, #2
 8003ba4:	e018      	b.n	8003bd8 <HAL_DMA2D_Start+0x4e>
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2201      	movs	r2, #1
 8003baa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2202      	movs	r2, #2
 8003bb2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8003bb6:	69bb      	ldr	r3, [r7, #24]
 8003bb8:	9300      	str	r3, [sp, #0]
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	68b9      	ldr	r1, [r7, #8]
 8003bc0:	68f8      	ldr	r0, [r7, #12]
 8003bc2:	f000 f989 	bl	8003ed8 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f042 0201 	orr.w	r2, r2, #1
 8003bd4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003bd6:	2300      	movs	r3, #0
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3710      	adds	r7, #16
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}

08003be0 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b086      	sub	sp, #24
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8003bea:	2300      	movs	r3, #0
 8003bec:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 0301 	and.w	r3, r3, #1
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d056      	beq.n	8003caa <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003bfc:	f7ff fc7c 	bl	80034f8 <HAL_GetTick>
 8003c00:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003c02:	e04b      	b.n	8003c9c <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d023      	beq.n	8003c5e <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	f003 0320 	and.w	r3, r3, #32
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d005      	beq.n	8003c2c <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c24:	f043 0202 	orr.w	r2, r3, #2
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f003 0301 	and.w	r3, r3, #1
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d005      	beq.n	8003c42 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c3a:	f043 0201 	orr.w	r2, r3, #1
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	2221      	movs	r2, #33	@ 0x21
 8003c48:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2204      	movs	r2, #4
 8003c4e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e0a5      	b.n	8003daa <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c64:	d01a      	beq.n	8003c9c <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003c66:	f7ff fc47 	bl	80034f8 <HAL_GetTick>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	683a      	ldr	r2, [r7, #0]
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d302      	bcc.n	8003c7c <HAL_DMA2D_PollForTransfer+0x9c>
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d10f      	bne.n	8003c9c <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c80:	f043 0220 	orr.w	r2, r3, #32
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2203      	movs	r2, #3
 8003c8c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	e086      	b.n	8003daa <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	f003 0302 	and.w	r3, r3, #2
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d0ac      	beq.n	8003c04 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	69db      	ldr	r3, [r3, #28]
 8003cb0:	f003 0320 	and.w	r3, r3, #32
 8003cb4:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cbc:	f003 0320 	and.w	r3, r3, #32
 8003cc0:	693a      	ldr	r2, [r7, #16]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d061      	beq.n	8003d90 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003ccc:	f7ff fc14 	bl	80034f8 <HAL_GetTick>
 8003cd0:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003cd2:	e056      	b.n	8003d82 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d02e      	beq.n	8003d44 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	f003 0308 	and.w	r3, r3, #8
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d005      	beq.n	8003cfc <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cf4:	f043 0204 	orr.w	r2, r3, #4
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f003 0320 	and.w	r3, r3, #32
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d005      	beq.n	8003d12 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d0a:	f043 0202 	orr.w	r2, r3, #2
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	f003 0301 	and.w	r3, r3, #1
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d005      	beq.n	8003d28 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d20:	f043 0201 	orr.w	r2, r3, #1
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2229      	movs	r2, #41	@ 0x29
 8003d2e:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2204      	movs	r2, #4
 8003d34:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e032      	b.n	8003daa <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d4a:	d01a      	beq.n	8003d82 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003d4c:	f7ff fbd4 	bl	80034f8 <HAL_GetTick>
 8003d50:	4602      	mov	r2, r0
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	683a      	ldr	r2, [r7, #0]
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d302      	bcc.n	8003d62 <HAL_DMA2D_PollForTransfer+0x182>
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d10f      	bne.n	8003d82 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d66:	f043 0220 	orr.w	r2, r3, #32
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2203      	movs	r2, #3
 8003d72:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	e013      	b.n	8003daa <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	f003 0310 	and.w	r3, r3, #16
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d0a1      	beq.n	8003cd4 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	2212      	movs	r2, #18
 8003d96:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8003da8:	2300      	movs	r3, #0
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3718      	adds	r7, #24
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
	...

08003db4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b087      	sub	sp, #28
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
 8003dbc:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d101      	bne.n	8003dd4 <HAL_DMA2D_ConfigLayer+0x20>
 8003dd0:	2302      	movs	r3, #2
 8003dd2:	e079      	b.n	8003ec8 <HAL_DMA2D_ConfigLayer+0x114>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2202      	movs	r2, #2
 8003de0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	011b      	lsls	r3, r3, #4
 8003de8:	3318      	adds	r3, #24
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	4413      	add	r3, r2
 8003dee:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	685a      	ldr	r2, [r3, #4]
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	041b      	lsls	r3, r3, #16
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8003dfe:	4b35      	ldr	r3, [pc, #212]	@ (8003ed4 <HAL_DMA2D_ConfigLayer+0x120>)
 8003e00:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	2b0a      	cmp	r3, #10
 8003e08:	d003      	beq.n	8003e12 <HAL_DMA2D_ConfigLayer+0x5e>
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	2b09      	cmp	r3, #9
 8003e10:	d107      	bne.n	8003e22 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	68db      	ldr	r3, [r3, #12]
 8003e16:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8003e1a:	697a      	ldr	r2, [r7, #20]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	617b      	str	r3, [r7, #20]
 8003e20:	e005      	b.n	8003e2e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	061b      	lsls	r3, r3, #24
 8003e28:	697a      	ldr	r2, [r7, #20]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d120      	bne.n	8003e76 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	43db      	mvns	r3, r3
 8003e3e:	ea02 0103 	and.w	r1, r2, r3
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	697a      	ldr	r2, [r7, #20]
 8003e48:	430a      	orrs	r2, r1
 8003e4a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	693a      	ldr	r2, [r7, #16]
 8003e52:	6812      	ldr	r2, [r2, #0]
 8003e54:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	2b0a      	cmp	r3, #10
 8003e5c:	d003      	beq.n	8003e66 <HAL_DMA2D_ConfigLayer+0xb2>
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	2b09      	cmp	r3, #9
 8003e64:	d127      	bne.n	8003eb6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	68da      	ldr	r2, [r3, #12]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8003e72:	629a      	str	r2, [r3, #40]	@ 0x28
 8003e74:	e01f      	b.n	8003eb6 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	69da      	ldr	r2, [r3, #28]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	43db      	mvns	r3, r3
 8003e80:	ea02 0103 	and.w	r1, r2, r3
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	697a      	ldr	r2, [r7, #20]
 8003e8a:	430a      	orrs	r2, r1
 8003e8c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	693a      	ldr	r2, [r7, #16]
 8003e94:	6812      	ldr	r2, [r2, #0]
 8003e96:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	2b0a      	cmp	r3, #10
 8003e9e:	d003      	beq.n	8003ea8 <HAL_DMA2D_ConfigLayer+0xf4>
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	2b09      	cmp	r3, #9
 8003ea6:	d106      	bne.n	8003eb6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	68da      	ldr	r2, [r3, #12]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8003eb4:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2201      	movs	r2, #1
 8003eba:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8003ec6:	2300      	movs	r3, #0
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	371c      	adds	r7, #28
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr
 8003ed4:	ff03000f 	.word	0xff03000f

08003ed8 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b08b      	sub	sp, #44	@ 0x2c
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	60f8      	str	r0, [r7, #12]
 8003ee0:	60b9      	str	r1, [r7, #8]
 8003ee2:	607a      	str	r2, [r7, #4]
 8003ee4:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eec:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	041a      	lsls	r2, r3, #16
 8003ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ef6:	431a      	orrs	r2, r3
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	430a      	orrs	r2, r1
 8003efe:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003f10:	d174      	bne.n	8003ffc <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8003f18:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003f20:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8003f28:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d108      	bne.n	8003f4a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8003f38:	69ba      	ldr	r2, [r7, #24]
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	431a      	orrs	r2, r3
 8003f3e:	6a3b      	ldr	r3, [r7, #32]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	697a      	ldr	r2, [r7, #20]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f48:	e053      	b.n	8003ff2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d106      	bne.n	8003f60 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8003f52:	69ba      	ldr	r2, [r7, #24]
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	697a      	ldr	r2, [r7, #20]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f5e:	e048      	b.n	8003ff2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d111      	bne.n	8003f8c <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	0cdb      	lsrs	r3, r3, #19
 8003f6c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	0a9b      	lsrs	r3, r3, #10
 8003f72:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	08db      	lsrs	r3, r3, #3
 8003f78:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8003f7a:	69bb      	ldr	r3, [r7, #24]
 8003f7c:	015a      	lsls	r2, r3, #5
 8003f7e:	69fb      	ldr	r3, [r7, #28]
 8003f80:	02db      	lsls	r3, r3, #11
 8003f82:	4313      	orrs	r3, r2
 8003f84:	697a      	ldr	r2, [r7, #20]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f8a:	e032      	b.n	8003ff2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	2b03      	cmp	r3, #3
 8003f92:	d117      	bne.n	8003fc4 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8003f94:	6a3b      	ldr	r3, [r7, #32]
 8003f96:	0fdb      	lsrs	r3, r3, #31
 8003f98:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	0cdb      	lsrs	r3, r3, #19
 8003f9e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8003fa0:	69bb      	ldr	r3, [r7, #24]
 8003fa2:	0adb      	lsrs	r3, r3, #11
 8003fa4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	08db      	lsrs	r3, r3, #3
 8003faa:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	015a      	lsls	r2, r3, #5
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	029b      	lsls	r3, r3, #10
 8003fb4:	431a      	orrs	r2, r3
 8003fb6:	6a3b      	ldr	r3, [r7, #32]
 8003fb8:	03db      	lsls	r3, r3, #15
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	697a      	ldr	r2, [r7, #20]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fc2:	e016      	b.n	8003ff2 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8003fc4:	6a3b      	ldr	r3, [r7, #32]
 8003fc6:	0f1b      	lsrs	r3, r3, #28
 8003fc8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	0d1b      	lsrs	r3, r3, #20
 8003fce:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8003fd0:	69bb      	ldr	r3, [r7, #24]
 8003fd2:	0b1b      	lsrs	r3, r3, #12
 8003fd4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	091b      	lsrs	r3, r3, #4
 8003fda:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8003fdc:	69bb      	ldr	r3, [r7, #24]
 8003fde:	011a      	lsls	r2, r3, #4
 8003fe0:	69fb      	ldr	r3, [r7, #28]
 8003fe2:	021b      	lsls	r3, r3, #8
 8003fe4:	431a      	orrs	r2, r3
 8003fe6:	6a3b      	ldr	r3, [r7, #32]
 8003fe8:	031b      	lsls	r3, r3, #12
 8003fea:	4313      	orrs	r3, r2
 8003fec:	697a      	ldr	r2, [r7, #20]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ff8:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8003ffa:	e003      	b.n	8004004 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	68ba      	ldr	r2, [r7, #8]
 8004002:	60da      	str	r2, [r3, #12]
}
 8004004:	bf00      	nop
 8004006:	372c      	adds	r7, #44	@ 0x2c
 8004008:	46bd      	mov	sp, r7
 800400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400e:	4770      	bx	lr

08004010 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004010:	b480      	push	{r7}
 8004012:	b089      	sub	sp, #36	@ 0x24
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800401a:	2300      	movs	r3, #0
 800401c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800401e:	2300      	movs	r3, #0
 8004020:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004022:	2300      	movs	r3, #0
 8004024:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004026:	2300      	movs	r3, #0
 8004028:	61fb      	str	r3, [r7, #28]
 800402a:	e177      	b.n	800431c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800402c:	2201      	movs	r2, #1
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	fa02 f303 	lsl.w	r3, r2, r3
 8004034:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	697a      	ldr	r2, [r7, #20]
 800403c:	4013      	ands	r3, r2
 800403e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004040:	693a      	ldr	r2, [r7, #16]
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	429a      	cmp	r2, r3
 8004046:	f040 8166 	bne.w	8004316 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	f003 0303 	and.w	r3, r3, #3
 8004052:	2b01      	cmp	r3, #1
 8004054:	d005      	beq.n	8004062 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800405e:	2b02      	cmp	r3, #2
 8004060:	d130      	bne.n	80040c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004068:	69fb      	ldr	r3, [r7, #28]
 800406a:	005b      	lsls	r3, r3, #1
 800406c:	2203      	movs	r2, #3
 800406e:	fa02 f303 	lsl.w	r3, r2, r3
 8004072:	43db      	mvns	r3, r3
 8004074:	69ba      	ldr	r2, [r7, #24]
 8004076:	4013      	ands	r3, r2
 8004078:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	68da      	ldr	r2, [r3, #12]
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	005b      	lsls	r3, r3, #1
 8004082:	fa02 f303 	lsl.w	r3, r2, r3
 8004086:	69ba      	ldr	r2, [r7, #24]
 8004088:	4313      	orrs	r3, r2
 800408a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	69ba      	ldr	r2, [r7, #24]
 8004090:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004098:	2201      	movs	r2, #1
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	fa02 f303 	lsl.w	r3, r2, r3
 80040a0:	43db      	mvns	r3, r3
 80040a2:	69ba      	ldr	r2, [r7, #24]
 80040a4:	4013      	ands	r3, r2
 80040a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	091b      	lsrs	r3, r3, #4
 80040ae:	f003 0201 	and.w	r2, r3, #1
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	fa02 f303 	lsl.w	r3, r2, r3
 80040b8:	69ba      	ldr	r2, [r7, #24]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	69ba      	ldr	r2, [r7, #24]
 80040c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	f003 0303 	and.w	r3, r3, #3
 80040cc:	2b03      	cmp	r3, #3
 80040ce:	d017      	beq.n	8004100 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	005b      	lsls	r3, r3, #1
 80040da:	2203      	movs	r2, #3
 80040dc:	fa02 f303 	lsl.w	r3, r2, r3
 80040e0:	43db      	mvns	r3, r3
 80040e2:	69ba      	ldr	r2, [r7, #24]
 80040e4:	4013      	ands	r3, r2
 80040e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	689a      	ldr	r2, [r3, #8]
 80040ec:	69fb      	ldr	r3, [r7, #28]
 80040ee:	005b      	lsls	r3, r3, #1
 80040f0:	fa02 f303 	lsl.w	r3, r2, r3
 80040f4:	69ba      	ldr	r2, [r7, #24]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	69ba      	ldr	r2, [r7, #24]
 80040fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f003 0303 	and.w	r3, r3, #3
 8004108:	2b02      	cmp	r3, #2
 800410a:	d123      	bne.n	8004154 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	08da      	lsrs	r2, r3, #3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	3208      	adds	r2, #8
 8004114:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004118:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	f003 0307 	and.w	r3, r3, #7
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	220f      	movs	r2, #15
 8004124:	fa02 f303 	lsl.w	r3, r2, r3
 8004128:	43db      	mvns	r3, r3
 800412a:	69ba      	ldr	r2, [r7, #24]
 800412c:	4013      	ands	r3, r2
 800412e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	691a      	ldr	r2, [r3, #16]
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	f003 0307 	and.w	r3, r3, #7
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	fa02 f303 	lsl.w	r3, r2, r3
 8004140:	69ba      	ldr	r2, [r7, #24]
 8004142:	4313      	orrs	r3, r2
 8004144:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	08da      	lsrs	r2, r3, #3
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	3208      	adds	r2, #8
 800414e:	69b9      	ldr	r1, [r7, #24]
 8004150:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800415a:	69fb      	ldr	r3, [r7, #28]
 800415c:	005b      	lsls	r3, r3, #1
 800415e:	2203      	movs	r2, #3
 8004160:	fa02 f303 	lsl.w	r3, r2, r3
 8004164:	43db      	mvns	r3, r3
 8004166:	69ba      	ldr	r2, [r7, #24]
 8004168:	4013      	ands	r3, r2
 800416a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	f003 0203 	and.w	r2, r3, #3
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	005b      	lsls	r3, r3, #1
 8004178:	fa02 f303 	lsl.w	r3, r2, r3
 800417c:	69ba      	ldr	r2, [r7, #24]
 800417e:	4313      	orrs	r3, r2
 8004180:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	69ba      	ldr	r2, [r7, #24]
 8004186:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004190:	2b00      	cmp	r3, #0
 8004192:	f000 80c0 	beq.w	8004316 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004196:	2300      	movs	r3, #0
 8004198:	60fb      	str	r3, [r7, #12]
 800419a:	4b66      	ldr	r3, [pc, #408]	@ (8004334 <HAL_GPIO_Init+0x324>)
 800419c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800419e:	4a65      	ldr	r2, [pc, #404]	@ (8004334 <HAL_GPIO_Init+0x324>)
 80041a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80041a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80041a6:	4b63      	ldr	r3, [pc, #396]	@ (8004334 <HAL_GPIO_Init+0x324>)
 80041a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80041ae:	60fb      	str	r3, [r7, #12]
 80041b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80041b2:	4a61      	ldr	r2, [pc, #388]	@ (8004338 <HAL_GPIO_Init+0x328>)
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	089b      	lsrs	r3, r3, #2
 80041b8:	3302      	adds	r3, #2
 80041ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	f003 0303 	and.w	r3, r3, #3
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	220f      	movs	r2, #15
 80041ca:	fa02 f303 	lsl.w	r3, r2, r3
 80041ce:	43db      	mvns	r3, r3
 80041d0:	69ba      	ldr	r2, [r7, #24]
 80041d2:	4013      	ands	r3, r2
 80041d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a58      	ldr	r2, [pc, #352]	@ (800433c <HAL_GPIO_Init+0x32c>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d037      	beq.n	800424e <HAL_GPIO_Init+0x23e>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a57      	ldr	r2, [pc, #348]	@ (8004340 <HAL_GPIO_Init+0x330>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d031      	beq.n	800424a <HAL_GPIO_Init+0x23a>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4a56      	ldr	r2, [pc, #344]	@ (8004344 <HAL_GPIO_Init+0x334>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d02b      	beq.n	8004246 <HAL_GPIO_Init+0x236>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4a55      	ldr	r2, [pc, #340]	@ (8004348 <HAL_GPIO_Init+0x338>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d025      	beq.n	8004242 <HAL_GPIO_Init+0x232>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4a54      	ldr	r2, [pc, #336]	@ (800434c <HAL_GPIO_Init+0x33c>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d01f      	beq.n	800423e <HAL_GPIO_Init+0x22e>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	4a53      	ldr	r2, [pc, #332]	@ (8004350 <HAL_GPIO_Init+0x340>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d019      	beq.n	800423a <HAL_GPIO_Init+0x22a>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	4a52      	ldr	r2, [pc, #328]	@ (8004354 <HAL_GPIO_Init+0x344>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d013      	beq.n	8004236 <HAL_GPIO_Init+0x226>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	4a51      	ldr	r2, [pc, #324]	@ (8004358 <HAL_GPIO_Init+0x348>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d00d      	beq.n	8004232 <HAL_GPIO_Init+0x222>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	4a50      	ldr	r2, [pc, #320]	@ (800435c <HAL_GPIO_Init+0x34c>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d007      	beq.n	800422e <HAL_GPIO_Init+0x21e>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	4a4f      	ldr	r2, [pc, #316]	@ (8004360 <HAL_GPIO_Init+0x350>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d101      	bne.n	800422a <HAL_GPIO_Init+0x21a>
 8004226:	2309      	movs	r3, #9
 8004228:	e012      	b.n	8004250 <HAL_GPIO_Init+0x240>
 800422a:	230a      	movs	r3, #10
 800422c:	e010      	b.n	8004250 <HAL_GPIO_Init+0x240>
 800422e:	2308      	movs	r3, #8
 8004230:	e00e      	b.n	8004250 <HAL_GPIO_Init+0x240>
 8004232:	2307      	movs	r3, #7
 8004234:	e00c      	b.n	8004250 <HAL_GPIO_Init+0x240>
 8004236:	2306      	movs	r3, #6
 8004238:	e00a      	b.n	8004250 <HAL_GPIO_Init+0x240>
 800423a:	2305      	movs	r3, #5
 800423c:	e008      	b.n	8004250 <HAL_GPIO_Init+0x240>
 800423e:	2304      	movs	r3, #4
 8004240:	e006      	b.n	8004250 <HAL_GPIO_Init+0x240>
 8004242:	2303      	movs	r3, #3
 8004244:	e004      	b.n	8004250 <HAL_GPIO_Init+0x240>
 8004246:	2302      	movs	r3, #2
 8004248:	e002      	b.n	8004250 <HAL_GPIO_Init+0x240>
 800424a:	2301      	movs	r3, #1
 800424c:	e000      	b.n	8004250 <HAL_GPIO_Init+0x240>
 800424e:	2300      	movs	r3, #0
 8004250:	69fa      	ldr	r2, [r7, #28]
 8004252:	f002 0203 	and.w	r2, r2, #3
 8004256:	0092      	lsls	r2, r2, #2
 8004258:	4093      	lsls	r3, r2
 800425a:	69ba      	ldr	r2, [r7, #24]
 800425c:	4313      	orrs	r3, r2
 800425e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004260:	4935      	ldr	r1, [pc, #212]	@ (8004338 <HAL_GPIO_Init+0x328>)
 8004262:	69fb      	ldr	r3, [r7, #28]
 8004264:	089b      	lsrs	r3, r3, #2
 8004266:	3302      	adds	r3, #2
 8004268:	69ba      	ldr	r2, [r7, #24]
 800426a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800426e:	4b3d      	ldr	r3, [pc, #244]	@ (8004364 <HAL_GPIO_Init+0x354>)
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	43db      	mvns	r3, r3
 8004278:	69ba      	ldr	r2, [r7, #24]
 800427a:	4013      	ands	r3, r2
 800427c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004286:	2b00      	cmp	r3, #0
 8004288:	d003      	beq.n	8004292 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800428a:	69ba      	ldr	r2, [r7, #24]
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	4313      	orrs	r3, r2
 8004290:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004292:	4a34      	ldr	r2, [pc, #208]	@ (8004364 <HAL_GPIO_Init+0x354>)
 8004294:	69bb      	ldr	r3, [r7, #24]
 8004296:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004298:	4b32      	ldr	r3, [pc, #200]	@ (8004364 <HAL_GPIO_Init+0x354>)
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	43db      	mvns	r3, r3
 80042a2:	69ba      	ldr	r2, [r7, #24]
 80042a4:	4013      	ands	r3, r2
 80042a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d003      	beq.n	80042bc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80042b4:	69ba      	ldr	r2, [r7, #24]
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	4313      	orrs	r3, r2
 80042ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80042bc:	4a29      	ldr	r2, [pc, #164]	@ (8004364 <HAL_GPIO_Init+0x354>)
 80042be:	69bb      	ldr	r3, [r7, #24]
 80042c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80042c2:	4b28      	ldr	r3, [pc, #160]	@ (8004364 <HAL_GPIO_Init+0x354>)
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	43db      	mvns	r3, r3
 80042cc:	69ba      	ldr	r2, [r7, #24]
 80042ce:	4013      	ands	r3, r2
 80042d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d003      	beq.n	80042e6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80042de:	69ba      	ldr	r2, [r7, #24]
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	4313      	orrs	r3, r2
 80042e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80042e6:	4a1f      	ldr	r2, [pc, #124]	@ (8004364 <HAL_GPIO_Init+0x354>)
 80042e8:	69bb      	ldr	r3, [r7, #24]
 80042ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80042ec:	4b1d      	ldr	r3, [pc, #116]	@ (8004364 <HAL_GPIO_Init+0x354>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	43db      	mvns	r3, r3
 80042f6:	69ba      	ldr	r2, [r7, #24]
 80042f8:	4013      	ands	r3, r2
 80042fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004304:	2b00      	cmp	r3, #0
 8004306:	d003      	beq.n	8004310 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004308:	69ba      	ldr	r2, [r7, #24]
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	4313      	orrs	r3, r2
 800430e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004310:	4a14      	ldr	r2, [pc, #80]	@ (8004364 <HAL_GPIO_Init+0x354>)
 8004312:	69bb      	ldr	r3, [r7, #24]
 8004314:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	3301      	adds	r3, #1
 800431a:	61fb      	str	r3, [r7, #28]
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	2b0f      	cmp	r3, #15
 8004320:	f67f ae84 	bls.w	800402c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004324:	bf00      	nop
 8004326:	bf00      	nop
 8004328:	3724      	adds	r7, #36	@ 0x24
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr
 8004332:	bf00      	nop
 8004334:	40023800 	.word	0x40023800
 8004338:	40013800 	.word	0x40013800
 800433c:	40020000 	.word	0x40020000
 8004340:	40020400 	.word	0x40020400
 8004344:	40020800 	.word	0x40020800
 8004348:	40020c00 	.word	0x40020c00
 800434c:	40021000 	.word	0x40021000
 8004350:	40021400 	.word	0x40021400
 8004354:	40021800 	.word	0x40021800
 8004358:	40021c00 	.word	0x40021c00
 800435c:	40022000 	.word	0x40022000
 8004360:	40022400 	.word	0x40022400
 8004364:	40013c00 	.word	0x40013c00

08004368 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004368:	b480      	push	{r7}
 800436a:	b087      	sub	sp, #28
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004372:	2300      	movs	r3, #0
 8004374:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8004376:	2300      	movs	r3, #0
 8004378:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800437a:	2300      	movs	r3, #0
 800437c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800437e:	2300      	movs	r3, #0
 8004380:	617b      	str	r3, [r7, #20]
 8004382:	e0d9      	b.n	8004538 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004384:	2201      	movs	r2, #1
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	fa02 f303 	lsl.w	r3, r2, r3
 800438c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800438e:	683a      	ldr	r2, [r7, #0]
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	4013      	ands	r3, r2
 8004394:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8004396:	68fa      	ldr	r2, [r7, #12]
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	429a      	cmp	r2, r3
 800439c:	f040 80c9 	bne.w	8004532 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80043a0:	4a6b      	ldr	r2, [pc, #428]	@ (8004550 <HAL_GPIO_DeInit+0x1e8>)
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	089b      	lsrs	r3, r3, #2
 80043a6:	3302      	adds	r3, #2
 80043a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043ac:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	f003 0303 	and.w	r3, r3, #3
 80043b4:	009b      	lsls	r3, r3, #2
 80043b6:	220f      	movs	r2, #15
 80043b8:	fa02 f303 	lsl.w	r3, r2, r3
 80043bc:	68ba      	ldr	r2, [r7, #8]
 80043be:	4013      	ands	r3, r2
 80043c0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4a63      	ldr	r2, [pc, #396]	@ (8004554 <HAL_GPIO_DeInit+0x1ec>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d037      	beq.n	800443a <HAL_GPIO_DeInit+0xd2>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	4a62      	ldr	r2, [pc, #392]	@ (8004558 <HAL_GPIO_DeInit+0x1f0>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d031      	beq.n	8004436 <HAL_GPIO_DeInit+0xce>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	4a61      	ldr	r2, [pc, #388]	@ (800455c <HAL_GPIO_DeInit+0x1f4>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d02b      	beq.n	8004432 <HAL_GPIO_DeInit+0xca>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	4a60      	ldr	r2, [pc, #384]	@ (8004560 <HAL_GPIO_DeInit+0x1f8>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d025      	beq.n	800442e <HAL_GPIO_DeInit+0xc6>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	4a5f      	ldr	r2, [pc, #380]	@ (8004564 <HAL_GPIO_DeInit+0x1fc>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d01f      	beq.n	800442a <HAL_GPIO_DeInit+0xc2>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	4a5e      	ldr	r2, [pc, #376]	@ (8004568 <HAL_GPIO_DeInit+0x200>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d019      	beq.n	8004426 <HAL_GPIO_DeInit+0xbe>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	4a5d      	ldr	r2, [pc, #372]	@ (800456c <HAL_GPIO_DeInit+0x204>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d013      	beq.n	8004422 <HAL_GPIO_DeInit+0xba>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	4a5c      	ldr	r2, [pc, #368]	@ (8004570 <HAL_GPIO_DeInit+0x208>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d00d      	beq.n	800441e <HAL_GPIO_DeInit+0xb6>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	4a5b      	ldr	r2, [pc, #364]	@ (8004574 <HAL_GPIO_DeInit+0x20c>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d007      	beq.n	800441a <HAL_GPIO_DeInit+0xb2>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	4a5a      	ldr	r2, [pc, #360]	@ (8004578 <HAL_GPIO_DeInit+0x210>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d101      	bne.n	8004416 <HAL_GPIO_DeInit+0xae>
 8004412:	2309      	movs	r3, #9
 8004414:	e012      	b.n	800443c <HAL_GPIO_DeInit+0xd4>
 8004416:	230a      	movs	r3, #10
 8004418:	e010      	b.n	800443c <HAL_GPIO_DeInit+0xd4>
 800441a:	2308      	movs	r3, #8
 800441c:	e00e      	b.n	800443c <HAL_GPIO_DeInit+0xd4>
 800441e:	2307      	movs	r3, #7
 8004420:	e00c      	b.n	800443c <HAL_GPIO_DeInit+0xd4>
 8004422:	2306      	movs	r3, #6
 8004424:	e00a      	b.n	800443c <HAL_GPIO_DeInit+0xd4>
 8004426:	2305      	movs	r3, #5
 8004428:	e008      	b.n	800443c <HAL_GPIO_DeInit+0xd4>
 800442a:	2304      	movs	r3, #4
 800442c:	e006      	b.n	800443c <HAL_GPIO_DeInit+0xd4>
 800442e:	2303      	movs	r3, #3
 8004430:	e004      	b.n	800443c <HAL_GPIO_DeInit+0xd4>
 8004432:	2302      	movs	r3, #2
 8004434:	e002      	b.n	800443c <HAL_GPIO_DeInit+0xd4>
 8004436:	2301      	movs	r3, #1
 8004438:	e000      	b.n	800443c <HAL_GPIO_DeInit+0xd4>
 800443a:	2300      	movs	r3, #0
 800443c:	697a      	ldr	r2, [r7, #20]
 800443e:	f002 0203 	and.w	r2, r2, #3
 8004442:	0092      	lsls	r2, r2, #2
 8004444:	4093      	lsls	r3, r2
 8004446:	68ba      	ldr	r2, [r7, #8]
 8004448:	429a      	cmp	r2, r3
 800444a:	d132      	bne.n	80044b2 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800444c:	4b4b      	ldr	r3, [pc, #300]	@ (800457c <HAL_GPIO_DeInit+0x214>)
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	43db      	mvns	r3, r3
 8004454:	4949      	ldr	r1, [pc, #292]	@ (800457c <HAL_GPIO_DeInit+0x214>)
 8004456:	4013      	ands	r3, r2
 8004458:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800445a:	4b48      	ldr	r3, [pc, #288]	@ (800457c <HAL_GPIO_DeInit+0x214>)
 800445c:	685a      	ldr	r2, [r3, #4]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	43db      	mvns	r3, r3
 8004462:	4946      	ldr	r1, [pc, #280]	@ (800457c <HAL_GPIO_DeInit+0x214>)
 8004464:	4013      	ands	r3, r2
 8004466:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004468:	4b44      	ldr	r3, [pc, #272]	@ (800457c <HAL_GPIO_DeInit+0x214>)
 800446a:	68da      	ldr	r2, [r3, #12]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	43db      	mvns	r3, r3
 8004470:	4942      	ldr	r1, [pc, #264]	@ (800457c <HAL_GPIO_DeInit+0x214>)
 8004472:	4013      	ands	r3, r2
 8004474:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004476:	4b41      	ldr	r3, [pc, #260]	@ (800457c <HAL_GPIO_DeInit+0x214>)
 8004478:	689a      	ldr	r2, [r3, #8]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	43db      	mvns	r3, r3
 800447e:	493f      	ldr	r1, [pc, #252]	@ (800457c <HAL_GPIO_DeInit+0x214>)
 8004480:	4013      	ands	r3, r2
 8004482:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	f003 0303 	and.w	r3, r3, #3
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	220f      	movs	r2, #15
 800448e:	fa02 f303 	lsl.w	r3, r2, r3
 8004492:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004494:	4a2e      	ldr	r2, [pc, #184]	@ (8004550 <HAL_GPIO_DeInit+0x1e8>)
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	089b      	lsrs	r3, r3, #2
 800449a:	3302      	adds	r3, #2
 800449c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	43da      	mvns	r2, r3
 80044a4:	482a      	ldr	r0, [pc, #168]	@ (8004550 <HAL_GPIO_DeInit+0x1e8>)
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	089b      	lsrs	r3, r3, #2
 80044aa:	400a      	ands	r2, r1
 80044ac:	3302      	adds	r3, #2
 80044ae:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	005b      	lsls	r3, r3, #1
 80044ba:	2103      	movs	r1, #3
 80044bc:	fa01 f303 	lsl.w	r3, r1, r3
 80044c0:	43db      	mvns	r3, r3
 80044c2:	401a      	ands	r2, r3
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	08da      	lsrs	r2, r3, #3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	3208      	adds	r2, #8
 80044d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	f003 0307 	and.w	r3, r3, #7
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	220f      	movs	r2, #15
 80044de:	fa02 f303 	lsl.w	r3, r2, r3
 80044e2:	43db      	mvns	r3, r3
 80044e4:	697a      	ldr	r2, [r7, #20]
 80044e6:	08d2      	lsrs	r2, r2, #3
 80044e8:	4019      	ands	r1, r3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	3208      	adds	r2, #8
 80044ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	68da      	ldr	r2, [r3, #12]
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	005b      	lsls	r3, r3, #1
 80044fa:	2103      	movs	r1, #3
 80044fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004500:	43db      	mvns	r3, r3
 8004502:	401a      	ands	r2, r3
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	685a      	ldr	r2, [r3, #4]
 800450c:	2101      	movs	r1, #1
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	fa01 f303 	lsl.w	r3, r1, r3
 8004514:	43db      	mvns	r3, r3
 8004516:	401a      	ands	r2, r3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	689a      	ldr	r2, [r3, #8]
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	005b      	lsls	r3, r3, #1
 8004524:	2103      	movs	r1, #3
 8004526:	fa01 f303 	lsl.w	r3, r1, r3
 800452a:	43db      	mvns	r3, r3
 800452c:	401a      	ands	r2, r3
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	3301      	adds	r3, #1
 8004536:	617b      	str	r3, [r7, #20]
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	2b0f      	cmp	r3, #15
 800453c:	f67f af22 	bls.w	8004384 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004540:	bf00      	nop
 8004542:	bf00      	nop
 8004544:	371c      	adds	r7, #28
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr
 800454e:	bf00      	nop
 8004550:	40013800 	.word	0x40013800
 8004554:	40020000 	.word	0x40020000
 8004558:	40020400 	.word	0x40020400
 800455c:	40020800 	.word	0x40020800
 8004560:	40020c00 	.word	0x40020c00
 8004564:	40021000 	.word	0x40021000
 8004568:	40021400 	.word	0x40021400
 800456c:	40021800 	.word	0x40021800
 8004570:	40021c00 	.word	0x40021c00
 8004574:	40022000 	.word	0x40022000
 8004578:	40022400 	.word	0x40022400
 800457c:	40013c00 	.word	0x40013c00

08004580 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004580:	b480      	push	{r7}
 8004582:	b085      	sub	sp, #20
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	460b      	mov	r3, r1
 800458a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	691a      	ldr	r2, [r3, #16]
 8004590:	887b      	ldrh	r3, [r7, #2]
 8004592:	4013      	ands	r3, r2
 8004594:	2b00      	cmp	r3, #0
 8004596:	d002      	beq.n	800459e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004598:	2301      	movs	r3, #1
 800459a:	73fb      	strb	r3, [r7, #15]
 800459c:	e001      	b.n	80045a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800459e:	2300      	movs	r3, #0
 80045a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80045a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3714      	adds	r7, #20
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr

080045b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b083      	sub	sp, #12
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	460b      	mov	r3, r1
 80045ba:	807b      	strh	r3, [r7, #2]
 80045bc:	4613      	mov	r3, r2
 80045be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80045c0:	787b      	ldrb	r3, [r7, #1]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d003      	beq.n	80045ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80045c6:	887a      	ldrh	r2, [r7, #2]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80045cc:	e003      	b.n	80045d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80045ce:	887b      	ldrh	r3, [r7, #2]
 80045d0:	041a      	lsls	r2, r3, #16
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	619a      	str	r2, [r3, #24]
}
 80045d6:	bf00      	nop
 80045d8:	370c      	adds	r7, #12
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr
	...

080045e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b084      	sub	sp, #16
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d101      	bne.n	80045f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e12b      	b.n	800484e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d106      	bne.n	8004610 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f7fc fb7e 	bl	8000d0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2224      	movs	r2, #36	@ 0x24
 8004614:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f022 0201 	bic.w	r2, r2, #1
 8004626:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004636:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004646:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004648:	f002 f83a 	bl	80066c0 <HAL_RCC_GetPCLK1Freq>
 800464c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	4a81      	ldr	r2, [pc, #516]	@ (8004858 <HAL_I2C_Init+0x274>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d807      	bhi.n	8004668 <HAL_I2C_Init+0x84>
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	4a80      	ldr	r2, [pc, #512]	@ (800485c <HAL_I2C_Init+0x278>)
 800465c:	4293      	cmp	r3, r2
 800465e:	bf94      	ite	ls
 8004660:	2301      	movls	r3, #1
 8004662:	2300      	movhi	r3, #0
 8004664:	b2db      	uxtb	r3, r3
 8004666:	e006      	b.n	8004676 <HAL_I2C_Init+0x92>
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	4a7d      	ldr	r2, [pc, #500]	@ (8004860 <HAL_I2C_Init+0x27c>)
 800466c:	4293      	cmp	r3, r2
 800466e:	bf94      	ite	ls
 8004670:	2301      	movls	r3, #1
 8004672:	2300      	movhi	r3, #0
 8004674:	b2db      	uxtb	r3, r3
 8004676:	2b00      	cmp	r3, #0
 8004678:	d001      	beq.n	800467e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e0e7      	b.n	800484e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	4a78      	ldr	r2, [pc, #480]	@ (8004864 <HAL_I2C_Init+0x280>)
 8004682:	fba2 2303 	umull	r2, r3, r2, r3
 8004686:	0c9b      	lsrs	r3, r3, #18
 8004688:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	68ba      	ldr	r2, [r7, #8]
 800469a:	430a      	orrs	r2, r1
 800469c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	6a1b      	ldr	r3, [r3, #32]
 80046a4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	4a6a      	ldr	r2, [pc, #424]	@ (8004858 <HAL_I2C_Init+0x274>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d802      	bhi.n	80046b8 <HAL_I2C_Init+0xd4>
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	3301      	adds	r3, #1
 80046b6:	e009      	b.n	80046cc <HAL_I2C_Init+0xe8>
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80046be:	fb02 f303 	mul.w	r3, r2, r3
 80046c2:	4a69      	ldr	r2, [pc, #420]	@ (8004868 <HAL_I2C_Init+0x284>)
 80046c4:	fba2 2303 	umull	r2, r3, r2, r3
 80046c8:	099b      	lsrs	r3, r3, #6
 80046ca:	3301      	adds	r3, #1
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	6812      	ldr	r2, [r2, #0]
 80046d0:	430b      	orrs	r3, r1
 80046d2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	69db      	ldr	r3, [r3, #28]
 80046da:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80046de:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	495c      	ldr	r1, [pc, #368]	@ (8004858 <HAL_I2C_Init+0x274>)
 80046e8:	428b      	cmp	r3, r1
 80046ea:	d819      	bhi.n	8004720 <HAL_I2C_Init+0x13c>
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	1e59      	subs	r1, r3, #1
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	005b      	lsls	r3, r3, #1
 80046f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80046fa:	1c59      	adds	r1, r3, #1
 80046fc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004700:	400b      	ands	r3, r1
 8004702:	2b00      	cmp	r3, #0
 8004704:	d00a      	beq.n	800471c <HAL_I2C_Init+0x138>
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	1e59      	subs	r1, r3, #1
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	005b      	lsls	r3, r3, #1
 8004710:	fbb1 f3f3 	udiv	r3, r1, r3
 8004714:	3301      	adds	r3, #1
 8004716:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800471a:	e051      	b.n	80047c0 <HAL_I2C_Init+0x1dc>
 800471c:	2304      	movs	r3, #4
 800471e:	e04f      	b.n	80047c0 <HAL_I2C_Init+0x1dc>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d111      	bne.n	800474c <HAL_I2C_Init+0x168>
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	1e58      	subs	r0, r3, #1
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6859      	ldr	r1, [r3, #4]
 8004730:	460b      	mov	r3, r1
 8004732:	005b      	lsls	r3, r3, #1
 8004734:	440b      	add	r3, r1
 8004736:	fbb0 f3f3 	udiv	r3, r0, r3
 800473a:	3301      	adds	r3, #1
 800473c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004740:	2b00      	cmp	r3, #0
 8004742:	bf0c      	ite	eq
 8004744:	2301      	moveq	r3, #1
 8004746:	2300      	movne	r3, #0
 8004748:	b2db      	uxtb	r3, r3
 800474a:	e012      	b.n	8004772 <HAL_I2C_Init+0x18e>
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	1e58      	subs	r0, r3, #1
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6859      	ldr	r1, [r3, #4]
 8004754:	460b      	mov	r3, r1
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	440b      	add	r3, r1
 800475a:	0099      	lsls	r1, r3, #2
 800475c:	440b      	add	r3, r1
 800475e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004762:	3301      	adds	r3, #1
 8004764:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004768:	2b00      	cmp	r3, #0
 800476a:	bf0c      	ite	eq
 800476c:	2301      	moveq	r3, #1
 800476e:	2300      	movne	r3, #0
 8004770:	b2db      	uxtb	r3, r3
 8004772:	2b00      	cmp	r3, #0
 8004774:	d001      	beq.n	800477a <HAL_I2C_Init+0x196>
 8004776:	2301      	movs	r3, #1
 8004778:	e022      	b.n	80047c0 <HAL_I2C_Init+0x1dc>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d10e      	bne.n	80047a0 <HAL_I2C_Init+0x1bc>
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	1e58      	subs	r0, r3, #1
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6859      	ldr	r1, [r3, #4]
 800478a:	460b      	mov	r3, r1
 800478c:	005b      	lsls	r3, r3, #1
 800478e:	440b      	add	r3, r1
 8004790:	fbb0 f3f3 	udiv	r3, r0, r3
 8004794:	3301      	adds	r3, #1
 8004796:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800479a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800479e:	e00f      	b.n	80047c0 <HAL_I2C_Init+0x1dc>
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	1e58      	subs	r0, r3, #1
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6859      	ldr	r1, [r3, #4]
 80047a8:	460b      	mov	r3, r1
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	440b      	add	r3, r1
 80047ae:	0099      	lsls	r1, r3, #2
 80047b0:	440b      	add	r3, r1
 80047b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80047b6:	3301      	adds	r3, #1
 80047b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047bc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80047c0:	6879      	ldr	r1, [r7, #4]
 80047c2:	6809      	ldr	r1, [r1, #0]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	69da      	ldr	r2, [r3, #28]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a1b      	ldr	r3, [r3, #32]
 80047da:	431a      	orrs	r2, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	430a      	orrs	r2, r1
 80047e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80047ee:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	6911      	ldr	r1, [r2, #16]
 80047f6:	687a      	ldr	r2, [r7, #4]
 80047f8:	68d2      	ldr	r2, [r2, #12]
 80047fa:	4311      	orrs	r1, r2
 80047fc:	687a      	ldr	r2, [r7, #4]
 80047fe:	6812      	ldr	r2, [r2, #0]
 8004800:	430b      	orrs	r3, r1
 8004802:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	68db      	ldr	r3, [r3, #12]
 800480a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	695a      	ldr	r2, [r3, #20]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	699b      	ldr	r3, [r3, #24]
 8004816:	431a      	orrs	r2, r3
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	430a      	orrs	r2, r1
 800481e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f042 0201 	orr.w	r2, r2, #1
 800482e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2220      	movs	r2, #32
 800483a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2200      	movs	r2, #0
 8004842:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2200      	movs	r2, #0
 8004848:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800484c:	2300      	movs	r3, #0
}
 800484e:	4618      	mov	r0, r3
 8004850:	3710      	adds	r7, #16
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
 8004856:	bf00      	nop
 8004858:	000186a0 	.word	0x000186a0
 800485c:	001e847f 	.word	0x001e847f
 8004860:	003d08ff 	.word	0x003d08ff
 8004864:	431bde83 	.word	0x431bde83
 8004868:	10624dd3 	.word	0x10624dd3

0800486c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b082      	sub	sp, #8
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d101      	bne.n	800487e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e021      	b.n	80048c2 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2224      	movs	r2, #36	@ 0x24
 8004882:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f022 0201 	bic.w	r2, r2, #1
 8004894:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f7fc faa2 	bl	8000de0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2200      	movs	r2, #0
 80048a0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2200      	movs	r2, #0
 80048b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2200      	movs	r2, #0
 80048bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80048c0:	2300      	movs	r3, #0
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3708      	adds	r7, #8
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}
	...

080048cc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b088      	sub	sp, #32
 80048d0:	af02      	add	r7, sp, #8
 80048d2:	60f8      	str	r0, [r7, #12]
 80048d4:	4608      	mov	r0, r1
 80048d6:	4611      	mov	r1, r2
 80048d8:	461a      	mov	r2, r3
 80048da:	4603      	mov	r3, r0
 80048dc:	817b      	strh	r3, [r7, #10]
 80048de:	460b      	mov	r3, r1
 80048e0:	813b      	strh	r3, [r7, #8]
 80048e2:	4613      	mov	r3, r2
 80048e4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80048e6:	f7fe fe07 	bl	80034f8 <HAL_GetTick>
 80048ea:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	2b20      	cmp	r3, #32
 80048f6:	f040 80d9 	bne.w	8004aac <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	9300      	str	r3, [sp, #0]
 80048fe:	2319      	movs	r3, #25
 8004900:	2201      	movs	r2, #1
 8004902:	496d      	ldr	r1, [pc, #436]	@ (8004ab8 <HAL_I2C_Mem_Write+0x1ec>)
 8004904:	68f8      	ldr	r0, [r7, #12]
 8004906:	f000 fc99 	bl	800523c <I2C_WaitOnFlagUntilTimeout>
 800490a:	4603      	mov	r3, r0
 800490c:	2b00      	cmp	r3, #0
 800490e:	d001      	beq.n	8004914 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004910:	2302      	movs	r3, #2
 8004912:	e0cc      	b.n	8004aae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800491a:	2b01      	cmp	r3, #1
 800491c:	d101      	bne.n	8004922 <HAL_I2C_Mem_Write+0x56>
 800491e:	2302      	movs	r3, #2
 8004920:	e0c5      	b.n	8004aae <HAL_I2C_Mem_Write+0x1e2>
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2201      	movs	r2, #1
 8004926:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 0301 	and.w	r3, r3, #1
 8004934:	2b01      	cmp	r3, #1
 8004936:	d007      	beq.n	8004948 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f042 0201 	orr.w	r2, r2, #1
 8004946:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004956:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2221      	movs	r2, #33	@ 0x21
 800495c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2240      	movs	r2, #64	@ 0x40
 8004964:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2200      	movs	r2, #0
 800496c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	6a3a      	ldr	r2, [r7, #32]
 8004972:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004978:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800497e:	b29a      	uxth	r2, r3
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	4a4d      	ldr	r2, [pc, #308]	@ (8004abc <HAL_I2C_Mem_Write+0x1f0>)
 8004988:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800498a:	88f8      	ldrh	r0, [r7, #6]
 800498c:	893a      	ldrh	r2, [r7, #8]
 800498e:	8979      	ldrh	r1, [r7, #10]
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	9301      	str	r3, [sp, #4]
 8004994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004996:	9300      	str	r3, [sp, #0]
 8004998:	4603      	mov	r3, r0
 800499a:	68f8      	ldr	r0, [r7, #12]
 800499c:	f000 fad0 	bl	8004f40 <I2C_RequestMemoryWrite>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d052      	beq.n	8004a4c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	e081      	b.n	8004aae <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049aa:	697a      	ldr	r2, [r7, #20]
 80049ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80049ae:	68f8      	ldr	r0, [r7, #12]
 80049b0:	f000 fd5e 	bl	8005470 <I2C_WaitOnTXEFlagUntilTimeout>
 80049b4:	4603      	mov	r3, r0
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d00d      	beq.n	80049d6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049be:	2b04      	cmp	r3, #4
 80049c0:	d107      	bne.n	80049d2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049d0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e06b      	b.n	8004aae <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049da:	781a      	ldrb	r2, [r3, #0]
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049e6:	1c5a      	adds	r2, r3, #1
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049f0:	3b01      	subs	r3, #1
 80049f2:	b29a      	uxth	r2, r3
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	3b01      	subs	r3, #1
 8004a00:	b29a      	uxth	r2, r3
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	695b      	ldr	r3, [r3, #20]
 8004a0c:	f003 0304 	and.w	r3, r3, #4
 8004a10:	2b04      	cmp	r3, #4
 8004a12:	d11b      	bne.n	8004a4c <HAL_I2C_Mem_Write+0x180>
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d017      	beq.n	8004a4c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a20:	781a      	ldrb	r2, [r3, #0]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a2c:	1c5a      	adds	r2, r3, #1
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a36:	3b01      	subs	r3, #1
 8004a38:	b29a      	uxth	r2, r3
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	3b01      	subs	r3, #1
 8004a46:	b29a      	uxth	r2, r3
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d1aa      	bne.n	80049aa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a54:	697a      	ldr	r2, [r7, #20]
 8004a56:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004a58:	68f8      	ldr	r0, [r7, #12]
 8004a5a:	f000 fd51 	bl	8005500 <I2C_WaitOnBTFFlagUntilTimeout>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d00d      	beq.n	8004a80 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a68:	2b04      	cmp	r3, #4
 8004a6a:	d107      	bne.n	8004a7c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a7a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e016      	b.n	8004aae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2220      	movs	r2, #32
 8004a94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	e000      	b.n	8004aae <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004aac:	2302      	movs	r3, #2
  }
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3718      	adds	r7, #24
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	00100002 	.word	0x00100002
 8004abc:	ffff0000 	.word	0xffff0000

08004ac0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b08c      	sub	sp, #48	@ 0x30
 8004ac4:	af02      	add	r7, sp, #8
 8004ac6:	60f8      	str	r0, [r7, #12]
 8004ac8:	4608      	mov	r0, r1
 8004aca:	4611      	mov	r1, r2
 8004acc:	461a      	mov	r2, r3
 8004ace:	4603      	mov	r3, r0
 8004ad0:	817b      	strh	r3, [r7, #10]
 8004ad2:	460b      	mov	r3, r1
 8004ad4:	813b      	strh	r3, [r7, #8]
 8004ad6:	4613      	mov	r3, r2
 8004ad8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004ada:	f7fe fd0d 	bl	80034f8 <HAL_GetTick>
 8004ade:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	2b20      	cmp	r3, #32
 8004aea:	f040 8214 	bne.w	8004f16 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004af0:	9300      	str	r3, [sp, #0]
 8004af2:	2319      	movs	r3, #25
 8004af4:	2201      	movs	r2, #1
 8004af6:	497b      	ldr	r1, [pc, #492]	@ (8004ce4 <HAL_I2C_Mem_Read+0x224>)
 8004af8:	68f8      	ldr	r0, [r7, #12]
 8004afa:	f000 fb9f 	bl	800523c <I2C_WaitOnFlagUntilTimeout>
 8004afe:	4603      	mov	r3, r0
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d001      	beq.n	8004b08 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004b04:	2302      	movs	r3, #2
 8004b06:	e207      	b.n	8004f18 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d101      	bne.n	8004b16 <HAL_I2C_Mem_Read+0x56>
 8004b12:	2302      	movs	r3, #2
 8004b14:	e200      	b.n	8004f18 <HAL_I2C_Mem_Read+0x458>
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2201      	movs	r2, #1
 8004b1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 0301 	and.w	r3, r3, #1
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d007      	beq.n	8004b3c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f042 0201 	orr.w	r2, r2, #1
 8004b3a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b4a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2222      	movs	r2, #34	@ 0x22
 8004b50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2240      	movs	r2, #64	@ 0x40
 8004b58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b66:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004b6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b72:	b29a      	uxth	r2, r3
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	4a5b      	ldr	r2, [pc, #364]	@ (8004ce8 <HAL_I2C_Mem_Read+0x228>)
 8004b7c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004b7e:	88f8      	ldrh	r0, [r7, #6]
 8004b80:	893a      	ldrh	r2, [r7, #8]
 8004b82:	8979      	ldrh	r1, [r7, #10]
 8004b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b86:	9301      	str	r3, [sp, #4]
 8004b88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b8a:	9300      	str	r3, [sp, #0]
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	68f8      	ldr	r0, [r7, #12]
 8004b90:	f000 fa6c 	bl	800506c <I2C_RequestMemoryRead>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d001      	beq.n	8004b9e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e1bc      	b.n	8004f18 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d113      	bne.n	8004bce <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	623b      	str	r3, [r7, #32]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	695b      	ldr	r3, [r3, #20]
 8004bb0:	623b      	str	r3, [r7, #32]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	699b      	ldr	r3, [r3, #24]
 8004bb8:	623b      	str	r3, [r7, #32]
 8004bba:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004bca:	601a      	str	r2, [r3, #0]
 8004bcc:	e190      	b.n	8004ef0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d11b      	bne.n	8004c0e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004be4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004be6:	2300      	movs	r3, #0
 8004be8:	61fb      	str	r3, [r7, #28]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	695b      	ldr	r3, [r3, #20]
 8004bf0:	61fb      	str	r3, [r7, #28]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	699b      	ldr	r3, [r3, #24]
 8004bf8:	61fb      	str	r3, [r7, #28]
 8004bfa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c0a:	601a      	str	r2, [r3, #0]
 8004c0c:	e170      	b.n	8004ef0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c12:	2b02      	cmp	r3, #2
 8004c14:	d11b      	bne.n	8004c4e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c24:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c34:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c36:	2300      	movs	r3, #0
 8004c38:	61bb      	str	r3, [r7, #24]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	695b      	ldr	r3, [r3, #20]
 8004c40:	61bb      	str	r3, [r7, #24]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	699b      	ldr	r3, [r3, #24]
 8004c48:	61bb      	str	r3, [r7, #24]
 8004c4a:	69bb      	ldr	r3, [r7, #24]
 8004c4c:	e150      	b.n	8004ef0 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c4e:	2300      	movs	r3, #0
 8004c50:	617b      	str	r3, [r7, #20]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	695b      	ldr	r3, [r3, #20]
 8004c58:	617b      	str	r3, [r7, #20]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	699b      	ldr	r3, [r3, #24]
 8004c60:	617b      	str	r3, [r7, #20]
 8004c62:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004c64:	e144      	b.n	8004ef0 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c6a:	2b03      	cmp	r3, #3
 8004c6c:	f200 80f1 	bhi.w	8004e52 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d123      	bne.n	8004cc0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c7a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004c7c:	68f8      	ldr	r0, [r7, #12]
 8004c7e:	f000 fc87 	bl	8005590 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004c82:	4603      	mov	r3, r0
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d001      	beq.n	8004c8c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	e145      	b.n	8004f18 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	691a      	ldr	r2, [r3, #16]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c96:	b2d2      	uxtb	r2, r2
 8004c98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c9e:	1c5a      	adds	r2, r3, #1
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ca8:	3b01      	subs	r3, #1
 8004caa:	b29a      	uxth	r2, r3
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	3b01      	subs	r3, #1
 8004cb8:	b29a      	uxth	r2, r3
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004cbe:	e117      	b.n	8004ef0 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cc4:	2b02      	cmp	r3, #2
 8004cc6:	d14e      	bne.n	8004d66 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cca:	9300      	str	r3, [sp, #0]
 8004ccc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cce:	2200      	movs	r2, #0
 8004cd0:	4906      	ldr	r1, [pc, #24]	@ (8004cec <HAL_I2C_Mem_Read+0x22c>)
 8004cd2:	68f8      	ldr	r0, [r7, #12]
 8004cd4:	f000 fab2 	bl	800523c <I2C_WaitOnFlagUntilTimeout>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d008      	beq.n	8004cf0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e11a      	b.n	8004f18 <HAL_I2C_Mem_Read+0x458>
 8004ce2:	bf00      	nop
 8004ce4:	00100002 	.word	0x00100002
 8004ce8:	ffff0000 	.word	0xffff0000
 8004cec:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004cfe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	691a      	ldr	r2, [r3, #16]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d0a:	b2d2      	uxtb	r2, r2
 8004d0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d12:	1c5a      	adds	r2, r3, #1
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d1c:	3b01      	subs	r3, #1
 8004d1e:	b29a      	uxth	r2, r3
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	3b01      	subs	r3, #1
 8004d2c:	b29a      	uxth	r2, r3
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	691a      	ldr	r2, [r3, #16]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d3c:	b2d2      	uxtb	r2, r2
 8004d3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d44:	1c5a      	adds	r2, r3, #1
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d4e:	3b01      	subs	r3, #1
 8004d50:	b29a      	uxth	r2, r3
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	3b01      	subs	r3, #1
 8004d5e:	b29a      	uxth	r2, r3
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004d64:	e0c4      	b.n	8004ef0 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d68:	9300      	str	r3, [sp, #0]
 8004d6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	496c      	ldr	r1, [pc, #432]	@ (8004f20 <HAL_I2C_Mem_Read+0x460>)
 8004d70:	68f8      	ldr	r0, [r7, #12]
 8004d72:	f000 fa63 	bl	800523c <I2C_WaitOnFlagUntilTimeout>
 8004d76:	4603      	mov	r3, r0
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d001      	beq.n	8004d80 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e0cb      	b.n	8004f18 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d8e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	691a      	ldr	r2, [r3, #16]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d9a:	b2d2      	uxtb	r2, r2
 8004d9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004da2:	1c5a      	adds	r2, r3, #1
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dac:	3b01      	subs	r3, #1
 8004dae:	b29a      	uxth	r2, r3
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	3b01      	subs	r3, #1
 8004dbc:	b29a      	uxth	r2, r3
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dc4:	9300      	str	r3, [sp, #0]
 8004dc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dc8:	2200      	movs	r2, #0
 8004dca:	4955      	ldr	r1, [pc, #340]	@ (8004f20 <HAL_I2C_Mem_Read+0x460>)
 8004dcc:	68f8      	ldr	r0, [r7, #12]
 8004dce:	f000 fa35 	bl	800523c <I2C_WaitOnFlagUntilTimeout>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d001      	beq.n	8004ddc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	e09d      	b.n	8004f18 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004dea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	691a      	ldr	r2, [r3, #16]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004df6:	b2d2      	uxtb	r2, r2
 8004df8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dfe:	1c5a      	adds	r2, r3, #1
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e08:	3b01      	subs	r3, #1
 8004e0a:	b29a      	uxth	r2, r3
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	3b01      	subs	r3, #1
 8004e18:	b29a      	uxth	r2, r3
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	691a      	ldr	r2, [r3, #16]
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e28:	b2d2      	uxtb	r2, r2
 8004e2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e30:	1c5a      	adds	r2, r3, #1
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e3a:	3b01      	subs	r3, #1
 8004e3c:	b29a      	uxth	r2, r3
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	3b01      	subs	r3, #1
 8004e4a:	b29a      	uxth	r2, r3
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004e50:	e04e      	b.n	8004ef0 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e54:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004e56:	68f8      	ldr	r0, [r7, #12]
 8004e58:	f000 fb9a 	bl	8005590 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d001      	beq.n	8004e66 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	e058      	b.n	8004f18 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	691a      	ldr	r2, [r3, #16]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e70:	b2d2      	uxtb	r2, r2
 8004e72:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e78:	1c5a      	adds	r2, r3, #1
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e82:	3b01      	subs	r3, #1
 8004e84:	b29a      	uxth	r2, r3
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	3b01      	subs	r3, #1
 8004e92:	b29a      	uxth	r2, r3
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	695b      	ldr	r3, [r3, #20]
 8004e9e:	f003 0304 	and.w	r3, r3, #4
 8004ea2:	2b04      	cmp	r3, #4
 8004ea4:	d124      	bne.n	8004ef0 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004eaa:	2b03      	cmp	r3, #3
 8004eac:	d107      	bne.n	8004ebe <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ebc:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	691a      	ldr	r2, [r3, #16]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ec8:	b2d2      	uxtb	r2, r2
 8004eca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ed0:	1c5a      	adds	r2, r3, #1
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004eda:	3b01      	subs	r3, #1
 8004edc:	b29a      	uxth	r2, r3
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	3b01      	subs	r3, #1
 8004eea:	b29a      	uxth	r2, r3
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	f47f aeb6 	bne.w	8004c66 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2220      	movs	r2, #32
 8004efe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2200      	movs	r2, #0
 8004f06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004f12:	2300      	movs	r3, #0
 8004f14:	e000      	b.n	8004f18 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004f16:	2302      	movs	r3, #2
  }
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3728      	adds	r7, #40	@ 0x28
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}
 8004f20:	00010004 	.word	0x00010004

08004f24 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b083      	sub	sp, #12
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f32:	b2db      	uxtb	r3, r3
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	370c      	adds	r7, #12
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr

08004f40 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b088      	sub	sp, #32
 8004f44:	af02      	add	r7, sp, #8
 8004f46:	60f8      	str	r0, [r7, #12]
 8004f48:	4608      	mov	r0, r1
 8004f4a:	4611      	mov	r1, r2
 8004f4c:	461a      	mov	r2, r3
 8004f4e:	4603      	mov	r3, r0
 8004f50:	817b      	strh	r3, [r7, #10]
 8004f52:	460b      	mov	r3, r1
 8004f54:	813b      	strh	r3, [r7, #8]
 8004f56:	4613      	mov	r3, r2
 8004f58:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004f68:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f6c:	9300      	str	r3, [sp, #0]
 8004f6e:	6a3b      	ldr	r3, [r7, #32]
 8004f70:	2200      	movs	r2, #0
 8004f72:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004f76:	68f8      	ldr	r0, [r7, #12]
 8004f78:	f000 f960 	bl	800523c <I2C_WaitOnFlagUntilTimeout>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d00d      	beq.n	8004f9e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f90:	d103      	bne.n	8004f9a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004f98:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004f9a:	2303      	movs	r3, #3
 8004f9c:	e05f      	b.n	800505e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004f9e:	897b      	ldrh	r3, [r7, #10]
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004fac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fb0:	6a3a      	ldr	r2, [r7, #32]
 8004fb2:	492d      	ldr	r1, [pc, #180]	@ (8005068 <I2C_RequestMemoryWrite+0x128>)
 8004fb4:	68f8      	ldr	r0, [r7, #12]
 8004fb6:	f000 f9bb 	bl	8005330 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d001      	beq.n	8004fc4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	e04c      	b.n	800505e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	617b      	str	r3, [r7, #20]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	695b      	ldr	r3, [r3, #20]
 8004fce:	617b      	str	r3, [r7, #20]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	699b      	ldr	r3, [r3, #24]
 8004fd6:	617b      	str	r3, [r7, #20]
 8004fd8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fdc:	6a39      	ldr	r1, [r7, #32]
 8004fde:	68f8      	ldr	r0, [r7, #12]
 8004fe0:	f000 fa46 	bl	8005470 <I2C_WaitOnTXEFlagUntilTimeout>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d00d      	beq.n	8005006 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fee:	2b04      	cmp	r3, #4
 8004ff0:	d107      	bne.n	8005002 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005000:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	e02b      	b.n	800505e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005006:	88fb      	ldrh	r3, [r7, #6]
 8005008:	2b01      	cmp	r3, #1
 800500a:	d105      	bne.n	8005018 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800500c:	893b      	ldrh	r3, [r7, #8]
 800500e:	b2da      	uxtb	r2, r3
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	611a      	str	r2, [r3, #16]
 8005016:	e021      	b.n	800505c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005018:	893b      	ldrh	r3, [r7, #8]
 800501a:	0a1b      	lsrs	r3, r3, #8
 800501c:	b29b      	uxth	r3, r3
 800501e:	b2da      	uxtb	r2, r3
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005026:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005028:	6a39      	ldr	r1, [r7, #32]
 800502a:	68f8      	ldr	r0, [r7, #12]
 800502c:	f000 fa20 	bl	8005470 <I2C_WaitOnTXEFlagUntilTimeout>
 8005030:	4603      	mov	r3, r0
 8005032:	2b00      	cmp	r3, #0
 8005034:	d00d      	beq.n	8005052 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800503a:	2b04      	cmp	r3, #4
 800503c:	d107      	bne.n	800504e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800504c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	e005      	b.n	800505e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005052:	893b      	ldrh	r3, [r7, #8]
 8005054:	b2da      	uxtb	r2, r3
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800505c:	2300      	movs	r3, #0
}
 800505e:	4618      	mov	r0, r3
 8005060:	3718      	adds	r7, #24
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}
 8005066:	bf00      	nop
 8005068:	00010002 	.word	0x00010002

0800506c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b088      	sub	sp, #32
 8005070:	af02      	add	r7, sp, #8
 8005072:	60f8      	str	r0, [r7, #12]
 8005074:	4608      	mov	r0, r1
 8005076:	4611      	mov	r1, r2
 8005078:	461a      	mov	r2, r3
 800507a:	4603      	mov	r3, r0
 800507c:	817b      	strh	r3, [r7, #10]
 800507e:	460b      	mov	r3, r1
 8005080:	813b      	strh	r3, [r7, #8]
 8005082:	4613      	mov	r3, r2
 8005084:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005094:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80050a4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80050a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050a8:	9300      	str	r3, [sp, #0]
 80050aa:	6a3b      	ldr	r3, [r7, #32]
 80050ac:	2200      	movs	r2, #0
 80050ae:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80050b2:	68f8      	ldr	r0, [r7, #12]
 80050b4:	f000 f8c2 	bl	800523c <I2C_WaitOnFlagUntilTimeout>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d00d      	beq.n	80050da <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80050cc:	d103      	bne.n	80050d6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80050d4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80050d6:	2303      	movs	r3, #3
 80050d8:	e0aa      	b.n	8005230 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80050da:	897b      	ldrh	r3, [r7, #10]
 80050dc:	b2db      	uxtb	r3, r3
 80050de:	461a      	mov	r2, r3
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80050e8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80050ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ec:	6a3a      	ldr	r2, [r7, #32]
 80050ee:	4952      	ldr	r1, [pc, #328]	@ (8005238 <I2C_RequestMemoryRead+0x1cc>)
 80050f0:	68f8      	ldr	r0, [r7, #12]
 80050f2:	f000 f91d 	bl	8005330 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80050f6:	4603      	mov	r3, r0
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d001      	beq.n	8005100 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	e097      	b.n	8005230 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005100:	2300      	movs	r3, #0
 8005102:	617b      	str	r3, [r7, #20]
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	695b      	ldr	r3, [r3, #20]
 800510a:	617b      	str	r3, [r7, #20]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	699b      	ldr	r3, [r3, #24]
 8005112:	617b      	str	r3, [r7, #20]
 8005114:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005116:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005118:	6a39      	ldr	r1, [r7, #32]
 800511a:	68f8      	ldr	r0, [r7, #12]
 800511c:	f000 f9a8 	bl	8005470 <I2C_WaitOnTXEFlagUntilTimeout>
 8005120:	4603      	mov	r3, r0
 8005122:	2b00      	cmp	r3, #0
 8005124:	d00d      	beq.n	8005142 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800512a:	2b04      	cmp	r3, #4
 800512c:	d107      	bne.n	800513e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800513c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	e076      	b.n	8005230 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005142:	88fb      	ldrh	r3, [r7, #6]
 8005144:	2b01      	cmp	r3, #1
 8005146:	d105      	bne.n	8005154 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005148:	893b      	ldrh	r3, [r7, #8]
 800514a:	b2da      	uxtb	r2, r3
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	611a      	str	r2, [r3, #16]
 8005152:	e021      	b.n	8005198 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005154:	893b      	ldrh	r3, [r7, #8]
 8005156:	0a1b      	lsrs	r3, r3, #8
 8005158:	b29b      	uxth	r3, r3
 800515a:	b2da      	uxtb	r2, r3
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005162:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005164:	6a39      	ldr	r1, [r7, #32]
 8005166:	68f8      	ldr	r0, [r7, #12]
 8005168:	f000 f982 	bl	8005470 <I2C_WaitOnTXEFlagUntilTimeout>
 800516c:	4603      	mov	r3, r0
 800516e:	2b00      	cmp	r3, #0
 8005170:	d00d      	beq.n	800518e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005176:	2b04      	cmp	r3, #4
 8005178:	d107      	bne.n	800518a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005188:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	e050      	b.n	8005230 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800518e:	893b      	ldrh	r3, [r7, #8]
 8005190:	b2da      	uxtb	r2, r3
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005198:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800519a:	6a39      	ldr	r1, [r7, #32]
 800519c:	68f8      	ldr	r0, [r7, #12]
 800519e:	f000 f967 	bl	8005470 <I2C_WaitOnTXEFlagUntilTimeout>
 80051a2:	4603      	mov	r3, r0
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d00d      	beq.n	80051c4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051ac:	2b04      	cmp	r3, #4
 80051ae:	d107      	bne.n	80051c0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80051be:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	e035      	b.n	8005230 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80051d2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80051d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051d6:	9300      	str	r3, [sp, #0]
 80051d8:	6a3b      	ldr	r3, [r7, #32]
 80051da:	2200      	movs	r2, #0
 80051dc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80051e0:	68f8      	ldr	r0, [r7, #12]
 80051e2:	f000 f82b 	bl	800523c <I2C_WaitOnFlagUntilTimeout>
 80051e6:	4603      	mov	r3, r0
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d00d      	beq.n	8005208 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80051fa:	d103      	bne.n	8005204 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005202:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005204:	2303      	movs	r3, #3
 8005206:	e013      	b.n	8005230 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005208:	897b      	ldrh	r3, [r7, #10]
 800520a:	b2db      	uxtb	r3, r3
 800520c:	f043 0301 	orr.w	r3, r3, #1
 8005210:	b2da      	uxtb	r2, r3
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800521a:	6a3a      	ldr	r2, [r7, #32]
 800521c:	4906      	ldr	r1, [pc, #24]	@ (8005238 <I2C_RequestMemoryRead+0x1cc>)
 800521e:	68f8      	ldr	r0, [r7, #12]
 8005220:	f000 f886 	bl	8005330 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005224:	4603      	mov	r3, r0
 8005226:	2b00      	cmp	r3, #0
 8005228:	d001      	beq.n	800522e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	e000      	b.n	8005230 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800522e:	2300      	movs	r3, #0
}
 8005230:	4618      	mov	r0, r3
 8005232:	3718      	adds	r7, #24
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}
 8005238:	00010002 	.word	0x00010002

0800523c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b084      	sub	sp, #16
 8005240:	af00      	add	r7, sp, #0
 8005242:	60f8      	str	r0, [r7, #12]
 8005244:	60b9      	str	r1, [r7, #8]
 8005246:	603b      	str	r3, [r7, #0]
 8005248:	4613      	mov	r3, r2
 800524a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800524c:	e048      	b.n	80052e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005254:	d044      	beq.n	80052e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005256:	f7fe f94f 	bl	80034f8 <HAL_GetTick>
 800525a:	4602      	mov	r2, r0
 800525c:	69bb      	ldr	r3, [r7, #24]
 800525e:	1ad3      	subs	r3, r2, r3
 8005260:	683a      	ldr	r2, [r7, #0]
 8005262:	429a      	cmp	r2, r3
 8005264:	d302      	bcc.n	800526c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d139      	bne.n	80052e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	0c1b      	lsrs	r3, r3, #16
 8005270:	b2db      	uxtb	r3, r3
 8005272:	2b01      	cmp	r3, #1
 8005274:	d10d      	bne.n	8005292 <I2C_WaitOnFlagUntilTimeout+0x56>
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	695b      	ldr	r3, [r3, #20]
 800527c:	43da      	mvns	r2, r3
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	4013      	ands	r3, r2
 8005282:	b29b      	uxth	r3, r3
 8005284:	2b00      	cmp	r3, #0
 8005286:	bf0c      	ite	eq
 8005288:	2301      	moveq	r3, #1
 800528a:	2300      	movne	r3, #0
 800528c:	b2db      	uxtb	r3, r3
 800528e:	461a      	mov	r2, r3
 8005290:	e00c      	b.n	80052ac <I2C_WaitOnFlagUntilTimeout+0x70>
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	699b      	ldr	r3, [r3, #24]
 8005298:	43da      	mvns	r2, r3
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	4013      	ands	r3, r2
 800529e:	b29b      	uxth	r3, r3
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	bf0c      	ite	eq
 80052a4:	2301      	moveq	r3, #1
 80052a6:	2300      	movne	r3, #0
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	461a      	mov	r2, r3
 80052ac:	79fb      	ldrb	r3, [r7, #7]
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d116      	bne.n	80052e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2200      	movs	r2, #0
 80052b6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2220      	movs	r2, #32
 80052bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2200      	movs	r2, #0
 80052c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052cc:	f043 0220 	orr.w	r2, r3, #32
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2200      	movs	r2, #0
 80052d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	e023      	b.n	8005328 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	0c1b      	lsrs	r3, r3, #16
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d10d      	bne.n	8005306 <I2C_WaitOnFlagUntilTimeout+0xca>
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	695b      	ldr	r3, [r3, #20]
 80052f0:	43da      	mvns	r2, r3
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	4013      	ands	r3, r2
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	bf0c      	ite	eq
 80052fc:	2301      	moveq	r3, #1
 80052fe:	2300      	movne	r3, #0
 8005300:	b2db      	uxtb	r3, r3
 8005302:	461a      	mov	r2, r3
 8005304:	e00c      	b.n	8005320 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	699b      	ldr	r3, [r3, #24]
 800530c:	43da      	mvns	r2, r3
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	4013      	ands	r3, r2
 8005312:	b29b      	uxth	r3, r3
 8005314:	2b00      	cmp	r3, #0
 8005316:	bf0c      	ite	eq
 8005318:	2301      	moveq	r3, #1
 800531a:	2300      	movne	r3, #0
 800531c:	b2db      	uxtb	r3, r3
 800531e:	461a      	mov	r2, r3
 8005320:	79fb      	ldrb	r3, [r7, #7]
 8005322:	429a      	cmp	r2, r3
 8005324:	d093      	beq.n	800524e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005326:	2300      	movs	r3, #0
}
 8005328:	4618      	mov	r0, r3
 800532a:	3710      	adds	r7, #16
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}

08005330 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b084      	sub	sp, #16
 8005334:	af00      	add	r7, sp, #0
 8005336:	60f8      	str	r0, [r7, #12]
 8005338:	60b9      	str	r1, [r7, #8]
 800533a:	607a      	str	r2, [r7, #4]
 800533c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800533e:	e071      	b.n	8005424 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	695b      	ldr	r3, [r3, #20]
 8005346:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800534a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800534e:	d123      	bne.n	8005398 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800535e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005368:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2200      	movs	r2, #0
 800536e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2220      	movs	r2, #32
 8005374:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2200      	movs	r2, #0
 800537c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005384:	f043 0204 	orr.w	r2, r3, #4
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2200      	movs	r2, #0
 8005390:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	e067      	b.n	8005468 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800539e:	d041      	beq.n	8005424 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053a0:	f7fe f8aa 	bl	80034f8 <HAL_GetTick>
 80053a4:	4602      	mov	r2, r0
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	1ad3      	subs	r3, r2, r3
 80053aa:	687a      	ldr	r2, [r7, #4]
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d302      	bcc.n	80053b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d136      	bne.n	8005424 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	0c1b      	lsrs	r3, r3, #16
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d10c      	bne.n	80053da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	695b      	ldr	r3, [r3, #20]
 80053c6:	43da      	mvns	r2, r3
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	4013      	ands	r3, r2
 80053cc:	b29b      	uxth	r3, r3
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	bf14      	ite	ne
 80053d2:	2301      	movne	r3, #1
 80053d4:	2300      	moveq	r3, #0
 80053d6:	b2db      	uxtb	r3, r3
 80053d8:	e00b      	b.n	80053f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	699b      	ldr	r3, [r3, #24]
 80053e0:	43da      	mvns	r2, r3
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	4013      	ands	r3, r2
 80053e6:	b29b      	uxth	r3, r3
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	bf14      	ite	ne
 80053ec:	2301      	movne	r3, #1
 80053ee:	2300      	moveq	r3, #0
 80053f0:	b2db      	uxtb	r3, r3
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d016      	beq.n	8005424 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2200      	movs	r2, #0
 80053fa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2220      	movs	r2, #32
 8005400:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2200      	movs	r2, #0
 8005408:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005410:	f043 0220 	orr.w	r2, r3, #32
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2200      	movs	r2, #0
 800541c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	e021      	b.n	8005468 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	0c1b      	lsrs	r3, r3, #16
 8005428:	b2db      	uxtb	r3, r3
 800542a:	2b01      	cmp	r3, #1
 800542c:	d10c      	bne.n	8005448 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	695b      	ldr	r3, [r3, #20]
 8005434:	43da      	mvns	r2, r3
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	4013      	ands	r3, r2
 800543a:	b29b      	uxth	r3, r3
 800543c:	2b00      	cmp	r3, #0
 800543e:	bf14      	ite	ne
 8005440:	2301      	movne	r3, #1
 8005442:	2300      	moveq	r3, #0
 8005444:	b2db      	uxtb	r3, r3
 8005446:	e00b      	b.n	8005460 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	699b      	ldr	r3, [r3, #24]
 800544e:	43da      	mvns	r2, r3
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	4013      	ands	r3, r2
 8005454:	b29b      	uxth	r3, r3
 8005456:	2b00      	cmp	r3, #0
 8005458:	bf14      	ite	ne
 800545a:	2301      	movne	r3, #1
 800545c:	2300      	moveq	r3, #0
 800545e:	b2db      	uxtb	r3, r3
 8005460:	2b00      	cmp	r3, #0
 8005462:	f47f af6d 	bne.w	8005340 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005466:	2300      	movs	r3, #0
}
 8005468:	4618      	mov	r0, r3
 800546a:	3710      	adds	r7, #16
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}

08005470 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b084      	sub	sp, #16
 8005474:	af00      	add	r7, sp, #0
 8005476:	60f8      	str	r0, [r7, #12]
 8005478:	60b9      	str	r1, [r7, #8]
 800547a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800547c:	e034      	b.n	80054e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800547e:	68f8      	ldr	r0, [r7, #12]
 8005480:	f000 f8e3 	bl	800564a <I2C_IsAcknowledgeFailed>
 8005484:	4603      	mov	r3, r0
 8005486:	2b00      	cmp	r3, #0
 8005488:	d001      	beq.n	800548e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	e034      	b.n	80054f8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005494:	d028      	beq.n	80054e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005496:	f7fe f82f 	bl	80034f8 <HAL_GetTick>
 800549a:	4602      	mov	r2, r0
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	1ad3      	subs	r3, r2, r3
 80054a0:	68ba      	ldr	r2, [r7, #8]
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d302      	bcc.n	80054ac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d11d      	bne.n	80054e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	695b      	ldr	r3, [r3, #20]
 80054b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054b6:	2b80      	cmp	r3, #128	@ 0x80
 80054b8:	d016      	beq.n	80054e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2200      	movs	r2, #0
 80054be:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2220      	movs	r2, #32
 80054c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2200      	movs	r2, #0
 80054cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054d4:	f043 0220 	orr.w	r2, r3, #32
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2200      	movs	r2, #0
 80054e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80054e4:	2301      	movs	r3, #1
 80054e6:	e007      	b.n	80054f8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	695b      	ldr	r3, [r3, #20]
 80054ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054f2:	2b80      	cmp	r3, #128	@ 0x80
 80054f4:	d1c3      	bne.n	800547e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80054f6:	2300      	movs	r3, #0
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3710      	adds	r7, #16
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}

08005500 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b084      	sub	sp, #16
 8005504:	af00      	add	r7, sp, #0
 8005506:	60f8      	str	r0, [r7, #12]
 8005508:	60b9      	str	r1, [r7, #8]
 800550a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800550c:	e034      	b.n	8005578 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800550e:	68f8      	ldr	r0, [r7, #12]
 8005510:	f000 f89b 	bl	800564a <I2C_IsAcknowledgeFailed>
 8005514:	4603      	mov	r3, r0
 8005516:	2b00      	cmp	r3, #0
 8005518:	d001      	beq.n	800551e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	e034      	b.n	8005588 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005524:	d028      	beq.n	8005578 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005526:	f7fd ffe7 	bl	80034f8 <HAL_GetTick>
 800552a:	4602      	mov	r2, r0
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	1ad3      	subs	r3, r2, r3
 8005530:	68ba      	ldr	r2, [r7, #8]
 8005532:	429a      	cmp	r2, r3
 8005534:	d302      	bcc.n	800553c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d11d      	bne.n	8005578 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	695b      	ldr	r3, [r3, #20]
 8005542:	f003 0304 	and.w	r3, r3, #4
 8005546:	2b04      	cmp	r3, #4
 8005548:	d016      	beq.n	8005578 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2200      	movs	r2, #0
 800554e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2220      	movs	r2, #32
 8005554:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2200      	movs	r2, #0
 800555c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005564:	f043 0220 	orr.w	r2, r3, #32
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2200      	movs	r2, #0
 8005570:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005574:	2301      	movs	r3, #1
 8005576:	e007      	b.n	8005588 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	695b      	ldr	r3, [r3, #20]
 800557e:	f003 0304 	and.w	r3, r3, #4
 8005582:	2b04      	cmp	r3, #4
 8005584:	d1c3      	bne.n	800550e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005586:	2300      	movs	r3, #0
}
 8005588:	4618      	mov	r0, r3
 800558a:	3710      	adds	r7, #16
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}

08005590 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b084      	sub	sp, #16
 8005594:	af00      	add	r7, sp, #0
 8005596:	60f8      	str	r0, [r7, #12]
 8005598:	60b9      	str	r1, [r7, #8]
 800559a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800559c:	e049      	b.n	8005632 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	695b      	ldr	r3, [r3, #20]
 80055a4:	f003 0310 	and.w	r3, r3, #16
 80055a8:	2b10      	cmp	r3, #16
 80055aa:	d119      	bne.n	80055e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f06f 0210 	mvn.w	r2, #16
 80055b4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2200      	movs	r2, #0
 80055ba:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2220      	movs	r2, #32
 80055c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2200      	movs	r2, #0
 80055c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2200      	movs	r2, #0
 80055d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80055dc:	2301      	movs	r3, #1
 80055de:	e030      	b.n	8005642 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055e0:	f7fd ff8a 	bl	80034f8 <HAL_GetTick>
 80055e4:	4602      	mov	r2, r0
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	1ad3      	subs	r3, r2, r3
 80055ea:	68ba      	ldr	r2, [r7, #8]
 80055ec:	429a      	cmp	r2, r3
 80055ee:	d302      	bcc.n	80055f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d11d      	bne.n	8005632 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	695b      	ldr	r3, [r3, #20]
 80055fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005600:	2b40      	cmp	r3, #64	@ 0x40
 8005602:	d016      	beq.n	8005632 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2200      	movs	r2, #0
 8005608:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2220      	movs	r2, #32
 800560e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2200      	movs	r2, #0
 8005616:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800561e:	f043 0220 	orr.w	r2, r3, #32
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2200      	movs	r2, #0
 800562a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	e007      	b.n	8005642 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	695b      	ldr	r3, [r3, #20]
 8005638:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800563c:	2b40      	cmp	r3, #64	@ 0x40
 800563e:	d1ae      	bne.n	800559e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005640:	2300      	movs	r3, #0
}
 8005642:	4618      	mov	r0, r3
 8005644:	3710      	adds	r7, #16
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}

0800564a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800564a:	b480      	push	{r7}
 800564c:	b083      	sub	sp, #12
 800564e:	af00      	add	r7, sp, #0
 8005650:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	695b      	ldr	r3, [r3, #20]
 8005658:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800565c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005660:	d11b      	bne.n	800569a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800566a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2200      	movs	r2, #0
 8005670:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2220      	movs	r2, #32
 8005676:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2200      	movs	r2, #0
 800567e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005686:	f043 0204 	orr.w	r2, r3, #4
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2200      	movs	r2, #0
 8005692:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005696:	2301      	movs	r3, #1
 8005698:	e000      	b.n	800569c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800569a:	2300      	movs	r3, #0
}
 800569c:	4618      	mov	r0, r3
 800569e:	370c      	adds	r7, #12
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr

080056a8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b083      	sub	sp, #12
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
 80056b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056b8:	b2db      	uxtb	r3, r3
 80056ba:	2b20      	cmp	r3, #32
 80056bc:	d129      	bne.n	8005712 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2224      	movs	r2, #36	@ 0x24
 80056c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f022 0201 	bic.w	r2, r2, #1
 80056d4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f022 0210 	bic.w	r2, r2, #16
 80056e4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	683a      	ldr	r2, [r7, #0]
 80056f2:	430a      	orrs	r2, r1
 80056f4:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f042 0201 	orr.w	r2, r2, #1
 8005704:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2220      	movs	r2, #32
 800570a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800570e:	2300      	movs	r3, #0
 8005710:	e000      	b.n	8005714 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8005712:	2302      	movs	r3, #2
  }
}
 8005714:	4618      	mov	r0, r3
 8005716:	370c      	adds	r7, #12
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr

08005720 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005720:	b480      	push	{r7}
 8005722:	b085      	sub	sp, #20
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
 8005728:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800572a:	2300      	movs	r3, #0
 800572c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005734:	b2db      	uxtb	r3, r3
 8005736:	2b20      	cmp	r3, #32
 8005738:	d12a      	bne.n	8005790 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2224      	movs	r2, #36	@ 0x24
 800573e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f022 0201 	bic.w	r2, r2, #1
 8005750:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005758:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800575a:	89fb      	ldrh	r3, [r7, #14]
 800575c:	f023 030f 	bic.w	r3, r3, #15
 8005760:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	b29a      	uxth	r2, r3
 8005766:	89fb      	ldrh	r3, [r7, #14]
 8005768:	4313      	orrs	r3, r2
 800576a:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	89fa      	ldrh	r2, [r7, #14]
 8005772:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f042 0201 	orr.w	r2, r2, #1
 8005782:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2220      	movs	r2, #32
 8005788:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800578c:	2300      	movs	r3, #0
 800578e:	e000      	b.n	8005792 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005790:	2302      	movs	r3, #2
  }
}
 8005792:	4618      	mov	r0, r3
 8005794:	3714      	adds	r7, #20
 8005796:	46bd      	mov	sp, r7
 8005798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579c:	4770      	bx	lr
	...

080057a0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b084      	sub	sp, #16
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d101      	bne.n	80057b2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	e0bf      	b.n	8005932 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80057b8:	b2db      	uxtb	r3, r3
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d106      	bne.n	80057cc <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2200      	movs	r2, #0
 80057c2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f7fb fb30 	bl	8000e2c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2202      	movs	r2, #2
 80057d0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	699a      	ldr	r2, [r3, #24]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80057e2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	6999      	ldr	r1, [r3, #24]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	685a      	ldr	r2, [r3, #4]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80057f8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	691b      	ldr	r3, [r3, #16]
 80057fe:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	430a      	orrs	r2, r1
 8005806:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	6899      	ldr	r1, [r3, #8]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	4b4a      	ldr	r3, [pc, #296]	@ (800593c <HAL_LTDC_Init+0x19c>)
 8005814:	400b      	ands	r3, r1
 8005816:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	695b      	ldr	r3, [r3, #20]
 800581c:	041b      	lsls	r3, r3, #16
 800581e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	6899      	ldr	r1, [r3, #8]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	699a      	ldr	r2, [r3, #24]
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	431a      	orrs	r2, r3
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	430a      	orrs	r2, r1
 8005834:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	68d9      	ldr	r1, [r3, #12]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	4b3e      	ldr	r3, [pc, #248]	@ (800593c <HAL_LTDC_Init+0x19c>)
 8005842:	400b      	ands	r3, r1
 8005844:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	69db      	ldr	r3, [r3, #28]
 800584a:	041b      	lsls	r3, r3, #16
 800584c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	68d9      	ldr	r1, [r3, #12]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6a1a      	ldr	r2, [r3, #32]
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	431a      	orrs	r2, r3
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	430a      	orrs	r2, r1
 8005862:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	6919      	ldr	r1, [r3, #16]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681a      	ldr	r2, [r3, #0]
 800586e:	4b33      	ldr	r3, [pc, #204]	@ (800593c <HAL_LTDC_Init+0x19c>)
 8005870:	400b      	ands	r3, r1
 8005872:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005878:	041b      	lsls	r3, r3, #16
 800587a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	6919      	ldr	r1, [r3, #16]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	431a      	orrs	r2, r3
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	430a      	orrs	r2, r1
 8005890:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	6959      	ldr	r1, [r3, #20]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	4b27      	ldr	r3, [pc, #156]	@ (800593c <HAL_LTDC_Init+0x19c>)
 800589e:	400b      	ands	r3, r1
 80058a0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058a6:	041b      	lsls	r3, r3, #16
 80058a8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	6959      	ldr	r1, [r3, #20]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	431a      	orrs	r2, r3
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	430a      	orrs	r2, r1
 80058be:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80058c6:	021b      	lsls	r3, r3, #8
 80058c8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80058d0:	041b      	lsls	r3, r3, #16
 80058d2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 80058e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80058ea:	68ba      	ldr	r2, [r7, #8]
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	687a      	ldr	r2, [r7, #4]
 80058f2:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 80058f6:	431a      	orrs	r2, r3
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	430a      	orrs	r2, r1
 80058fe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f042 0206 	orr.w	r2, r2, #6
 800590e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	699a      	ldr	r2, [r3, #24]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f042 0201 	orr.w	r2, r2, #1
 800591e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2200      	movs	r2, #0
 8005924:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2201      	movs	r2, #1
 800592c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8005930:	2300      	movs	r3, #0
}
 8005932:	4618      	mov	r0, r3
 8005934:	3710      	adds	r7, #16
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}
 800593a:	bf00      	nop
 800593c:	f000f800 	.word	0xf000f800

08005940 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005940:	b5b0      	push	{r4, r5, r7, lr}
 8005942:	b084      	sub	sp, #16
 8005944:	af00      	add	r7, sp, #0
 8005946:	60f8      	str	r0, [r7, #12]
 8005948:	60b9      	str	r1, [r7, #8]
 800594a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8005952:	2b01      	cmp	r3, #1
 8005954:	d101      	bne.n	800595a <HAL_LTDC_ConfigLayer+0x1a>
 8005956:	2302      	movs	r3, #2
 8005958:	e02c      	b.n	80059b4 <HAL_LTDC_ConfigLayer+0x74>
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2201      	movs	r2, #1
 800595e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2202      	movs	r2, #2
 8005966:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800596a:	68fa      	ldr	r2, [r7, #12]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2134      	movs	r1, #52	@ 0x34
 8005970:	fb01 f303 	mul.w	r3, r1, r3
 8005974:	4413      	add	r3, r2
 8005976:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	4614      	mov	r4, r2
 800597e:	461d      	mov	r5, r3
 8005980:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005982:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005984:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005986:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005988:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800598a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800598c:	682b      	ldr	r3, [r5, #0]
 800598e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005990:	687a      	ldr	r2, [r7, #4]
 8005992:	68b9      	ldr	r1, [r7, #8]
 8005994:	68f8      	ldr	r0, [r7, #12]
 8005996:	f000 f83b 	bl	8005a10 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	2201      	movs	r2, #1
 80059a0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2201      	movs	r2, #1
 80059a6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2200      	movs	r2, #0
 80059ae:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80059b2:	2300      	movs	r3, #0
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	3710      	adds	r7, #16
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bdb0      	pop	{r4, r5, r7, pc}

080059bc <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 80059bc:	b480      	push	{r7}
 80059be:	b083      	sub	sp, #12
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d101      	bne.n	80059d2 <HAL_LTDC_EnableDither+0x16>
 80059ce:	2302      	movs	r3, #2
 80059d0:	e016      	b.n	8005a00 <HAL_LTDC_EnableDither+0x44>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2201      	movs	r2, #1
 80059d6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2202      	movs	r2, #2
 80059de:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 80059e2:	4b0a      	ldr	r3, [pc, #40]	@ (8005a0c <HAL_LTDC_EnableDither+0x50>)
 80059e4:	699b      	ldr	r3, [r3, #24]
 80059e6:	4a09      	ldr	r2, [pc, #36]	@ (8005a0c <HAL_LTDC_EnableDither+0x50>)
 80059e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059ec:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2201      	movs	r2, #1
 80059f2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2200      	movs	r2, #0
 80059fa:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80059fe:	2300      	movs	r3, #0
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	370c      	adds	r7, #12
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr
 8005a0c:	40016800 	.word	0x40016800

08005a10 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b089      	sub	sp, #36	@ 0x24
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	60f8      	str	r0, [r7, #12]
 8005a18:	60b9      	str	r1, [r7, #8]
 8005a1a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	685a      	ldr	r2, [r3, #4]
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	68db      	ldr	r3, [r3, #12]
 8005a26:	0c1b      	lsrs	r3, r3, #16
 8005a28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a2c:	4413      	add	r3, r2
 8005a2e:	041b      	lsls	r3, r3, #16
 8005a30:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	461a      	mov	r2, r3
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	01db      	lsls	r3, r3, #7
 8005a3c:	4413      	add	r3, r2
 8005a3e:	3384      	adds	r3, #132	@ 0x84
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	68fa      	ldr	r2, [r7, #12]
 8005a44:	6812      	ldr	r2, [r2, #0]
 8005a46:	4611      	mov	r1, r2
 8005a48:	687a      	ldr	r2, [r7, #4]
 8005a4a:	01d2      	lsls	r2, r2, #7
 8005a4c:	440a      	add	r2, r1
 8005a4e:	3284      	adds	r2, #132	@ 0x84
 8005a50:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8005a54:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	68db      	ldr	r3, [r3, #12]
 8005a60:	0c1b      	lsrs	r3, r3, #16
 8005a62:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005a66:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005a68:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4619      	mov	r1, r3
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	01db      	lsls	r3, r3, #7
 8005a74:	440b      	add	r3, r1
 8005a76:	3384      	adds	r3, #132	@ 0x84
 8005a78:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005a7a:	69fb      	ldr	r3, [r7, #28]
 8005a7c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005a7e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	68da      	ldr	r2, [r3, #12]
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	68db      	ldr	r3, [r3, #12]
 8005a8a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005a8e:	4413      	add	r3, r2
 8005a90:	041b      	lsls	r3, r3, #16
 8005a92:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	461a      	mov	r2, r3
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	01db      	lsls	r3, r3, #7
 8005a9e:	4413      	add	r3, r2
 8005aa0:	3384      	adds	r3, #132	@ 0x84
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	68fa      	ldr	r2, [r7, #12]
 8005aa6:	6812      	ldr	r2, [r2, #0]
 8005aa8:	4611      	mov	r1, r2
 8005aaa:	687a      	ldr	r2, [r7, #4]
 8005aac:	01d2      	lsls	r2, r2, #7
 8005aae:	440a      	add	r2, r1
 8005ab0:	3284      	adds	r2, #132	@ 0x84
 8005ab2:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8005ab6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	689a      	ldr	r2, [r3, #8]
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005ac6:	4413      	add	r3, r2
 8005ac8:	1c5a      	adds	r2, r3, #1
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4619      	mov	r1, r3
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	01db      	lsls	r3, r3, #7
 8005ad4:	440b      	add	r3, r1
 8005ad6:	3384      	adds	r3, #132	@ 0x84
 8005ad8:	4619      	mov	r1, r3
 8005ada:	69fb      	ldr	r3, [r7, #28]
 8005adc:	4313      	orrs	r3, r2
 8005ade:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	01db      	lsls	r3, r3, #7
 8005aea:	4413      	add	r3, r2
 8005aec:	3384      	adds	r3, #132	@ 0x84
 8005aee:	691b      	ldr	r3, [r3, #16]
 8005af0:	68fa      	ldr	r2, [r7, #12]
 8005af2:	6812      	ldr	r2, [r2, #0]
 8005af4:	4611      	mov	r1, r2
 8005af6:	687a      	ldr	r2, [r7, #4]
 8005af8:	01d2      	lsls	r2, r2, #7
 8005afa:	440a      	add	r2, r1
 8005afc:	3284      	adds	r2, #132	@ 0x84
 8005afe:	f023 0307 	bic.w	r3, r3, #7
 8005b02:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	461a      	mov	r2, r3
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	01db      	lsls	r3, r3, #7
 8005b0e:	4413      	add	r3, r2
 8005b10:	3384      	adds	r3, #132	@ 0x84
 8005b12:	461a      	mov	r2, r3
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	691b      	ldr	r3, [r3, #16]
 8005b18:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005b20:	021b      	lsls	r3, r3, #8
 8005b22:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8005b2a:	041b      	lsls	r3, r3, #16
 8005b2c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	699b      	ldr	r3, [r3, #24]
 8005b32:	061b      	lsls	r3, r3, #24
 8005b34:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	01db      	lsls	r3, r3, #7
 8005b40:	4413      	add	r3, r2
 8005b42:	3384      	adds	r3, #132	@ 0x84
 8005b44:	699b      	ldr	r3, [r3, #24]
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	461a      	mov	r2, r3
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	01db      	lsls	r3, r3, #7
 8005b50:	4413      	add	r3, r2
 8005b52:	3384      	adds	r3, #132	@ 0x84
 8005b54:	461a      	mov	r2, r3
 8005b56:	2300      	movs	r3, #0
 8005b58:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005b60:	461a      	mov	r2, r3
 8005b62:	69fb      	ldr	r3, [r7, #28]
 8005b64:	431a      	orrs	r2, r3
 8005b66:	69bb      	ldr	r3, [r7, #24]
 8005b68:	431a      	orrs	r2, r3
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4619      	mov	r1, r3
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	01db      	lsls	r3, r3, #7
 8005b74:	440b      	add	r3, r1
 8005b76:	3384      	adds	r3, #132	@ 0x84
 8005b78:	4619      	mov	r1, r3
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	461a      	mov	r2, r3
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	01db      	lsls	r3, r3, #7
 8005b8a:	4413      	add	r3, r2
 8005b8c:	3384      	adds	r3, #132	@ 0x84
 8005b8e:	695b      	ldr	r3, [r3, #20]
 8005b90:	68fa      	ldr	r2, [r7, #12]
 8005b92:	6812      	ldr	r2, [r2, #0]
 8005b94:	4611      	mov	r1, r2
 8005b96:	687a      	ldr	r2, [r7, #4]
 8005b98:	01d2      	lsls	r2, r2, #7
 8005b9a:	440a      	add	r2, r1
 8005b9c:	3284      	adds	r2, #132	@ 0x84
 8005b9e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005ba2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	461a      	mov	r2, r3
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	01db      	lsls	r3, r3, #7
 8005bae:	4413      	add	r3, r2
 8005bb0:	3384      	adds	r3, #132	@ 0x84
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	695b      	ldr	r3, [r3, #20]
 8005bb8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	461a      	mov	r2, r3
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	01db      	lsls	r3, r3, #7
 8005bc4:	4413      	add	r3, r2
 8005bc6:	3384      	adds	r3, #132	@ 0x84
 8005bc8:	69db      	ldr	r3, [r3, #28]
 8005bca:	68fa      	ldr	r2, [r7, #12]
 8005bcc:	6812      	ldr	r2, [r2, #0]
 8005bce:	4611      	mov	r1, r2
 8005bd0:	687a      	ldr	r2, [r7, #4]
 8005bd2:	01d2      	lsls	r2, r2, #7
 8005bd4:	440a      	add	r2, r1
 8005bd6:	3284      	adds	r2, #132	@ 0x84
 8005bd8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8005bdc:	f023 0307 	bic.w	r3, r3, #7
 8005be0:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	69da      	ldr	r2, [r3, #28]
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	6a1b      	ldr	r3, [r3, #32]
 8005bea:	68f9      	ldr	r1, [r7, #12]
 8005bec:	6809      	ldr	r1, [r1, #0]
 8005bee:	4608      	mov	r0, r1
 8005bf0:	6879      	ldr	r1, [r7, #4]
 8005bf2:	01c9      	lsls	r1, r1, #7
 8005bf4:	4401      	add	r1, r0
 8005bf6:	3184      	adds	r1, #132	@ 0x84
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	461a      	mov	r2, r3
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	01db      	lsls	r3, r3, #7
 8005c06:	4413      	add	r3, r2
 8005c08:	3384      	adds	r3, #132	@ 0x84
 8005c0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	461a      	mov	r2, r3
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	01db      	lsls	r3, r3, #7
 8005c16:	4413      	add	r3, r2
 8005c18:	3384      	adds	r3, #132	@ 0x84
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	461a      	mov	r2, r3
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	01db      	lsls	r3, r3, #7
 8005c2a:	4413      	add	r3, r2
 8005c2c:	3384      	adds	r3, #132	@ 0x84
 8005c2e:	461a      	mov	r2, r3
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c34:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	691b      	ldr	r3, [r3, #16]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d102      	bne.n	8005c44 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8005c3e:	2304      	movs	r3, #4
 8005c40:	61fb      	str	r3, [r7, #28]
 8005c42:	e01b      	b.n	8005c7c <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	691b      	ldr	r3, [r3, #16]
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	d102      	bne.n	8005c52 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8005c4c:	2303      	movs	r3, #3
 8005c4e:	61fb      	str	r3, [r7, #28]
 8005c50:	e014      	b.n	8005c7c <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	691b      	ldr	r3, [r3, #16]
 8005c56:	2b04      	cmp	r3, #4
 8005c58:	d00b      	beq.n	8005c72 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005c5e:	2b02      	cmp	r3, #2
 8005c60:	d007      	beq.n	8005c72 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005c66:	2b03      	cmp	r3, #3
 8005c68:	d003      	beq.n	8005c72 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005c6e:	2b07      	cmp	r3, #7
 8005c70:	d102      	bne.n	8005c78 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8005c72:	2302      	movs	r3, #2
 8005c74:	61fb      	str	r3, [r7, #28]
 8005c76:	e001      	b.n	8005c7c <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	461a      	mov	r2, r3
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	01db      	lsls	r3, r3, #7
 8005c86:	4413      	add	r3, r2
 8005c88:	3384      	adds	r3, #132	@ 0x84
 8005c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c8c:	68fa      	ldr	r2, [r7, #12]
 8005c8e:	6812      	ldr	r2, [r2, #0]
 8005c90:	4611      	mov	r1, r2
 8005c92:	687a      	ldr	r2, [r7, #4]
 8005c94:	01d2      	lsls	r2, r2, #7
 8005c96:	440a      	add	r2, r1
 8005c98:	3284      	adds	r2, #132	@ 0x84
 8005c9a:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8005c9e:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ca4:	69fa      	ldr	r2, [r7, #28]
 8005ca6:	fb02 f303 	mul.w	r3, r2, r3
 8005caa:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	6859      	ldr	r1, [r3, #4]
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	1acb      	subs	r3, r1, r3
 8005cb6:	69f9      	ldr	r1, [r7, #28]
 8005cb8:	fb01 f303 	mul.w	r3, r1, r3
 8005cbc:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005cbe:	68f9      	ldr	r1, [r7, #12]
 8005cc0:	6809      	ldr	r1, [r1, #0]
 8005cc2:	4608      	mov	r0, r1
 8005cc4:	6879      	ldr	r1, [r7, #4]
 8005cc6:	01c9      	lsls	r1, r1, #7
 8005cc8:	4401      	add	r1, r0
 8005cca:	3184      	adds	r1, #132	@ 0x84
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	01db      	lsls	r3, r3, #7
 8005cda:	4413      	add	r3, r2
 8005cdc:	3384      	adds	r3, #132	@ 0x84
 8005cde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ce0:	68fa      	ldr	r2, [r7, #12]
 8005ce2:	6812      	ldr	r2, [r2, #0]
 8005ce4:	4611      	mov	r1, r2
 8005ce6:	687a      	ldr	r2, [r7, #4]
 8005ce8:	01d2      	lsls	r2, r2, #7
 8005cea:	440a      	add	r2, r1
 8005cec:	3284      	adds	r2, #132	@ 0x84
 8005cee:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005cf2:	f023 0307 	bic.w	r3, r3, #7
 8005cf6:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	01db      	lsls	r3, r3, #7
 8005d02:	4413      	add	r3, r2
 8005d04:	3384      	adds	r3, #132	@ 0x84
 8005d06:	461a      	mov	r2, r3
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d0c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	461a      	mov	r2, r3
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	01db      	lsls	r3, r3, #7
 8005d18:	4413      	add	r3, r2
 8005d1a:	3384      	adds	r3, #132	@ 0x84
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	68fa      	ldr	r2, [r7, #12]
 8005d20:	6812      	ldr	r2, [r2, #0]
 8005d22:	4611      	mov	r1, r2
 8005d24:	687a      	ldr	r2, [r7, #4]
 8005d26:	01d2      	lsls	r2, r2, #7
 8005d28:	440a      	add	r2, r1
 8005d2a:	3284      	adds	r2, #132	@ 0x84
 8005d2c:	f043 0301 	orr.w	r3, r3, #1
 8005d30:	6013      	str	r3, [r2, #0]
}
 8005d32:	bf00      	nop
 8005d34:	3724      	adds	r7, #36	@ 0x24
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr
	...

08005d40 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b082      	sub	sp, #8
 8005d44:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8005d46:	2300      	movs	r3, #0
 8005d48:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	603b      	str	r3, [r7, #0]
 8005d4e:	4b20      	ldr	r3, [pc, #128]	@ (8005dd0 <HAL_PWREx_EnableOverDrive+0x90>)
 8005d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d52:	4a1f      	ldr	r2, [pc, #124]	@ (8005dd0 <HAL_PWREx_EnableOverDrive+0x90>)
 8005d54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d58:	6413      	str	r3, [r2, #64]	@ 0x40
 8005d5a:	4b1d      	ldr	r3, [pc, #116]	@ (8005dd0 <HAL_PWREx_EnableOverDrive+0x90>)
 8005d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d62:	603b      	str	r3, [r7, #0]
 8005d64:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005d66:	4b1b      	ldr	r3, [pc, #108]	@ (8005dd4 <HAL_PWREx_EnableOverDrive+0x94>)
 8005d68:	2201      	movs	r2, #1
 8005d6a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005d6c:	f7fd fbc4 	bl	80034f8 <HAL_GetTick>
 8005d70:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005d72:	e009      	b.n	8005d88 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005d74:	f7fd fbc0 	bl	80034f8 <HAL_GetTick>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	1ad3      	subs	r3, r2, r3
 8005d7e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005d82:	d901      	bls.n	8005d88 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8005d84:	2303      	movs	r3, #3
 8005d86:	e01f      	b.n	8005dc8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005d88:	4b13      	ldr	r3, [pc, #76]	@ (8005dd8 <HAL_PWREx_EnableOverDrive+0x98>)
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d94:	d1ee      	bne.n	8005d74 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005d96:	4b11      	ldr	r3, [pc, #68]	@ (8005ddc <HAL_PWREx_EnableOverDrive+0x9c>)
 8005d98:	2201      	movs	r2, #1
 8005d9a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005d9c:	f7fd fbac 	bl	80034f8 <HAL_GetTick>
 8005da0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005da2:	e009      	b.n	8005db8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005da4:	f7fd fba8 	bl	80034f8 <HAL_GetTick>
 8005da8:	4602      	mov	r2, r0
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	1ad3      	subs	r3, r2, r3
 8005dae:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005db2:	d901      	bls.n	8005db8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8005db4:	2303      	movs	r3, #3
 8005db6:	e007      	b.n	8005dc8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005db8:	4b07      	ldr	r3, [pc, #28]	@ (8005dd8 <HAL_PWREx_EnableOverDrive+0x98>)
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005dc0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005dc4:	d1ee      	bne.n	8005da4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8005dc6:	2300      	movs	r3, #0
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3708      	adds	r7, #8
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}
 8005dd0:	40023800 	.word	0x40023800
 8005dd4:	420e0040 	.word	0x420e0040
 8005dd8:	40007000 	.word	0x40007000
 8005ddc:	420e0044 	.word	0x420e0044

08005de0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b086      	sub	sp, #24
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d101      	bne.n	8005df2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005dee:	2301      	movs	r3, #1
 8005df0:	e267      	b.n	80062c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f003 0301 	and.w	r3, r3, #1
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d075      	beq.n	8005eea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005dfe:	4b88      	ldr	r3, [pc, #544]	@ (8006020 <HAL_RCC_OscConfig+0x240>)
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	f003 030c 	and.w	r3, r3, #12
 8005e06:	2b04      	cmp	r3, #4
 8005e08:	d00c      	beq.n	8005e24 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e0a:	4b85      	ldr	r3, [pc, #532]	@ (8006020 <HAL_RCC_OscConfig+0x240>)
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005e12:	2b08      	cmp	r3, #8
 8005e14:	d112      	bne.n	8005e3c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e16:	4b82      	ldr	r3, [pc, #520]	@ (8006020 <HAL_RCC_OscConfig+0x240>)
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e1e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005e22:	d10b      	bne.n	8005e3c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e24:	4b7e      	ldr	r3, [pc, #504]	@ (8006020 <HAL_RCC_OscConfig+0x240>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d05b      	beq.n	8005ee8 <HAL_RCC_OscConfig+0x108>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d157      	bne.n	8005ee8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	e242      	b.n	80062c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e44:	d106      	bne.n	8005e54 <HAL_RCC_OscConfig+0x74>
 8005e46:	4b76      	ldr	r3, [pc, #472]	@ (8006020 <HAL_RCC_OscConfig+0x240>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a75      	ldr	r2, [pc, #468]	@ (8006020 <HAL_RCC_OscConfig+0x240>)
 8005e4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e50:	6013      	str	r3, [r2, #0]
 8005e52:	e01d      	b.n	8005e90 <HAL_RCC_OscConfig+0xb0>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005e5c:	d10c      	bne.n	8005e78 <HAL_RCC_OscConfig+0x98>
 8005e5e:	4b70      	ldr	r3, [pc, #448]	@ (8006020 <HAL_RCC_OscConfig+0x240>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a6f      	ldr	r2, [pc, #444]	@ (8006020 <HAL_RCC_OscConfig+0x240>)
 8005e64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005e68:	6013      	str	r3, [r2, #0]
 8005e6a:	4b6d      	ldr	r3, [pc, #436]	@ (8006020 <HAL_RCC_OscConfig+0x240>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a6c      	ldr	r2, [pc, #432]	@ (8006020 <HAL_RCC_OscConfig+0x240>)
 8005e70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e74:	6013      	str	r3, [r2, #0]
 8005e76:	e00b      	b.n	8005e90 <HAL_RCC_OscConfig+0xb0>
 8005e78:	4b69      	ldr	r3, [pc, #420]	@ (8006020 <HAL_RCC_OscConfig+0x240>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a68      	ldr	r2, [pc, #416]	@ (8006020 <HAL_RCC_OscConfig+0x240>)
 8005e7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e82:	6013      	str	r3, [r2, #0]
 8005e84:	4b66      	ldr	r3, [pc, #408]	@ (8006020 <HAL_RCC_OscConfig+0x240>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a65      	ldr	r2, [pc, #404]	@ (8006020 <HAL_RCC_OscConfig+0x240>)
 8005e8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005e8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d013      	beq.n	8005ec0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e98:	f7fd fb2e 	bl	80034f8 <HAL_GetTick>
 8005e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e9e:	e008      	b.n	8005eb2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ea0:	f7fd fb2a 	bl	80034f8 <HAL_GetTick>
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	1ad3      	subs	r3, r2, r3
 8005eaa:	2b64      	cmp	r3, #100	@ 0x64
 8005eac:	d901      	bls.n	8005eb2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005eae:	2303      	movs	r3, #3
 8005eb0:	e207      	b.n	80062c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005eb2:	4b5b      	ldr	r3, [pc, #364]	@ (8006020 <HAL_RCC_OscConfig+0x240>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d0f0      	beq.n	8005ea0 <HAL_RCC_OscConfig+0xc0>
 8005ebe:	e014      	b.n	8005eea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ec0:	f7fd fb1a 	bl	80034f8 <HAL_GetTick>
 8005ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ec6:	e008      	b.n	8005eda <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ec8:	f7fd fb16 	bl	80034f8 <HAL_GetTick>
 8005ecc:	4602      	mov	r2, r0
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	1ad3      	subs	r3, r2, r3
 8005ed2:	2b64      	cmp	r3, #100	@ 0x64
 8005ed4:	d901      	bls.n	8005eda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005ed6:	2303      	movs	r3, #3
 8005ed8:	e1f3      	b.n	80062c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005eda:	4b51      	ldr	r3, [pc, #324]	@ (8006020 <HAL_RCC_OscConfig+0x240>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d1f0      	bne.n	8005ec8 <HAL_RCC_OscConfig+0xe8>
 8005ee6:	e000      	b.n	8005eea <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ee8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f003 0302 	and.w	r3, r3, #2
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d063      	beq.n	8005fbe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005ef6:	4b4a      	ldr	r3, [pc, #296]	@ (8006020 <HAL_RCC_OscConfig+0x240>)
 8005ef8:	689b      	ldr	r3, [r3, #8]
 8005efa:	f003 030c 	and.w	r3, r3, #12
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d00b      	beq.n	8005f1a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f02:	4b47      	ldr	r3, [pc, #284]	@ (8006020 <HAL_RCC_OscConfig+0x240>)
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005f0a:	2b08      	cmp	r3, #8
 8005f0c:	d11c      	bne.n	8005f48 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f0e:	4b44      	ldr	r3, [pc, #272]	@ (8006020 <HAL_RCC_OscConfig+0x240>)
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d116      	bne.n	8005f48 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f1a:	4b41      	ldr	r3, [pc, #260]	@ (8006020 <HAL_RCC_OscConfig+0x240>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f003 0302 	and.w	r3, r3, #2
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d005      	beq.n	8005f32 <HAL_RCC_OscConfig+0x152>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	68db      	ldr	r3, [r3, #12]
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d001      	beq.n	8005f32 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	e1c7      	b.n	80062c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f32:	4b3b      	ldr	r3, [pc, #236]	@ (8006020 <HAL_RCC_OscConfig+0x240>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	691b      	ldr	r3, [r3, #16]
 8005f3e:	00db      	lsls	r3, r3, #3
 8005f40:	4937      	ldr	r1, [pc, #220]	@ (8006020 <HAL_RCC_OscConfig+0x240>)
 8005f42:	4313      	orrs	r3, r2
 8005f44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f46:	e03a      	b.n	8005fbe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	68db      	ldr	r3, [r3, #12]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d020      	beq.n	8005f92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f50:	4b34      	ldr	r3, [pc, #208]	@ (8006024 <HAL_RCC_OscConfig+0x244>)
 8005f52:	2201      	movs	r2, #1
 8005f54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f56:	f7fd facf 	bl	80034f8 <HAL_GetTick>
 8005f5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f5c:	e008      	b.n	8005f70 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f5e:	f7fd facb 	bl	80034f8 <HAL_GetTick>
 8005f62:	4602      	mov	r2, r0
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	1ad3      	subs	r3, r2, r3
 8005f68:	2b02      	cmp	r3, #2
 8005f6a:	d901      	bls.n	8005f70 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005f6c:	2303      	movs	r3, #3
 8005f6e:	e1a8      	b.n	80062c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f70:	4b2b      	ldr	r3, [pc, #172]	@ (8006020 <HAL_RCC_OscConfig+0x240>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f003 0302 	and.w	r3, r3, #2
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d0f0      	beq.n	8005f5e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f7c:	4b28      	ldr	r3, [pc, #160]	@ (8006020 <HAL_RCC_OscConfig+0x240>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	691b      	ldr	r3, [r3, #16]
 8005f88:	00db      	lsls	r3, r3, #3
 8005f8a:	4925      	ldr	r1, [pc, #148]	@ (8006020 <HAL_RCC_OscConfig+0x240>)
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	600b      	str	r3, [r1, #0]
 8005f90:	e015      	b.n	8005fbe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f92:	4b24      	ldr	r3, [pc, #144]	@ (8006024 <HAL_RCC_OscConfig+0x244>)
 8005f94:	2200      	movs	r2, #0
 8005f96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f98:	f7fd faae 	bl	80034f8 <HAL_GetTick>
 8005f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f9e:	e008      	b.n	8005fb2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005fa0:	f7fd faaa 	bl	80034f8 <HAL_GetTick>
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	1ad3      	subs	r3, r2, r3
 8005faa:	2b02      	cmp	r3, #2
 8005fac:	d901      	bls.n	8005fb2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005fae:	2303      	movs	r3, #3
 8005fb0:	e187      	b.n	80062c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005fb2:	4b1b      	ldr	r3, [pc, #108]	@ (8006020 <HAL_RCC_OscConfig+0x240>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f003 0302 	and.w	r3, r3, #2
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d1f0      	bne.n	8005fa0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f003 0308 	and.w	r3, r3, #8
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d036      	beq.n	8006038 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	695b      	ldr	r3, [r3, #20]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d016      	beq.n	8006000 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005fd2:	4b15      	ldr	r3, [pc, #84]	@ (8006028 <HAL_RCC_OscConfig+0x248>)
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fd8:	f7fd fa8e 	bl	80034f8 <HAL_GetTick>
 8005fdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005fde:	e008      	b.n	8005ff2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005fe0:	f7fd fa8a 	bl	80034f8 <HAL_GetTick>
 8005fe4:	4602      	mov	r2, r0
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	1ad3      	subs	r3, r2, r3
 8005fea:	2b02      	cmp	r3, #2
 8005fec:	d901      	bls.n	8005ff2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005fee:	2303      	movs	r3, #3
 8005ff0:	e167      	b.n	80062c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ff2:	4b0b      	ldr	r3, [pc, #44]	@ (8006020 <HAL_RCC_OscConfig+0x240>)
 8005ff4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ff6:	f003 0302 	and.w	r3, r3, #2
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d0f0      	beq.n	8005fe0 <HAL_RCC_OscConfig+0x200>
 8005ffe:	e01b      	b.n	8006038 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006000:	4b09      	ldr	r3, [pc, #36]	@ (8006028 <HAL_RCC_OscConfig+0x248>)
 8006002:	2200      	movs	r2, #0
 8006004:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006006:	f7fd fa77 	bl	80034f8 <HAL_GetTick>
 800600a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800600c:	e00e      	b.n	800602c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800600e:	f7fd fa73 	bl	80034f8 <HAL_GetTick>
 8006012:	4602      	mov	r2, r0
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	1ad3      	subs	r3, r2, r3
 8006018:	2b02      	cmp	r3, #2
 800601a:	d907      	bls.n	800602c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800601c:	2303      	movs	r3, #3
 800601e:	e150      	b.n	80062c2 <HAL_RCC_OscConfig+0x4e2>
 8006020:	40023800 	.word	0x40023800
 8006024:	42470000 	.word	0x42470000
 8006028:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800602c:	4b88      	ldr	r3, [pc, #544]	@ (8006250 <HAL_RCC_OscConfig+0x470>)
 800602e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006030:	f003 0302 	and.w	r3, r3, #2
 8006034:	2b00      	cmp	r3, #0
 8006036:	d1ea      	bne.n	800600e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f003 0304 	and.w	r3, r3, #4
 8006040:	2b00      	cmp	r3, #0
 8006042:	f000 8097 	beq.w	8006174 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006046:	2300      	movs	r3, #0
 8006048:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800604a:	4b81      	ldr	r3, [pc, #516]	@ (8006250 <HAL_RCC_OscConfig+0x470>)
 800604c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800604e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006052:	2b00      	cmp	r3, #0
 8006054:	d10f      	bne.n	8006076 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006056:	2300      	movs	r3, #0
 8006058:	60bb      	str	r3, [r7, #8]
 800605a:	4b7d      	ldr	r3, [pc, #500]	@ (8006250 <HAL_RCC_OscConfig+0x470>)
 800605c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800605e:	4a7c      	ldr	r2, [pc, #496]	@ (8006250 <HAL_RCC_OscConfig+0x470>)
 8006060:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006064:	6413      	str	r3, [r2, #64]	@ 0x40
 8006066:	4b7a      	ldr	r3, [pc, #488]	@ (8006250 <HAL_RCC_OscConfig+0x470>)
 8006068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800606a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800606e:	60bb      	str	r3, [r7, #8]
 8006070:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006072:	2301      	movs	r3, #1
 8006074:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006076:	4b77      	ldr	r3, [pc, #476]	@ (8006254 <HAL_RCC_OscConfig+0x474>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800607e:	2b00      	cmp	r3, #0
 8006080:	d118      	bne.n	80060b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006082:	4b74      	ldr	r3, [pc, #464]	@ (8006254 <HAL_RCC_OscConfig+0x474>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a73      	ldr	r2, [pc, #460]	@ (8006254 <HAL_RCC_OscConfig+0x474>)
 8006088:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800608c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800608e:	f7fd fa33 	bl	80034f8 <HAL_GetTick>
 8006092:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006094:	e008      	b.n	80060a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006096:	f7fd fa2f 	bl	80034f8 <HAL_GetTick>
 800609a:	4602      	mov	r2, r0
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	1ad3      	subs	r3, r2, r3
 80060a0:	2b02      	cmp	r3, #2
 80060a2:	d901      	bls.n	80060a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80060a4:	2303      	movs	r3, #3
 80060a6:	e10c      	b.n	80062c2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060a8:	4b6a      	ldr	r3, [pc, #424]	@ (8006254 <HAL_RCC_OscConfig+0x474>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d0f0      	beq.n	8006096 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	d106      	bne.n	80060ca <HAL_RCC_OscConfig+0x2ea>
 80060bc:	4b64      	ldr	r3, [pc, #400]	@ (8006250 <HAL_RCC_OscConfig+0x470>)
 80060be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060c0:	4a63      	ldr	r2, [pc, #396]	@ (8006250 <HAL_RCC_OscConfig+0x470>)
 80060c2:	f043 0301 	orr.w	r3, r3, #1
 80060c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80060c8:	e01c      	b.n	8006104 <HAL_RCC_OscConfig+0x324>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	2b05      	cmp	r3, #5
 80060d0:	d10c      	bne.n	80060ec <HAL_RCC_OscConfig+0x30c>
 80060d2:	4b5f      	ldr	r3, [pc, #380]	@ (8006250 <HAL_RCC_OscConfig+0x470>)
 80060d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060d6:	4a5e      	ldr	r2, [pc, #376]	@ (8006250 <HAL_RCC_OscConfig+0x470>)
 80060d8:	f043 0304 	orr.w	r3, r3, #4
 80060dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80060de:	4b5c      	ldr	r3, [pc, #368]	@ (8006250 <HAL_RCC_OscConfig+0x470>)
 80060e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060e2:	4a5b      	ldr	r2, [pc, #364]	@ (8006250 <HAL_RCC_OscConfig+0x470>)
 80060e4:	f043 0301 	orr.w	r3, r3, #1
 80060e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80060ea:	e00b      	b.n	8006104 <HAL_RCC_OscConfig+0x324>
 80060ec:	4b58      	ldr	r3, [pc, #352]	@ (8006250 <HAL_RCC_OscConfig+0x470>)
 80060ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060f0:	4a57      	ldr	r2, [pc, #348]	@ (8006250 <HAL_RCC_OscConfig+0x470>)
 80060f2:	f023 0301 	bic.w	r3, r3, #1
 80060f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80060f8:	4b55      	ldr	r3, [pc, #340]	@ (8006250 <HAL_RCC_OscConfig+0x470>)
 80060fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060fc:	4a54      	ldr	r2, [pc, #336]	@ (8006250 <HAL_RCC_OscConfig+0x470>)
 80060fe:	f023 0304 	bic.w	r3, r3, #4
 8006102:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d015      	beq.n	8006138 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800610c:	f7fd f9f4 	bl	80034f8 <HAL_GetTick>
 8006110:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006112:	e00a      	b.n	800612a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006114:	f7fd f9f0 	bl	80034f8 <HAL_GetTick>
 8006118:	4602      	mov	r2, r0
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	1ad3      	subs	r3, r2, r3
 800611e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006122:	4293      	cmp	r3, r2
 8006124:	d901      	bls.n	800612a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006126:	2303      	movs	r3, #3
 8006128:	e0cb      	b.n	80062c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800612a:	4b49      	ldr	r3, [pc, #292]	@ (8006250 <HAL_RCC_OscConfig+0x470>)
 800612c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800612e:	f003 0302 	and.w	r3, r3, #2
 8006132:	2b00      	cmp	r3, #0
 8006134:	d0ee      	beq.n	8006114 <HAL_RCC_OscConfig+0x334>
 8006136:	e014      	b.n	8006162 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006138:	f7fd f9de 	bl	80034f8 <HAL_GetTick>
 800613c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800613e:	e00a      	b.n	8006156 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006140:	f7fd f9da 	bl	80034f8 <HAL_GetTick>
 8006144:	4602      	mov	r2, r0
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	1ad3      	subs	r3, r2, r3
 800614a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800614e:	4293      	cmp	r3, r2
 8006150:	d901      	bls.n	8006156 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006152:	2303      	movs	r3, #3
 8006154:	e0b5      	b.n	80062c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006156:	4b3e      	ldr	r3, [pc, #248]	@ (8006250 <HAL_RCC_OscConfig+0x470>)
 8006158:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800615a:	f003 0302 	and.w	r3, r3, #2
 800615e:	2b00      	cmp	r3, #0
 8006160:	d1ee      	bne.n	8006140 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006162:	7dfb      	ldrb	r3, [r7, #23]
 8006164:	2b01      	cmp	r3, #1
 8006166:	d105      	bne.n	8006174 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006168:	4b39      	ldr	r3, [pc, #228]	@ (8006250 <HAL_RCC_OscConfig+0x470>)
 800616a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800616c:	4a38      	ldr	r2, [pc, #224]	@ (8006250 <HAL_RCC_OscConfig+0x470>)
 800616e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006172:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	699b      	ldr	r3, [r3, #24]
 8006178:	2b00      	cmp	r3, #0
 800617a:	f000 80a1 	beq.w	80062c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800617e:	4b34      	ldr	r3, [pc, #208]	@ (8006250 <HAL_RCC_OscConfig+0x470>)
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	f003 030c 	and.w	r3, r3, #12
 8006186:	2b08      	cmp	r3, #8
 8006188:	d05c      	beq.n	8006244 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	699b      	ldr	r3, [r3, #24]
 800618e:	2b02      	cmp	r3, #2
 8006190:	d141      	bne.n	8006216 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006192:	4b31      	ldr	r3, [pc, #196]	@ (8006258 <HAL_RCC_OscConfig+0x478>)
 8006194:	2200      	movs	r2, #0
 8006196:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006198:	f7fd f9ae 	bl	80034f8 <HAL_GetTick>
 800619c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800619e:	e008      	b.n	80061b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061a0:	f7fd f9aa 	bl	80034f8 <HAL_GetTick>
 80061a4:	4602      	mov	r2, r0
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	1ad3      	subs	r3, r2, r3
 80061aa:	2b02      	cmp	r3, #2
 80061ac:	d901      	bls.n	80061b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80061ae:	2303      	movs	r3, #3
 80061b0:	e087      	b.n	80062c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061b2:	4b27      	ldr	r3, [pc, #156]	@ (8006250 <HAL_RCC_OscConfig+0x470>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d1f0      	bne.n	80061a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	69da      	ldr	r2, [r3, #28]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6a1b      	ldr	r3, [r3, #32]
 80061c6:	431a      	orrs	r2, r3
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061cc:	019b      	lsls	r3, r3, #6
 80061ce:	431a      	orrs	r2, r3
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061d4:	085b      	lsrs	r3, r3, #1
 80061d6:	3b01      	subs	r3, #1
 80061d8:	041b      	lsls	r3, r3, #16
 80061da:	431a      	orrs	r2, r3
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061e0:	061b      	lsls	r3, r3, #24
 80061e2:	491b      	ldr	r1, [pc, #108]	@ (8006250 <HAL_RCC_OscConfig+0x470>)
 80061e4:	4313      	orrs	r3, r2
 80061e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80061e8:	4b1b      	ldr	r3, [pc, #108]	@ (8006258 <HAL_RCC_OscConfig+0x478>)
 80061ea:	2201      	movs	r2, #1
 80061ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061ee:	f7fd f983 	bl	80034f8 <HAL_GetTick>
 80061f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061f4:	e008      	b.n	8006208 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061f6:	f7fd f97f 	bl	80034f8 <HAL_GetTick>
 80061fa:	4602      	mov	r2, r0
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	1ad3      	subs	r3, r2, r3
 8006200:	2b02      	cmp	r3, #2
 8006202:	d901      	bls.n	8006208 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006204:	2303      	movs	r3, #3
 8006206:	e05c      	b.n	80062c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006208:	4b11      	ldr	r3, [pc, #68]	@ (8006250 <HAL_RCC_OscConfig+0x470>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006210:	2b00      	cmp	r3, #0
 8006212:	d0f0      	beq.n	80061f6 <HAL_RCC_OscConfig+0x416>
 8006214:	e054      	b.n	80062c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006216:	4b10      	ldr	r3, [pc, #64]	@ (8006258 <HAL_RCC_OscConfig+0x478>)
 8006218:	2200      	movs	r2, #0
 800621a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800621c:	f7fd f96c 	bl	80034f8 <HAL_GetTick>
 8006220:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006222:	e008      	b.n	8006236 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006224:	f7fd f968 	bl	80034f8 <HAL_GetTick>
 8006228:	4602      	mov	r2, r0
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	1ad3      	subs	r3, r2, r3
 800622e:	2b02      	cmp	r3, #2
 8006230:	d901      	bls.n	8006236 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006232:	2303      	movs	r3, #3
 8006234:	e045      	b.n	80062c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006236:	4b06      	ldr	r3, [pc, #24]	@ (8006250 <HAL_RCC_OscConfig+0x470>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800623e:	2b00      	cmp	r3, #0
 8006240:	d1f0      	bne.n	8006224 <HAL_RCC_OscConfig+0x444>
 8006242:	e03d      	b.n	80062c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	699b      	ldr	r3, [r3, #24]
 8006248:	2b01      	cmp	r3, #1
 800624a:	d107      	bne.n	800625c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800624c:	2301      	movs	r3, #1
 800624e:	e038      	b.n	80062c2 <HAL_RCC_OscConfig+0x4e2>
 8006250:	40023800 	.word	0x40023800
 8006254:	40007000 	.word	0x40007000
 8006258:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800625c:	4b1b      	ldr	r3, [pc, #108]	@ (80062cc <HAL_RCC_OscConfig+0x4ec>)
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	699b      	ldr	r3, [r3, #24]
 8006266:	2b01      	cmp	r3, #1
 8006268:	d028      	beq.n	80062bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006274:	429a      	cmp	r2, r3
 8006276:	d121      	bne.n	80062bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006282:	429a      	cmp	r2, r3
 8006284:	d11a      	bne.n	80062bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006286:	68fa      	ldr	r2, [r7, #12]
 8006288:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800628c:	4013      	ands	r3, r2
 800628e:	687a      	ldr	r2, [r7, #4]
 8006290:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006292:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006294:	4293      	cmp	r3, r2
 8006296:	d111      	bne.n	80062bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062a2:	085b      	lsrs	r3, r3, #1
 80062a4:	3b01      	subs	r3, #1
 80062a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80062a8:	429a      	cmp	r2, r3
 80062aa:	d107      	bne.n	80062bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80062b8:	429a      	cmp	r2, r3
 80062ba:	d001      	beq.n	80062c0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80062bc:	2301      	movs	r3, #1
 80062be:	e000      	b.n	80062c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80062c0:	2300      	movs	r3, #0
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3718      	adds	r7, #24
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}
 80062ca:	bf00      	nop
 80062cc:	40023800 	.word	0x40023800

080062d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b084      	sub	sp, #16
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
 80062d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d101      	bne.n	80062e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80062e0:	2301      	movs	r3, #1
 80062e2:	e0cc      	b.n	800647e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80062e4:	4b68      	ldr	r3, [pc, #416]	@ (8006488 <HAL_RCC_ClockConfig+0x1b8>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f003 030f 	and.w	r3, r3, #15
 80062ec:	683a      	ldr	r2, [r7, #0]
 80062ee:	429a      	cmp	r2, r3
 80062f0:	d90c      	bls.n	800630c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062f2:	4b65      	ldr	r3, [pc, #404]	@ (8006488 <HAL_RCC_ClockConfig+0x1b8>)
 80062f4:	683a      	ldr	r2, [r7, #0]
 80062f6:	b2d2      	uxtb	r2, r2
 80062f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80062fa:	4b63      	ldr	r3, [pc, #396]	@ (8006488 <HAL_RCC_ClockConfig+0x1b8>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f003 030f 	and.w	r3, r3, #15
 8006302:	683a      	ldr	r2, [r7, #0]
 8006304:	429a      	cmp	r2, r3
 8006306:	d001      	beq.n	800630c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006308:	2301      	movs	r3, #1
 800630a:	e0b8      	b.n	800647e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f003 0302 	and.w	r3, r3, #2
 8006314:	2b00      	cmp	r3, #0
 8006316:	d020      	beq.n	800635a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f003 0304 	and.w	r3, r3, #4
 8006320:	2b00      	cmp	r3, #0
 8006322:	d005      	beq.n	8006330 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006324:	4b59      	ldr	r3, [pc, #356]	@ (800648c <HAL_RCC_ClockConfig+0x1bc>)
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	4a58      	ldr	r2, [pc, #352]	@ (800648c <HAL_RCC_ClockConfig+0x1bc>)
 800632a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800632e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f003 0308 	and.w	r3, r3, #8
 8006338:	2b00      	cmp	r3, #0
 800633a:	d005      	beq.n	8006348 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800633c:	4b53      	ldr	r3, [pc, #332]	@ (800648c <HAL_RCC_ClockConfig+0x1bc>)
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	4a52      	ldr	r2, [pc, #328]	@ (800648c <HAL_RCC_ClockConfig+0x1bc>)
 8006342:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006346:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006348:	4b50      	ldr	r3, [pc, #320]	@ (800648c <HAL_RCC_ClockConfig+0x1bc>)
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	689b      	ldr	r3, [r3, #8]
 8006354:	494d      	ldr	r1, [pc, #308]	@ (800648c <HAL_RCC_ClockConfig+0x1bc>)
 8006356:	4313      	orrs	r3, r2
 8006358:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f003 0301 	and.w	r3, r3, #1
 8006362:	2b00      	cmp	r3, #0
 8006364:	d044      	beq.n	80063f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	2b01      	cmp	r3, #1
 800636c:	d107      	bne.n	800637e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800636e:	4b47      	ldr	r3, [pc, #284]	@ (800648c <HAL_RCC_ClockConfig+0x1bc>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006376:	2b00      	cmp	r3, #0
 8006378:	d119      	bne.n	80063ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	e07f      	b.n	800647e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	2b02      	cmp	r3, #2
 8006384:	d003      	beq.n	800638e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800638a:	2b03      	cmp	r3, #3
 800638c:	d107      	bne.n	800639e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800638e:	4b3f      	ldr	r3, [pc, #252]	@ (800648c <HAL_RCC_ClockConfig+0x1bc>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006396:	2b00      	cmp	r3, #0
 8006398:	d109      	bne.n	80063ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800639a:	2301      	movs	r3, #1
 800639c:	e06f      	b.n	800647e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800639e:	4b3b      	ldr	r3, [pc, #236]	@ (800648c <HAL_RCC_ClockConfig+0x1bc>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f003 0302 	and.w	r3, r3, #2
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d101      	bne.n	80063ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063aa:	2301      	movs	r3, #1
 80063ac:	e067      	b.n	800647e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80063ae:	4b37      	ldr	r3, [pc, #220]	@ (800648c <HAL_RCC_ClockConfig+0x1bc>)
 80063b0:	689b      	ldr	r3, [r3, #8]
 80063b2:	f023 0203 	bic.w	r2, r3, #3
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	4934      	ldr	r1, [pc, #208]	@ (800648c <HAL_RCC_ClockConfig+0x1bc>)
 80063bc:	4313      	orrs	r3, r2
 80063be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80063c0:	f7fd f89a 	bl	80034f8 <HAL_GetTick>
 80063c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063c6:	e00a      	b.n	80063de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063c8:	f7fd f896 	bl	80034f8 <HAL_GetTick>
 80063cc:	4602      	mov	r2, r0
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	1ad3      	subs	r3, r2, r3
 80063d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d901      	bls.n	80063de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80063da:	2303      	movs	r3, #3
 80063dc:	e04f      	b.n	800647e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063de:	4b2b      	ldr	r3, [pc, #172]	@ (800648c <HAL_RCC_ClockConfig+0x1bc>)
 80063e0:	689b      	ldr	r3, [r3, #8]
 80063e2:	f003 020c 	and.w	r2, r3, #12
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	009b      	lsls	r3, r3, #2
 80063ec:	429a      	cmp	r2, r3
 80063ee:	d1eb      	bne.n	80063c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80063f0:	4b25      	ldr	r3, [pc, #148]	@ (8006488 <HAL_RCC_ClockConfig+0x1b8>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f003 030f 	and.w	r3, r3, #15
 80063f8:	683a      	ldr	r2, [r7, #0]
 80063fa:	429a      	cmp	r2, r3
 80063fc:	d20c      	bcs.n	8006418 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063fe:	4b22      	ldr	r3, [pc, #136]	@ (8006488 <HAL_RCC_ClockConfig+0x1b8>)
 8006400:	683a      	ldr	r2, [r7, #0]
 8006402:	b2d2      	uxtb	r2, r2
 8006404:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006406:	4b20      	ldr	r3, [pc, #128]	@ (8006488 <HAL_RCC_ClockConfig+0x1b8>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f003 030f 	and.w	r3, r3, #15
 800640e:	683a      	ldr	r2, [r7, #0]
 8006410:	429a      	cmp	r2, r3
 8006412:	d001      	beq.n	8006418 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006414:	2301      	movs	r3, #1
 8006416:	e032      	b.n	800647e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f003 0304 	and.w	r3, r3, #4
 8006420:	2b00      	cmp	r3, #0
 8006422:	d008      	beq.n	8006436 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006424:	4b19      	ldr	r3, [pc, #100]	@ (800648c <HAL_RCC_ClockConfig+0x1bc>)
 8006426:	689b      	ldr	r3, [r3, #8]
 8006428:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	68db      	ldr	r3, [r3, #12]
 8006430:	4916      	ldr	r1, [pc, #88]	@ (800648c <HAL_RCC_ClockConfig+0x1bc>)
 8006432:	4313      	orrs	r3, r2
 8006434:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f003 0308 	and.w	r3, r3, #8
 800643e:	2b00      	cmp	r3, #0
 8006440:	d009      	beq.n	8006456 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006442:	4b12      	ldr	r3, [pc, #72]	@ (800648c <HAL_RCC_ClockConfig+0x1bc>)
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	691b      	ldr	r3, [r3, #16]
 800644e:	00db      	lsls	r3, r3, #3
 8006450:	490e      	ldr	r1, [pc, #56]	@ (800648c <HAL_RCC_ClockConfig+0x1bc>)
 8006452:	4313      	orrs	r3, r2
 8006454:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006456:	f000 f821 	bl	800649c <HAL_RCC_GetSysClockFreq>
 800645a:	4602      	mov	r2, r0
 800645c:	4b0b      	ldr	r3, [pc, #44]	@ (800648c <HAL_RCC_ClockConfig+0x1bc>)
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	091b      	lsrs	r3, r3, #4
 8006462:	f003 030f 	and.w	r3, r3, #15
 8006466:	490a      	ldr	r1, [pc, #40]	@ (8006490 <HAL_RCC_ClockConfig+0x1c0>)
 8006468:	5ccb      	ldrb	r3, [r1, r3]
 800646a:	fa22 f303 	lsr.w	r3, r2, r3
 800646e:	4a09      	ldr	r2, [pc, #36]	@ (8006494 <HAL_RCC_ClockConfig+0x1c4>)
 8006470:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006472:	4b09      	ldr	r3, [pc, #36]	@ (8006498 <HAL_RCC_ClockConfig+0x1c8>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4618      	mov	r0, r3
 8006478:	f7fc fffa 	bl	8003470 <HAL_InitTick>

  return HAL_OK;
 800647c:	2300      	movs	r3, #0
}
 800647e:	4618      	mov	r0, r3
 8006480:	3710      	adds	r7, #16
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}
 8006486:	bf00      	nop
 8006488:	40023c00 	.word	0x40023c00
 800648c:	40023800 	.word	0x40023800
 8006490:	08008d78 	.word	0x08008d78
 8006494:	20000000 	.word	0x20000000
 8006498:	20000080 	.word	0x20000080

0800649c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800649c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80064a0:	b094      	sub	sp, #80	@ 0x50
 80064a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80064a4:	2300      	movs	r3, #0
 80064a6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80064a8:	2300      	movs	r3, #0
 80064aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80064ac:	2300      	movs	r3, #0
 80064ae:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80064b0:	2300      	movs	r3, #0
 80064b2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80064b4:	4b79      	ldr	r3, [pc, #484]	@ (800669c <HAL_RCC_GetSysClockFreq+0x200>)
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	f003 030c 	and.w	r3, r3, #12
 80064bc:	2b08      	cmp	r3, #8
 80064be:	d00d      	beq.n	80064dc <HAL_RCC_GetSysClockFreq+0x40>
 80064c0:	2b08      	cmp	r3, #8
 80064c2:	f200 80e1 	bhi.w	8006688 <HAL_RCC_GetSysClockFreq+0x1ec>
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d002      	beq.n	80064d0 <HAL_RCC_GetSysClockFreq+0x34>
 80064ca:	2b04      	cmp	r3, #4
 80064cc:	d003      	beq.n	80064d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80064ce:	e0db      	b.n	8006688 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80064d0:	4b73      	ldr	r3, [pc, #460]	@ (80066a0 <HAL_RCC_GetSysClockFreq+0x204>)
 80064d2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80064d4:	e0db      	b.n	800668e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80064d6:	4b73      	ldr	r3, [pc, #460]	@ (80066a4 <HAL_RCC_GetSysClockFreq+0x208>)
 80064d8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80064da:	e0d8      	b.n	800668e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80064dc:	4b6f      	ldr	r3, [pc, #444]	@ (800669c <HAL_RCC_GetSysClockFreq+0x200>)
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80064e4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80064e6:	4b6d      	ldr	r3, [pc, #436]	@ (800669c <HAL_RCC_GetSysClockFreq+0x200>)
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d063      	beq.n	80065ba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80064f2:	4b6a      	ldr	r3, [pc, #424]	@ (800669c <HAL_RCC_GetSysClockFreq+0x200>)
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	099b      	lsrs	r3, r3, #6
 80064f8:	2200      	movs	r2, #0
 80064fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80064fc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80064fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006500:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006504:	633b      	str	r3, [r7, #48]	@ 0x30
 8006506:	2300      	movs	r3, #0
 8006508:	637b      	str	r3, [r7, #52]	@ 0x34
 800650a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800650e:	4622      	mov	r2, r4
 8006510:	462b      	mov	r3, r5
 8006512:	f04f 0000 	mov.w	r0, #0
 8006516:	f04f 0100 	mov.w	r1, #0
 800651a:	0159      	lsls	r1, r3, #5
 800651c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006520:	0150      	lsls	r0, r2, #5
 8006522:	4602      	mov	r2, r0
 8006524:	460b      	mov	r3, r1
 8006526:	4621      	mov	r1, r4
 8006528:	1a51      	subs	r1, r2, r1
 800652a:	6139      	str	r1, [r7, #16]
 800652c:	4629      	mov	r1, r5
 800652e:	eb63 0301 	sbc.w	r3, r3, r1
 8006532:	617b      	str	r3, [r7, #20]
 8006534:	f04f 0200 	mov.w	r2, #0
 8006538:	f04f 0300 	mov.w	r3, #0
 800653c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006540:	4659      	mov	r1, fp
 8006542:	018b      	lsls	r3, r1, #6
 8006544:	4651      	mov	r1, sl
 8006546:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800654a:	4651      	mov	r1, sl
 800654c:	018a      	lsls	r2, r1, #6
 800654e:	4651      	mov	r1, sl
 8006550:	ebb2 0801 	subs.w	r8, r2, r1
 8006554:	4659      	mov	r1, fp
 8006556:	eb63 0901 	sbc.w	r9, r3, r1
 800655a:	f04f 0200 	mov.w	r2, #0
 800655e:	f04f 0300 	mov.w	r3, #0
 8006562:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006566:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800656a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800656e:	4690      	mov	r8, r2
 8006570:	4699      	mov	r9, r3
 8006572:	4623      	mov	r3, r4
 8006574:	eb18 0303 	adds.w	r3, r8, r3
 8006578:	60bb      	str	r3, [r7, #8]
 800657a:	462b      	mov	r3, r5
 800657c:	eb49 0303 	adc.w	r3, r9, r3
 8006580:	60fb      	str	r3, [r7, #12]
 8006582:	f04f 0200 	mov.w	r2, #0
 8006586:	f04f 0300 	mov.w	r3, #0
 800658a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800658e:	4629      	mov	r1, r5
 8006590:	024b      	lsls	r3, r1, #9
 8006592:	4621      	mov	r1, r4
 8006594:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006598:	4621      	mov	r1, r4
 800659a:	024a      	lsls	r2, r1, #9
 800659c:	4610      	mov	r0, r2
 800659e:	4619      	mov	r1, r3
 80065a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065a2:	2200      	movs	r2, #0
 80065a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80065a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80065a8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80065ac:	f7f9 fe70 	bl	8000290 <__aeabi_uldivmod>
 80065b0:	4602      	mov	r2, r0
 80065b2:	460b      	mov	r3, r1
 80065b4:	4613      	mov	r3, r2
 80065b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80065b8:	e058      	b.n	800666c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80065ba:	4b38      	ldr	r3, [pc, #224]	@ (800669c <HAL_RCC_GetSysClockFreq+0x200>)
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	099b      	lsrs	r3, r3, #6
 80065c0:	2200      	movs	r2, #0
 80065c2:	4618      	mov	r0, r3
 80065c4:	4611      	mov	r1, r2
 80065c6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80065ca:	623b      	str	r3, [r7, #32]
 80065cc:	2300      	movs	r3, #0
 80065ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80065d0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80065d4:	4642      	mov	r2, r8
 80065d6:	464b      	mov	r3, r9
 80065d8:	f04f 0000 	mov.w	r0, #0
 80065dc:	f04f 0100 	mov.w	r1, #0
 80065e0:	0159      	lsls	r1, r3, #5
 80065e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80065e6:	0150      	lsls	r0, r2, #5
 80065e8:	4602      	mov	r2, r0
 80065ea:	460b      	mov	r3, r1
 80065ec:	4641      	mov	r1, r8
 80065ee:	ebb2 0a01 	subs.w	sl, r2, r1
 80065f2:	4649      	mov	r1, r9
 80065f4:	eb63 0b01 	sbc.w	fp, r3, r1
 80065f8:	f04f 0200 	mov.w	r2, #0
 80065fc:	f04f 0300 	mov.w	r3, #0
 8006600:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006604:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006608:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800660c:	ebb2 040a 	subs.w	r4, r2, sl
 8006610:	eb63 050b 	sbc.w	r5, r3, fp
 8006614:	f04f 0200 	mov.w	r2, #0
 8006618:	f04f 0300 	mov.w	r3, #0
 800661c:	00eb      	lsls	r3, r5, #3
 800661e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006622:	00e2      	lsls	r2, r4, #3
 8006624:	4614      	mov	r4, r2
 8006626:	461d      	mov	r5, r3
 8006628:	4643      	mov	r3, r8
 800662a:	18e3      	adds	r3, r4, r3
 800662c:	603b      	str	r3, [r7, #0]
 800662e:	464b      	mov	r3, r9
 8006630:	eb45 0303 	adc.w	r3, r5, r3
 8006634:	607b      	str	r3, [r7, #4]
 8006636:	f04f 0200 	mov.w	r2, #0
 800663a:	f04f 0300 	mov.w	r3, #0
 800663e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006642:	4629      	mov	r1, r5
 8006644:	028b      	lsls	r3, r1, #10
 8006646:	4621      	mov	r1, r4
 8006648:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800664c:	4621      	mov	r1, r4
 800664e:	028a      	lsls	r2, r1, #10
 8006650:	4610      	mov	r0, r2
 8006652:	4619      	mov	r1, r3
 8006654:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006656:	2200      	movs	r2, #0
 8006658:	61bb      	str	r3, [r7, #24]
 800665a:	61fa      	str	r2, [r7, #28]
 800665c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006660:	f7f9 fe16 	bl	8000290 <__aeabi_uldivmod>
 8006664:	4602      	mov	r2, r0
 8006666:	460b      	mov	r3, r1
 8006668:	4613      	mov	r3, r2
 800666a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800666c:	4b0b      	ldr	r3, [pc, #44]	@ (800669c <HAL_RCC_GetSysClockFreq+0x200>)
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	0c1b      	lsrs	r3, r3, #16
 8006672:	f003 0303 	and.w	r3, r3, #3
 8006676:	3301      	adds	r3, #1
 8006678:	005b      	lsls	r3, r3, #1
 800667a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800667c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800667e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006680:	fbb2 f3f3 	udiv	r3, r2, r3
 8006684:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006686:	e002      	b.n	800668e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006688:	4b05      	ldr	r3, [pc, #20]	@ (80066a0 <HAL_RCC_GetSysClockFreq+0x204>)
 800668a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800668c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800668e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006690:	4618      	mov	r0, r3
 8006692:	3750      	adds	r7, #80	@ 0x50
 8006694:	46bd      	mov	sp, r7
 8006696:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800669a:	bf00      	nop
 800669c:	40023800 	.word	0x40023800
 80066a0:	00f42400 	.word	0x00f42400
 80066a4:	007a1200 	.word	0x007a1200

080066a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80066a8:	b480      	push	{r7}
 80066aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80066ac:	4b03      	ldr	r3, [pc, #12]	@ (80066bc <HAL_RCC_GetHCLKFreq+0x14>)
 80066ae:	681b      	ldr	r3, [r3, #0]
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	46bd      	mov	sp, r7
 80066b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b8:	4770      	bx	lr
 80066ba:	bf00      	nop
 80066bc:	20000000 	.word	0x20000000

080066c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80066c4:	f7ff fff0 	bl	80066a8 <HAL_RCC_GetHCLKFreq>
 80066c8:	4602      	mov	r2, r0
 80066ca:	4b05      	ldr	r3, [pc, #20]	@ (80066e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80066cc:	689b      	ldr	r3, [r3, #8]
 80066ce:	0a9b      	lsrs	r3, r3, #10
 80066d0:	f003 0307 	and.w	r3, r3, #7
 80066d4:	4903      	ldr	r1, [pc, #12]	@ (80066e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80066d6:	5ccb      	ldrb	r3, [r1, r3]
 80066d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80066dc:	4618      	mov	r0, r3
 80066de:	bd80      	pop	{r7, pc}
 80066e0:	40023800 	.word	0x40023800
 80066e4:	08008d88 	.word	0x08008d88

080066e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b086      	sub	sp, #24
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80066f0:	2300      	movs	r3, #0
 80066f2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80066f4:	2300      	movs	r3, #0
 80066f6:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f003 0301 	and.w	r3, r3, #1
 8006700:	2b00      	cmp	r3, #0
 8006702:	d10b      	bne.n	800671c <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800670c:	2b00      	cmp	r3, #0
 800670e:	d105      	bne.n	800671c <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006718:	2b00      	cmp	r3, #0
 800671a:	d075      	beq.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800671c:	4b91      	ldr	r3, [pc, #580]	@ (8006964 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800671e:	2200      	movs	r2, #0
 8006720:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006722:	f7fc fee9 	bl	80034f8 <HAL_GetTick>
 8006726:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006728:	e008      	b.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800672a:	f7fc fee5 	bl	80034f8 <HAL_GetTick>
 800672e:	4602      	mov	r2, r0
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	1ad3      	subs	r3, r2, r3
 8006734:	2b02      	cmp	r3, #2
 8006736:	d901      	bls.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006738:	2303      	movs	r3, #3
 800673a:	e189      	b.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800673c:	4b8a      	ldr	r3, [pc, #552]	@ (8006968 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006744:	2b00      	cmp	r3, #0
 8006746:	d1f0      	bne.n	800672a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f003 0301 	and.w	r3, r3, #1
 8006750:	2b00      	cmp	r3, #0
 8006752:	d009      	beq.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	019a      	lsls	r2, r3, #6
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	689b      	ldr	r3, [r3, #8]
 800675e:	071b      	lsls	r3, r3, #28
 8006760:	4981      	ldr	r1, [pc, #516]	@ (8006968 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006762:	4313      	orrs	r3, r2
 8006764:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f003 0302 	and.w	r3, r3, #2
 8006770:	2b00      	cmp	r3, #0
 8006772:	d01f      	beq.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006774:	4b7c      	ldr	r3, [pc, #496]	@ (8006968 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006776:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800677a:	0f1b      	lsrs	r3, r3, #28
 800677c:	f003 0307 	and.w	r3, r3, #7
 8006780:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	019a      	lsls	r2, r3, #6
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	68db      	ldr	r3, [r3, #12]
 800678c:	061b      	lsls	r3, r3, #24
 800678e:	431a      	orrs	r2, r3
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	071b      	lsls	r3, r3, #28
 8006794:	4974      	ldr	r1, [pc, #464]	@ (8006968 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006796:	4313      	orrs	r3, r2
 8006798:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800679c:	4b72      	ldr	r3, [pc, #456]	@ (8006968 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800679e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80067a2:	f023 021f 	bic.w	r2, r3, #31
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	69db      	ldr	r3, [r3, #28]
 80067aa:	3b01      	subs	r3, #1
 80067ac:	496e      	ldr	r1, [pc, #440]	@ (8006968 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80067ae:	4313      	orrs	r3, r2
 80067b0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d00d      	beq.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	019a      	lsls	r2, r3, #6
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	68db      	ldr	r3, [r3, #12]
 80067ca:	061b      	lsls	r3, r3, #24
 80067cc:	431a      	orrs	r2, r3
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	071b      	lsls	r3, r3, #28
 80067d4:	4964      	ldr	r1, [pc, #400]	@ (8006968 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80067d6:	4313      	orrs	r3, r2
 80067d8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80067dc:	4b61      	ldr	r3, [pc, #388]	@ (8006964 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80067de:	2201      	movs	r2, #1
 80067e0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80067e2:	f7fc fe89 	bl	80034f8 <HAL_GetTick>
 80067e6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80067e8:	e008      	b.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80067ea:	f7fc fe85 	bl	80034f8 <HAL_GetTick>
 80067ee:	4602      	mov	r2, r0
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	1ad3      	subs	r3, r2, r3
 80067f4:	2b02      	cmp	r3, #2
 80067f6:	d901      	bls.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80067f8:	2303      	movs	r3, #3
 80067fa:	e129      	b.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80067fc:	4b5a      	ldr	r3, [pc, #360]	@ (8006968 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006804:	2b00      	cmp	r3, #0
 8006806:	d0f0      	beq.n	80067ea <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f003 0304 	and.w	r3, r3, #4
 8006810:	2b00      	cmp	r3, #0
 8006812:	d105      	bne.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800681c:	2b00      	cmp	r3, #0
 800681e:	d079      	beq.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006820:	4b52      	ldr	r3, [pc, #328]	@ (800696c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006822:	2200      	movs	r2, #0
 8006824:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006826:	f7fc fe67 	bl	80034f8 <HAL_GetTick>
 800682a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800682c:	e008      	b.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800682e:	f7fc fe63 	bl	80034f8 <HAL_GetTick>
 8006832:	4602      	mov	r2, r0
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	1ad3      	subs	r3, r2, r3
 8006838:	2b02      	cmp	r3, #2
 800683a:	d901      	bls.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800683c:	2303      	movs	r3, #3
 800683e:	e107      	b.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006840:	4b49      	ldr	r3, [pc, #292]	@ (8006968 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006848:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800684c:	d0ef      	beq.n	800682e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f003 0304 	and.w	r3, r3, #4
 8006856:	2b00      	cmp	r3, #0
 8006858:	d020      	beq.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800685a:	4b43      	ldr	r3, [pc, #268]	@ (8006968 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800685c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006860:	0f1b      	lsrs	r3, r3, #28
 8006862:	f003 0307 	and.w	r3, r3, #7
 8006866:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	691b      	ldr	r3, [r3, #16]
 800686c:	019a      	lsls	r2, r3, #6
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	695b      	ldr	r3, [r3, #20]
 8006872:	061b      	lsls	r3, r3, #24
 8006874:	431a      	orrs	r2, r3
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	071b      	lsls	r3, r3, #28
 800687a:	493b      	ldr	r1, [pc, #236]	@ (8006968 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800687c:	4313      	orrs	r3, r2
 800687e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006882:	4b39      	ldr	r3, [pc, #228]	@ (8006968 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006884:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006888:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6a1b      	ldr	r3, [r3, #32]
 8006890:	3b01      	subs	r3, #1
 8006892:	021b      	lsls	r3, r3, #8
 8006894:	4934      	ldr	r1, [pc, #208]	@ (8006968 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006896:	4313      	orrs	r3, r2
 8006898:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f003 0308 	and.w	r3, r3, #8
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d01e      	beq.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80068a8:	4b2f      	ldr	r3, [pc, #188]	@ (8006968 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80068aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068ae:	0e1b      	lsrs	r3, r3, #24
 80068b0:	f003 030f 	and.w	r3, r3, #15
 80068b4:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	691b      	ldr	r3, [r3, #16]
 80068ba:	019a      	lsls	r2, r3, #6
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	061b      	lsls	r3, r3, #24
 80068c0:	431a      	orrs	r2, r3
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	699b      	ldr	r3, [r3, #24]
 80068c6:	071b      	lsls	r3, r3, #28
 80068c8:	4927      	ldr	r1, [pc, #156]	@ (8006968 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80068ca:	4313      	orrs	r3, r2
 80068cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80068d0:	4b25      	ldr	r3, [pc, #148]	@ (8006968 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80068d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80068d6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068de:	4922      	ldr	r1, [pc, #136]	@ (8006968 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80068e0:	4313      	orrs	r3, r2
 80068e2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80068e6:	4b21      	ldr	r3, [pc, #132]	@ (800696c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80068e8:	2201      	movs	r2, #1
 80068ea:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80068ec:	f7fc fe04 	bl	80034f8 <HAL_GetTick>
 80068f0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80068f2:	e008      	b.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80068f4:	f7fc fe00 	bl	80034f8 <HAL_GetTick>
 80068f8:	4602      	mov	r2, r0
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	1ad3      	subs	r3, r2, r3
 80068fe:	2b02      	cmp	r3, #2
 8006900:	d901      	bls.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006902:	2303      	movs	r3, #3
 8006904:	e0a4      	b.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006906:	4b18      	ldr	r3, [pc, #96]	@ (8006968 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800690e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006912:	d1ef      	bne.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f003 0320 	and.w	r3, r3, #32
 800691c:	2b00      	cmp	r3, #0
 800691e:	f000 808b 	beq.w	8006a38 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006922:	2300      	movs	r3, #0
 8006924:	60fb      	str	r3, [r7, #12]
 8006926:	4b10      	ldr	r3, [pc, #64]	@ (8006968 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800692a:	4a0f      	ldr	r2, [pc, #60]	@ (8006968 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800692c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006930:	6413      	str	r3, [r2, #64]	@ 0x40
 8006932:	4b0d      	ldr	r3, [pc, #52]	@ (8006968 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006936:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800693a:	60fb      	str	r3, [r7, #12]
 800693c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800693e:	4b0c      	ldr	r3, [pc, #48]	@ (8006970 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a0b      	ldr	r2, [pc, #44]	@ (8006970 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006944:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006948:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800694a:	f7fc fdd5 	bl	80034f8 <HAL_GetTick>
 800694e:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006950:	e010      	b.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006952:	f7fc fdd1 	bl	80034f8 <HAL_GetTick>
 8006956:	4602      	mov	r2, r0
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	1ad3      	subs	r3, r2, r3
 800695c:	2b02      	cmp	r3, #2
 800695e:	d909      	bls.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8006960:	2303      	movs	r3, #3
 8006962:	e075      	b.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8006964:	42470068 	.word	0x42470068
 8006968:	40023800 	.word	0x40023800
 800696c:	42470070 	.word	0x42470070
 8006970:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006974:	4b38      	ldr	r3, [pc, #224]	@ (8006a58 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800697c:	2b00      	cmp	r3, #0
 800697e:	d0e8      	beq.n	8006952 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006980:	4b36      	ldr	r3, [pc, #216]	@ (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006982:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006984:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006988:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d02f      	beq.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006994:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006998:	693a      	ldr	r2, [r7, #16]
 800699a:	429a      	cmp	r2, r3
 800699c:	d028      	beq.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800699e:	4b2f      	ldr	r3, [pc, #188]	@ (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80069a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80069a6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80069a8:	4b2d      	ldr	r3, [pc, #180]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80069aa:	2201      	movs	r2, #1
 80069ac:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80069ae:	4b2c      	ldr	r3, [pc, #176]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80069b0:	2200      	movs	r2, #0
 80069b2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80069b4:	4a29      	ldr	r2, [pc, #164]	@ (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80069ba:	4b28      	ldr	r3, [pc, #160]	@ (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80069bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069be:	f003 0301 	and.w	r3, r3, #1
 80069c2:	2b01      	cmp	r3, #1
 80069c4:	d114      	bne.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80069c6:	f7fc fd97 	bl	80034f8 <HAL_GetTick>
 80069ca:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069cc:	e00a      	b.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069ce:	f7fc fd93 	bl	80034f8 <HAL_GetTick>
 80069d2:	4602      	mov	r2, r0
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	1ad3      	subs	r3, r2, r3
 80069d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069dc:	4293      	cmp	r3, r2
 80069de:	d901      	bls.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80069e0:	2303      	movs	r3, #3
 80069e2:	e035      	b.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069e4:	4b1d      	ldr	r3, [pc, #116]	@ (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80069e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069e8:	f003 0302 	and.w	r3, r3, #2
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d0ee      	beq.n	80069ce <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069f4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80069f8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80069fc:	d10d      	bne.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0x332>
 80069fe:	4b17      	ldr	r3, [pc, #92]	@ (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006a00:	689b      	ldr	r3, [r3, #8]
 8006a02:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a0a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006a0e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a12:	4912      	ldr	r1, [pc, #72]	@ (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006a14:	4313      	orrs	r3, r2
 8006a16:	608b      	str	r3, [r1, #8]
 8006a18:	e005      	b.n	8006a26 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8006a1a:	4b10      	ldr	r3, [pc, #64]	@ (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006a1c:	689b      	ldr	r3, [r3, #8]
 8006a1e:	4a0f      	ldr	r2, [pc, #60]	@ (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006a20:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006a24:	6093      	str	r3, [r2, #8]
 8006a26:	4b0d      	ldr	r3, [pc, #52]	@ (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006a28:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a32:	490a      	ldr	r1, [pc, #40]	@ (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006a34:	4313      	orrs	r3, r2
 8006a36:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f003 0310 	and.w	r3, r3, #16
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d004      	beq.n	8006a4e <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8006a4a:	4b06      	ldr	r3, [pc, #24]	@ (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8006a4c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8006a4e:	2300      	movs	r3, #0
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	3718      	adds	r7, #24
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}
 8006a58:	40007000 	.word	0x40007000
 8006a5c:	40023800 	.word	0x40023800
 8006a60:	42470e40 	.word	0x42470e40
 8006a64:	424711e0 	.word	0x424711e0

08006a68 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b082      	sub	sp, #8
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d101      	bne.n	8006a7c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	e025      	b.n	8006ac8 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006a82:	b2db      	uxtb	r3, r3
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d106      	bne.n	8006a96 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f7fa fbeb 	bl	800126c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2202      	movs	r2, #2
 8006a9a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681a      	ldr	r2, [r3, #0]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	3304      	adds	r3, #4
 8006aa6:	4619      	mov	r1, r3
 8006aa8:	4610      	mov	r0, r2
 8006aaa:	f000 fe75 	bl	8007798 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6818      	ldr	r0, [r3, #0]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	461a      	mov	r2, r3
 8006ab8:	6839      	ldr	r1, [r7, #0]
 8006aba:	f000 feca 	bl	8007852 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2201      	movs	r2, #1
 8006ac2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8006ac6:	2300      	movs	r3, #0
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3708      	adds	r7, #8
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}

08006ad0 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b086      	sub	sp, #24
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	60f8      	str	r0, [r7, #12]
 8006ad8:	60b9      	str	r1, [r7, #8]
 8006ada:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006ae2:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8006ae4:	7dfb      	ldrb	r3, [r7, #23]
 8006ae6:	2b02      	cmp	r3, #2
 8006ae8:	d101      	bne.n	8006aee <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8006aea:	2302      	movs	r3, #2
 8006aec:	e021      	b.n	8006b32 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8006aee:	7dfb      	ldrb	r3, [r7, #23]
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	d002      	beq.n	8006afa <HAL_SDRAM_SendCommand+0x2a>
 8006af4:	7dfb      	ldrb	r3, [r7, #23]
 8006af6:	2b05      	cmp	r3, #5
 8006af8:	d118      	bne.n	8006b2c <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	2202      	movs	r2, #2
 8006afe:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	687a      	ldr	r2, [r7, #4]
 8006b08:	68b9      	ldr	r1, [r7, #8]
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f000 ff0a 	bl	8007924 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	2b02      	cmp	r3, #2
 8006b16:	d104      	bne.n	8006b22 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	2205      	movs	r2, #5
 8006b1c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006b20:	e006      	b.n	8006b30 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	2201      	movs	r2, #1
 8006b26:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006b2a:	e001      	b.n	8006b30 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	e000      	b.n	8006b32 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8006b30:	2300      	movs	r3, #0
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	3718      	adds	r7, #24
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}

08006b3a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8006b3a:	b580      	push	{r7, lr}
 8006b3c:	b082      	sub	sp, #8
 8006b3e:	af00      	add	r7, sp, #0
 8006b40:	6078      	str	r0, [r7, #4]
 8006b42:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006b4a:	b2db      	uxtb	r3, r3
 8006b4c:	2b02      	cmp	r3, #2
 8006b4e:	d101      	bne.n	8006b54 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8006b50:	2302      	movs	r3, #2
 8006b52:	e016      	b.n	8006b82 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006b5a:	b2db      	uxtb	r3, r3
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	d10f      	bne.n	8006b80 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2202      	movs	r2, #2
 8006b64:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	6839      	ldr	r1, [r7, #0]
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f000 ff15 	bl	800799e <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2201      	movs	r2, #1
 8006b78:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	e000      	b.n	8006b82 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8006b80:	2301      	movs	r3, #1
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3708      	adds	r7, #8
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}

08006b8a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006b8a:	b580      	push	{r7, lr}
 8006b8c:	b082      	sub	sp, #8
 8006b8e:	af00      	add	r7, sp, #0
 8006b90:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d101      	bne.n	8006b9c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006b98:	2301      	movs	r3, #1
 8006b9a:	e07b      	b.n	8006c94 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d108      	bne.n	8006bb6 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	685b      	ldr	r3, [r3, #4]
 8006ba8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006bac:	d009      	beq.n	8006bc2 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	61da      	str	r2, [r3, #28]
 8006bb4:	e005      	b.n	8006bc2 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006bce:	b2db      	uxtb	r3, r3
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d106      	bne.n	8006be2 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f7fa fa4d 	bl	800107c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2202      	movs	r2, #2
 8006be6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	681a      	ldr	r2, [r3, #0]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006bf8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	689b      	ldr	r3, [r3, #8]
 8006c06:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006c0a:	431a      	orrs	r2, r3
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	68db      	ldr	r3, [r3, #12]
 8006c10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006c14:	431a      	orrs	r2, r3
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	691b      	ldr	r3, [r3, #16]
 8006c1a:	f003 0302 	and.w	r3, r3, #2
 8006c1e:	431a      	orrs	r2, r3
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	695b      	ldr	r3, [r3, #20]
 8006c24:	f003 0301 	and.w	r3, r3, #1
 8006c28:	431a      	orrs	r2, r3
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	699b      	ldr	r3, [r3, #24]
 8006c2e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006c32:	431a      	orrs	r2, r3
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	69db      	ldr	r3, [r3, #28]
 8006c38:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006c3c:	431a      	orrs	r2, r3
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6a1b      	ldr	r3, [r3, #32]
 8006c42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c46:	ea42 0103 	orr.w	r1, r2, r3
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c4e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	430a      	orrs	r2, r1
 8006c58:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	699b      	ldr	r3, [r3, #24]
 8006c5e:	0c1b      	lsrs	r3, r3, #16
 8006c60:	f003 0104 	and.w	r1, r3, #4
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c68:	f003 0210 	and.w	r2, r3, #16
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	430a      	orrs	r2, r1
 8006c72:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	69da      	ldr	r2, [r3, #28]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006c82:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2200      	movs	r2, #0
 8006c88:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006c92:	2300      	movs	r3, #0
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	3708      	adds	r7, #8
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}

08006c9c <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b082      	sub	sp, #8
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d101      	bne.n	8006cae <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8006caa:	2301      	movs	r3, #1
 8006cac:	e01a      	b.n	8006ce4 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2202      	movs	r2, #2
 8006cb2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	681a      	ldr	r2, [r3, #0]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006cc4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f7fa fa20 	bl	800110c <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8006ce2:	2300      	movs	r3, #0
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3708      	adds	r7, #8
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}

08006cec <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b088      	sub	sp, #32
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	60f8      	str	r0, [r7, #12]
 8006cf4:	60b9      	str	r1, [r7, #8]
 8006cf6:	603b      	str	r3, [r7, #0]
 8006cf8:	4613      	mov	r3, r2
 8006cfa:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006cfc:	f7fc fbfc 	bl	80034f8 <HAL_GetTick>
 8006d00:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006d02:	88fb      	ldrh	r3, [r7, #6]
 8006d04:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006d0c:	b2db      	uxtb	r3, r3
 8006d0e:	2b01      	cmp	r3, #1
 8006d10:	d001      	beq.n	8006d16 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006d12:	2302      	movs	r3, #2
 8006d14:	e12a      	b.n	8006f6c <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d002      	beq.n	8006d22 <HAL_SPI_Transmit+0x36>
 8006d1c:	88fb      	ldrh	r3, [r7, #6]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d101      	bne.n	8006d26 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006d22:	2301      	movs	r3, #1
 8006d24:	e122      	b.n	8006f6c <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006d2c:	2b01      	cmp	r3, #1
 8006d2e:	d101      	bne.n	8006d34 <HAL_SPI_Transmit+0x48>
 8006d30:	2302      	movs	r3, #2
 8006d32:	e11b      	b.n	8006f6c <HAL_SPI_Transmit+0x280>
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	2201      	movs	r2, #1
 8006d38:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	2203      	movs	r2, #3
 8006d40:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2200      	movs	r2, #0
 8006d48:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	68ba      	ldr	r2, [r7, #8]
 8006d4e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	88fa      	ldrh	r2, [r7, #6]
 8006d54:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	88fa      	ldrh	r2, [r7, #6]
 8006d5a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	2200      	movs	r2, #0
 8006d66:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	2200      	movs	r2, #0
 8006d72:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2200      	movs	r2, #0
 8006d78:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	689b      	ldr	r3, [r3, #8]
 8006d7e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d82:	d10f      	bne.n	8006da4 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	681a      	ldr	r2, [r3, #0]
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006d92:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	681a      	ldr	r2, [r3, #0]
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006da2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dae:	2b40      	cmp	r3, #64	@ 0x40
 8006db0:	d007      	beq.n	8006dc2 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	681a      	ldr	r2, [r3, #0]
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006dc0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	68db      	ldr	r3, [r3, #12]
 8006dc6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006dca:	d152      	bne.n	8006e72 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d002      	beq.n	8006dda <HAL_SPI_Transmit+0xee>
 8006dd4:	8b7b      	ldrh	r3, [r7, #26]
 8006dd6:	2b01      	cmp	r3, #1
 8006dd8:	d145      	bne.n	8006e66 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dde:	881a      	ldrh	r2, [r3, #0]
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dea:	1c9a      	adds	r2, r3, #2
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006df4:	b29b      	uxth	r3, r3
 8006df6:	3b01      	subs	r3, #1
 8006df8:	b29a      	uxth	r2, r3
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006dfe:	e032      	b.n	8006e66 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	689b      	ldr	r3, [r3, #8]
 8006e06:	f003 0302 	and.w	r3, r3, #2
 8006e0a:	2b02      	cmp	r3, #2
 8006e0c:	d112      	bne.n	8006e34 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e12:	881a      	ldrh	r2, [r3, #0]
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e1e:	1c9a      	adds	r2, r3, #2
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006e28:	b29b      	uxth	r3, r3
 8006e2a:	3b01      	subs	r3, #1
 8006e2c:	b29a      	uxth	r2, r3
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006e32:	e018      	b.n	8006e66 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e34:	f7fc fb60 	bl	80034f8 <HAL_GetTick>
 8006e38:	4602      	mov	r2, r0
 8006e3a:	69fb      	ldr	r3, [r7, #28]
 8006e3c:	1ad3      	subs	r3, r2, r3
 8006e3e:	683a      	ldr	r2, [r7, #0]
 8006e40:	429a      	cmp	r2, r3
 8006e42:	d803      	bhi.n	8006e4c <HAL_SPI_Transmit+0x160>
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e4a:	d102      	bne.n	8006e52 <HAL_SPI_Transmit+0x166>
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d109      	bne.n	8006e66 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2201      	movs	r2, #1
 8006e56:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006e62:	2303      	movs	r3, #3
 8006e64:	e082      	b.n	8006f6c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006e6a:	b29b      	uxth	r3, r3
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d1c7      	bne.n	8006e00 <HAL_SPI_Transmit+0x114>
 8006e70:	e053      	b.n	8006f1a <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d002      	beq.n	8006e80 <HAL_SPI_Transmit+0x194>
 8006e7a:	8b7b      	ldrh	r3, [r7, #26]
 8006e7c:	2b01      	cmp	r3, #1
 8006e7e:	d147      	bne.n	8006f10 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	330c      	adds	r3, #12
 8006e8a:	7812      	ldrb	r2, [r2, #0]
 8006e8c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e92:	1c5a      	adds	r2, r3, #1
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006e9c:	b29b      	uxth	r3, r3
 8006e9e:	3b01      	subs	r3, #1
 8006ea0:	b29a      	uxth	r2, r3
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006ea6:	e033      	b.n	8006f10 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	689b      	ldr	r3, [r3, #8]
 8006eae:	f003 0302 	and.w	r3, r3, #2
 8006eb2:	2b02      	cmp	r3, #2
 8006eb4:	d113      	bne.n	8006ede <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	330c      	adds	r3, #12
 8006ec0:	7812      	ldrb	r2, [r2, #0]
 8006ec2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ec8:	1c5a      	adds	r2, r3, #1
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	3b01      	subs	r3, #1
 8006ed6:	b29a      	uxth	r2, r3
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006edc:	e018      	b.n	8006f10 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006ede:	f7fc fb0b 	bl	80034f8 <HAL_GetTick>
 8006ee2:	4602      	mov	r2, r0
 8006ee4:	69fb      	ldr	r3, [r7, #28]
 8006ee6:	1ad3      	subs	r3, r2, r3
 8006ee8:	683a      	ldr	r2, [r7, #0]
 8006eea:	429a      	cmp	r2, r3
 8006eec:	d803      	bhi.n	8006ef6 <HAL_SPI_Transmit+0x20a>
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ef4:	d102      	bne.n	8006efc <HAL_SPI_Transmit+0x210>
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d109      	bne.n	8006f10 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	2201      	movs	r2, #1
 8006f00:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	2200      	movs	r2, #0
 8006f08:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006f0c:	2303      	movs	r3, #3
 8006f0e:	e02d      	b.n	8006f6c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006f14:	b29b      	uxth	r3, r3
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d1c6      	bne.n	8006ea8 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006f1a:	69fa      	ldr	r2, [r7, #28]
 8006f1c:	6839      	ldr	r1, [r7, #0]
 8006f1e:	68f8      	ldr	r0, [r7, #12]
 8006f20:	f000 fbe6 	bl	80076f0 <SPI_EndRxTxTransaction>
 8006f24:	4603      	mov	r3, r0
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d002      	beq.n	8006f30 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	2220      	movs	r2, #32
 8006f2e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	689b      	ldr	r3, [r3, #8]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d10a      	bne.n	8006f4e <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006f38:	2300      	movs	r3, #0
 8006f3a:	617b      	str	r3, [r7, #20]
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	68db      	ldr	r3, [r3, #12]
 8006f42:	617b      	str	r3, [r7, #20]
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	689b      	ldr	r3, [r3, #8]
 8006f4a:	617b      	str	r3, [r7, #20]
 8006f4c:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	2201      	movs	r2, #1
 8006f52:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d001      	beq.n	8006f6a <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8006f66:	2301      	movs	r3, #1
 8006f68:	e000      	b.n	8006f6c <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8006f6a:	2300      	movs	r3, #0
  }
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	3720      	adds	r7, #32
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}

08006f74 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b088      	sub	sp, #32
 8006f78:	af02      	add	r7, sp, #8
 8006f7a:	60f8      	str	r0, [r7, #12]
 8006f7c:	60b9      	str	r1, [r7, #8]
 8006f7e:	603b      	str	r3, [r7, #0]
 8006f80:	4613      	mov	r3, r2
 8006f82:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006f8a:	b2db      	uxtb	r3, r3
 8006f8c:	2b01      	cmp	r3, #1
 8006f8e:	d001      	beq.n	8006f94 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8006f90:	2302      	movs	r3, #2
 8006f92:	e104      	b.n	800719e <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	685b      	ldr	r3, [r3, #4]
 8006f98:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006f9c:	d112      	bne.n	8006fc4 <HAL_SPI_Receive+0x50>
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	689b      	ldr	r3, [r3, #8]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d10e      	bne.n	8006fc4 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	2204      	movs	r2, #4
 8006faa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006fae:	88fa      	ldrh	r2, [r7, #6]
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	9300      	str	r3, [sp, #0]
 8006fb4:	4613      	mov	r3, r2
 8006fb6:	68ba      	ldr	r2, [r7, #8]
 8006fb8:	68b9      	ldr	r1, [r7, #8]
 8006fba:	68f8      	ldr	r0, [r7, #12]
 8006fbc:	f000 f8f3 	bl	80071a6 <HAL_SPI_TransmitReceive>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	e0ec      	b.n	800719e <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006fc4:	f7fc fa98 	bl	80034f8 <HAL_GetTick>
 8006fc8:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d002      	beq.n	8006fd6 <HAL_SPI_Receive+0x62>
 8006fd0:	88fb      	ldrh	r3, [r7, #6]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d101      	bne.n	8006fda <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	e0e1      	b.n	800719e <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006fe0:	2b01      	cmp	r3, #1
 8006fe2:	d101      	bne.n	8006fe8 <HAL_SPI_Receive+0x74>
 8006fe4:	2302      	movs	r3, #2
 8006fe6:	e0da      	b.n	800719e <HAL_SPI_Receive+0x22a>
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	2201      	movs	r2, #1
 8006fec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2204      	movs	r2, #4
 8006ff4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	68ba      	ldr	r2, [r7, #8]
 8007002:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	88fa      	ldrh	r2, [r7, #6]
 8007008:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	88fa      	ldrh	r2, [r7, #6]
 800700e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	2200      	movs	r2, #0
 8007014:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	2200      	movs	r2, #0
 800701a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	2200      	movs	r2, #0
 8007020:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2200      	movs	r2, #0
 8007026:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	2200      	movs	r2, #0
 800702c:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	689b      	ldr	r3, [r3, #8]
 8007032:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007036:	d10f      	bne.n	8007058 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	681a      	ldr	r2, [r3, #0]
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007046:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	681a      	ldr	r2, [r3, #0]
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007056:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007062:	2b40      	cmp	r3, #64	@ 0x40
 8007064:	d007      	beq.n	8007076 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	681a      	ldr	r2, [r3, #0]
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007074:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	68db      	ldr	r3, [r3, #12]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d170      	bne.n	8007160 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800707e:	e035      	b.n	80070ec <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	689b      	ldr	r3, [r3, #8]
 8007086:	f003 0301 	and.w	r3, r3, #1
 800708a:	2b01      	cmp	r3, #1
 800708c:	d115      	bne.n	80070ba <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f103 020c 	add.w	r2, r3, #12
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800709a:	7812      	ldrb	r2, [r2, #0]
 800709c:	b2d2      	uxtb	r2, r2
 800709e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070a4:	1c5a      	adds	r2, r3, #1
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80070ae:	b29b      	uxth	r3, r3
 80070b0:	3b01      	subs	r3, #1
 80070b2:	b29a      	uxth	r2, r3
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80070b8:	e018      	b.n	80070ec <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80070ba:	f7fc fa1d 	bl	80034f8 <HAL_GetTick>
 80070be:	4602      	mov	r2, r0
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	1ad3      	subs	r3, r2, r3
 80070c4:	683a      	ldr	r2, [r7, #0]
 80070c6:	429a      	cmp	r2, r3
 80070c8:	d803      	bhi.n	80070d2 <HAL_SPI_Receive+0x15e>
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070d0:	d102      	bne.n	80070d8 <HAL_SPI_Receive+0x164>
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d109      	bne.n	80070ec <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2201      	movs	r2, #1
 80070dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	2200      	movs	r2, #0
 80070e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80070e8:	2303      	movs	r3, #3
 80070ea:	e058      	b.n	800719e <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80070f0:	b29b      	uxth	r3, r3
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d1c4      	bne.n	8007080 <HAL_SPI_Receive+0x10c>
 80070f6:	e038      	b.n	800716a <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	689b      	ldr	r3, [r3, #8]
 80070fe:	f003 0301 	and.w	r3, r3, #1
 8007102:	2b01      	cmp	r3, #1
 8007104:	d113      	bne.n	800712e <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	68da      	ldr	r2, [r3, #12]
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007110:	b292      	uxth	r2, r2
 8007112:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007118:	1c9a      	adds	r2, r3, #2
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007122:	b29b      	uxth	r3, r3
 8007124:	3b01      	subs	r3, #1
 8007126:	b29a      	uxth	r2, r3
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800712c:	e018      	b.n	8007160 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800712e:	f7fc f9e3 	bl	80034f8 <HAL_GetTick>
 8007132:	4602      	mov	r2, r0
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	1ad3      	subs	r3, r2, r3
 8007138:	683a      	ldr	r2, [r7, #0]
 800713a:	429a      	cmp	r2, r3
 800713c:	d803      	bhi.n	8007146 <HAL_SPI_Receive+0x1d2>
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007144:	d102      	bne.n	800714c <HAL_SPI_Receive+0x1d8>
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d109      	bne.n	8007160 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2201      	movs	r2, #1
 8007150:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2200      	movs	r2, #0
 8007158:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800715c:	2303      	movs	r3, #3
 800715e:	e01e      	b.n	800719e <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007164:	b29b      	uxth	r3, r3
 8007166:	2b00      	cmp	r3, #0
 8007168:	d1c6      	bne.n	80070f8 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800716a:	697a      	ldr	r2, [r7, #20]
 800716c:	6839      	ldr	r1, [r7, #0]
 800716e:	68f8      	ldr	r0, [r7, #12]
 8007170:	f000 fa58 	bl	8007624 <SPI_EndRxTransaction>
 8007174:	4603      	mov	r3, r0
 8007176:	2b00      	cmp	r3, #0
 8007178:	d002      	beq.n	8007180 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	2220      	movs	r2, #32
 800717e:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	2201      	movs	r2, #1
 8007184:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	2200      	movs	r2, #0
 800718c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007194:	2b00      	cmp	r3, #0
 8007196:	d001      	beq.n	800719c <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8007198:	2301      	movs	r3, #1
 800719a:	e000      	b.n	800719e <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800719c:	2300      	movs	r3, #0
  }
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3718      	adds	r7, #24
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}

080071a6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80071a6:	b580      	push	{r7, lr}
 80071a8:	b08a      	sub	sp, #40	@ 0x28
 80071aa:	af00      	add	r7, sp, #0
 80071ac:	60f8      	str	r0, [r7, #12]
 80071ae:	60b9      	str	r1, [r7, #8]
 80071b0:	607a      	str	r2, [r7, #4]
 80071b2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80071b4:	2301      	movs	r3, #1
 80071b6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80071b8:	f7fc f99e 	bl	80034f8 <HAL_GetTick>
 80071bc:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80071c4:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	685b      	ldr	r3, [r3, #4]
 80071ca:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80071cc:	887b      	ldrh	r3, [r7, #2]
 80071ce:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80071d0:	7ffb      	ldrb	r3, [r7, #31]
 80071d2:	2b01      	cmp	r3, #1
 80071d4:	d00c      	beq.n	80071f0 <HAL_SPI_TransmitReceive+0x4a>
 80071d6:	69bb      	ldr	r3, [r7, #24]
 80071d8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80071dc:	d106      	bne.n	80071ec <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	689b      	ldr	r3, [r3, #8]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d102      	bne.n	80071ec <HAL_SPI_TransmitReceive+0x46>
 80071e6:	7ffb      	ldrb	r3, [r7, #31]
 80071e8:	2b04      	cmp	r3, #4
 80071ea:	d001      	beq.n	80071f0 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80071ec:	2302      	movs	r3, #2
 80071ee:	e17f      	b.n	80074f0 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d005      	beq.n	8007202 <HAL_SPI_TransmitReceive+0x5c>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d002      	beq.n	8007202 <HAL_SPI_TransmitReceive+0x5c>
 80071fc:	887b      	ldrh	r3, [r7, #2]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d101      	bne.n	8007206 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8007202:	2301      	movs	r3, #1
 8007204:	e174      	b.n	80074f0 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800720c:	2b01      	cmp	r3, #1
 800720e:	d101      	bne.n	8007214 <HAL_SPI_TransmitReceive+0x6e>
 8007210:	2302      	movs	r3, #2
 8007212:	e16d      	b.n	80074f0 <HAL_SPI_TransmitReceive+0x34a>
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2201      	movs	r2, #1
 8007218:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007222:	b2db      	uxtb	r3, r3
 8007224:	2b04      	cmp	r3, #4
 8007226:	d003      	beq.n	8007230 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2205      	movs	r2, #5
 800722c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	2200      	movs	r2, #0
 8007234:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	687a      	ldr	r2, [r7, #4]
 800723a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	887a      	ldrh	r2, [r7, #2]
 8007240:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	887a      	ldrh	r2, [r7, #2]
 8007246:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	68ba      	ldr	r2, [r7, #8]
 800724c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	887a      	ldrh	r2, [r7, #2]
 8007252:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	887a      	ldrh	r2, [r7, #2]
 8007258:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2200      	movs	r2, #0
 800725e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2200      	movs	r2, #0
 8007264:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007270:	2b40      	cmp	r3, #64	@ 0x40
 8007272:	d007      	beq.n	8007284 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	681a      	ldr	r2, [r3, #0]
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007282:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	68db      	ldr	r3, [r3, #12]
 8007288:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800728c:	d17e      	bne.n	800738c <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d002      	beq.n	800729c <HAL_SPI_TransmitReceive+0xf6>
 8007296:	8afb      	ldrh	r3, [r7, #22]
 8007298:	2b01      	cmp	r3, #1
 800729a:	d16c      	bne.n	8007376 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072a0:	881a      	ldrh	r2, [r3, #0]
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072ac:	1c9a      	adds	r2, r3, #2
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80072b6:	b29b      	uxth	r3, r3
 80072b8:	3b01      	subs	r3, #1
 80072ba:	b29a      	uxth	r2, r3
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80072c0:	e059      	b.n	8007376 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	689b      	ldr	r3, [r3, #8]
 80072c8:	f003 0302 	and.w	r3, r3, #2
 80072cc:	2b02      	cmp	r3, #2
 80072ce:	d11b      	bne.n	8007308 <HAL_SPI_TransmitReceive+0x162>
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80072d4:	b29b      	uxth	r3, r3
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d016      	beq.n	8007308 <HAL_SPI_TransmitReceive+0x162>
 80072da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072dc:	2b01      	cmp	r3, #1
 80072de:	d113      	bne.n	8007308 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072e4:	881a      	ldrh	r2, [r3, #0]
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072f0:	1c9a      	adds	r2, r3, #2
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80072fa:	b29b      	uxth	r3, r3
 80072fc:	3b01      	subs	r3, #1
 80072fe:	b29a      	uxth	r2, r3
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007304:	2300      	movs	r3, #0
 8007306:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	689b      	ldr	r3, [r3, #8]
 800730e:	f003 0301 	and.w	r3, r3, #1
 8007312:	2b01      	cmp	r3, #1
 8007314:	d119      	bne.n	800734a <HAL_SPI_TransmitReceive+0x1a4>
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800731a:	b29b      	uxth	r3, r3
 800731c:	2b00      	cmp	r3, #0
 800731e:	d014      	beq.n	800734a <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	68da      	ldr	r2, [r3, #12]
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800732a:	b292      	uxth	r2, r2
 800732c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007332:	1c9a      	adds	r2, r3, #2
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800733c:	b29b      	uxth	r3, r3
 800733e:	3b01      	subs	r3, #1
 8007340:	b29a      	uxth	r2, r3
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007346:	2301      	movs	r3, #1
 8007348:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800734a:	f7fc f8d5 	bl	80034f8 <HAL_GetTick>
 800734e:	4602      	mov	r2, r0
 8007350:	6a3b      	ldr	r3, [r7, #32]
 8007352:	1ad3      	subs	r3, r2, r3
 8007354:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007356:	429a      	cmp	r2, r3
 8007358:	d80d      	bhi.n	8007376 <HAL_SPI_TransmitReceive+0x1d0>
 800735a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800735c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007360:	d009      	beq.n	8007376 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	2201      	movs	r2, #1
 8007366:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	2200      	movs	r2, #0
 800736e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007372:	2303      	movs	r3, #3
 8007374:	e0bc      	b.n	80074f0 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800737a:	b29b      	uxth	r3, r3
 800737c:	2b00      	cmp	r3, #0
 800737e:	d1a0      	bne.n	80072c2 <HAL_SPI_TransmitReceive+0x11c>
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007384:	b29b      	uxth	r3, r3
 8007386:	2b00      	cmp	r3, #0
 8007388:	d19b      	bne.n	80072c2 <HAL_SPI_TransmitReceive+0x11c>
 800738a:	e082      	b.n	8007492 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	685b      	ldr	r3, [r3, #4]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d002      	beq.n	800739a <HAL_SPI_TransmitReceive+0x1f4>
 8007394:	8afb      	ldrh	r3, [r7, #22]
 8007396:	2b01      	cmp	r3, #1
 8007398:	d171      	bne.n	800747e <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	330c      	adds	r3, #12
 80073a4:	7812      	ldrb	r2, [r2, #0]
 80073a6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073ac:	1c5a      	adds	r2, r3, #1
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80073b6:	b29b      	uxth	r3, r3
 80073b8:	3b01      	subs	r3, #1
 80073ba:	b29a      	uxth	r2, r3
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80073c0:	e05d      	b.n	800747e <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	689b      	ldr	r3, [r3, #8]
 80073c8:	f003 0302 	and.w	r3, r3, #2
 80073cc:	2b02      	cmp	r3, #2
 80073ce:	d11c      	bne.n	800740a <HAL_SPI_TransmitReceive+0x264>
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80073d4:	b29b      	uxth	r3, r3
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d017      	beq.n	800740a <HAL_SPI_TransmitReceive+0x264>
 80073da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073dc:	2b01      	cmp	r3, #1
 80073de:	d114      	bne.n	800740a <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	330c      	adds	r3, #12
 80073ea:	7812      	ldrb	r2, [r2, #0]
 80073ec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073f2:	1c5a      	adds	r2, r3, #1
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80073fc:	b29b      	uxth	r3, r3
 80073fe:	3b01      	subs	r3, #1
 8007400:	b29a      	uxth	r2, r3
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007406:	2300      	movs	r3, #0
 8007408:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	689b      	ldr	r3, [r3, #8]
 8007410:	f003 0301 	and.w	r3, r3, #1
 8007414:	2b01      	cmp	r3, #1
 8007416:	d119      	bne.n	800744c <HAL_SPI_TransmitReceive+0x2a6>
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800741c:	b29b      	uxth	r3, r3
 800741e:	2b00      	cmp	r3, #0
 8007420:	d014      	beq.n	800744c <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	68da      	ldr	r2, [r3, #12]
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800742c:	b2d2      	uxtb	r2, r2
 800742e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007434:	1c5a      	adds	r2, r3, #1
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800743e:	b29b      	uxth	r3, r3
 8007440:	3b01      	subs	r3, #1
 8007442:	b29a      	uxth	r2, r3
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007448:	2301      	movs	r3, #1
 800744a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800744c:	f7fc f854 	bl	80034f8 <HAL_GetTick>
 8007450:	4602      	mov	r2, r0
 8007452:	6a3b      	ldr	r3, [r7, #32]
 8007454:	1ad3      	subs	r3, r2, r3
 8007456:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007458:	429a      	cmp	r2, r3
 800745a:	d803      	bhi.n	8007464 <HAL_SPI_TransmitReceive+0x2be>
 800745c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800745e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007462:	d102      	bne.n	800746a <HAL_SPI_TransmitReceive+0x2c4>
 8007464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007466:	2b00      	cmp	r3, #0
 8007468:	d109      	bne.n	800747e <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	2201      	movs	r2, #1
 800746e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	2200      	movs	r2, #0
 8007476:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800747a:	2303      	movs	r3, #3
 800747c:	e038      	b.n	80074f0 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007482:	b29b      	uxth	r3, r3
 8007484:	2b00      	cmp	r3, #0
 8007486:	d19c      	bne.n	80073c2 <HAL_SPI_TransmitReceive+0x21c>
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800748c:	b29b      	uxth	r3, r3
 800748e:	2b00      	cmp	r3, #0
 8007490:	d197      	bne.n	80073c2 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007492:	6a3a      	ldr	r2, [r7, #32]
 8007494:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007496:	68f8      	ldr	r0, [r7, #12]
 8007498:	f000 f92a 	bl	80076f0 <SPI_EndRxTxTransaction>
 800749c:	4603      	mov	r3, r0
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d008      	beq.n	80074b4 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2220      	movs	r2, #32
 80074a6:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	2200      	movs	r2, #0
 80074ac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80074b0:	2301      	movs	r3, #1
 80074b2:	e01d      	b.n	80074f0 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	689b      	ldr	r3, [r3, #8]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d10a      	bne.n	80074d2 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80074bc:	2300      	movs	r3, #0
 80074be:	613b      	str	r3, [r7, #16]
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	68db      	ldr	r3, [r3, #12]
 80074c6:	613b      	str	r3, [r7, #16]
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	689b      	ldr	r3, [r3, #8]
 80074ce:	613b      	str	r3, [r7, #16]
 80074d0:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	2201      	movs	r2, #1
 80074d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2200      	movs	r2, #0
 80074de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d001      	beq.n	80074ee <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80074ea:	2301      	movs	r3, #1
 80074ec:	e000      	b.n	80074f0 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80074ee:	2300      	movs	r3, #0
  }
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	3728      	adds	r7, #40	@ 0x28
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}

080074f8 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 80074f8:	b480      	push	{r7}
 80074fa:	b083      	sub	sp, #12
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007506:	b2db      	uxtb	r3, r3
}
 8007508:	4618      	mov	r0, r3
 800750a:	370c      	adds	r7, #12
 800750c:	46bd      	mov	sp, r7
 800750e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007512:	4770      	bx	lr

08007514 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b088      	sub	sp, #32
 8007518:	af00      	add	r7, sp, #0
 800751a:	60f8      	str	r0, [r7, #12]
 800751c:	60b9      	str	r1, [r7, #8]
 800751e:	603b      	str	r3, [r7, #0]
 8007520:	4613      	mov	r3, r2
 8007522:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007524:	f7fb ffe8 	bl	80034f8 <HAL_GetTick>
 8007528:	4602      	mov	r2, r0
 800752a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800752c:	1a9b      	subs	r3, r3, r2
 800752e:	683a      	ldr	r2, [r7, #0]
 8007530:	4413      	add	r3, r2
 8007532:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007534:	f7fb ffe0 	bl	80034f8 <HAL_GetTick>
 8007538:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800753a:	4b39      	ldr	r3, [pc, #228]	@ (8007620 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	015b      	lsls	r3, r3, #5
 8007540:	0d1b      	lsrs	r3, r3, #20
 8007542:	69fa      	ldr	r2, [r7, #28]
 8007544:	fb02 f303 	mul.w	r3, r2, r3
 8007548:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800754a:	e054      	b.n	80075f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007552:	d050      	beq.n	80075f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007554:	f7fb ffd0 	bl	80034f8 <HAL_GetTick>
 8007558:	4602      	mov	r2, r0
 800755a:	69bb      	ldr	r3, [r7, #24]
 800755c:	1ad3      	subs	r3, r2, r3
 800755e:	69fa      	ldr	r2, [r7, #28]
 8007560:	429a      	cmp	r2, r3
 8007562:	d902      	bls.n	800756a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007564:	69fb      	ldr	r3, [r7, #28]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d13d      	bne.n	80075e6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	685a      	ldr	r2, [r3, #4]
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007578:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	685b      	ldr	r3, [r3, #4]
 800757e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007582:	d111      	bne.n	80075a8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	689b      	ldr	r3, [r3, #8]
 8007588:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800758c:	d004      	beq.n	8007598 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	689b      	ldr	r3, [r3, #8]
 8007592:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007596:	d107      	bne.n	80075a8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	681a      	ldr	r2, [r3, #0]
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80075a6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80075b0:	d10f      	bne.n	80075d2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	681a      	ldr	r2, [r3, #0]
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80075c0:	601a      	str	r2, [r3, #0]
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	681a      	ldr	r2, [r3, #0]
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80075d0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	2201      	movs	r2, #1
 80075d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	2200      	movs	r2, #0
 80075de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80075e2:	2303      	movs	r3, #3
 80075e4:	e017      	b.n	8007616 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d101      	bne.n	80075f0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80075ec:	2300      	movs	r3, #0
 80075ee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	3b01      	subs	r3, #1
 80075f4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	689a      	ldr	r2, [r3, #8]
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	4013      	ands	r3, r2
 8007600:	68ba      	ldr	r2, [r7, #8]
 8007602:	429a      	cmp	r2, r3
 8007604:	bf0c      	ite	eq
 8007606:	2301      	moveq	r3, #1
 8007608:	2300      	movne	r3, #0
 800760a:	b2db      	uxtb	r3, r3
 800760c:	461a      	mov	r2, r3
 800760e:	79fb      	ldrb	r3, [r7, #7]
 8007610:	429a      	cmp	r2, r3
 8007612:	d19b      	bne.n	800754c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007614:	2300      	movs	r3, #0
}
 8007616:	4618      	mov	r0, r3
 8007618:	3720      	adds	r7, #32
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}
 800761e:	bf00      	nop
 8007620:	20000000 	.word	0x20000000

08007624 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b086      	sub	sp, #24
 8007628:	af02      	add	r7, sp, #8
 800762a:	60f8      	str	r0, [r7, #12]
 800762c:	60b9      	str	r1, [r7, #8]
 800762e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	685b      	ldr	r3, [r3, #4]
 8007634:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007638:	d111      	bne.n	800765e <SPI_EndRxTransaction+0x3a>
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	689b      	ldr	r3, [r3, #8]
 800763e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007642:	d004      	beq.n	800764e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	689b      	ldr	r3, [r3, #8]
 8007648:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800764c:	d107      	bne.n	800765e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	681a      	ldr	r2, [r3, #0]
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800765c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	685b      	ldr	r3, [r3, #4]
 8007662:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007666:	d12a      	bne.n	80076be <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	689b      	ldr	r3, [r3, #8]
 800766c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007670:	d012      	beq.n	8007698 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	9300      	str	r3, [sp, #0]
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	2200      	movs	r2, #0
 800767a:	2180      	movs	r1, #128	@ 0x80
 800767c:	68f8      	ldr	r0, [r7, #12]
 800767e:	f7ff ff49 	bl	8007514 <SPI_WaitFlagStateUntilTimeout>
 8007682:	4603      	mov	r3, r0
 8007684:	2b00      	cmp	r3, #0
 8007686:	d02d      	beq.n	80076e4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800768c:	f043 0220 	orr.w	r2, r3, #32
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8007694:	2303      	movs	r3, #3
 8007696:	e026      	b.n	80076e6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	9300      	str	r3, [sp, #0]
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	2200      	movs	r2, #0
 80076a0:	2101      	movs	r1, #1
 80076a2:	68f8      	ldr	r0, [r7, #12]
 80076a4:	f7ff ff36 	bl	8007514 <SPI_WaitFlagStateUntilTimeout>
 80076a8:	4603      	mov	r3, r0
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d01a      	beq.n	80076e4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076b2:	f043 0220 	orr.w	r2, r3, #32
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80076ba:	2303      	movs	r3, #3
 80076bc:	e013      	b.n	80076e6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	9300      	str	r3, [sp, #0]
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	2200      	movs	r2, #0
 80076c6:	2101      	movs	r1, #1
 80076c8:	68f8      	ldr	r0, [r7, #12]
 80076ca:	f7ff ff23 	bl	8007514 <SPI_WaitFlagStateUntilTimeout>
 80076ce:	4603      	mov	r3, r0
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d007      	beq.n	80076e4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076d8:	f043 0220 	orr.w	r2, r3, #32
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80076e0:	2303      	movs	r3, #3
 80076e2:	e000      	b.n	80076e6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80076e4:	2300      	movs	r3, #0
}
 80076e6:	4618      	mov	r0, r3
 80076e8:	3710      	adds	r7, #16
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bd80      	pop	{r7, pc}
	...

080076f0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b088      	sub	sp, #32
 80076f4:	af02      	add	r7, sp, #8
 80076f6:	60f8      	str	r0, [r7, #12]
 80076f8:	60b9      	str	r1, [r7, #8]
 80076fa:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	9300      	str	r3, [sp, #0]
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	2201      	movs	r2, #1
 8007704:	2102      	movs	r1, #2
 8007706:	68f8      	ldr	r0, [r7, #12]
 8007708:	f7ff ff04 	bl	8007514 <SPI_WaitFlagStateUntilTimeout>
 800770c:	4603      	mov	r3, r0
 800770e:	2b00      	cmp	r3, #0
 8007710:	d007      	beq.n	8007722 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007716:	f043 0220 	orr.w	r2, r3, #32
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800771e:	2303      	movs	r3, #3
 8007720:	e032      	b.n	8007788 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007722:	4b1b      	ldr	r3, [pc, #108]	@ (8007790 <SPI_EndRxTxTransaction+0xa0>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4a1b      	ldr	r2, [pc, #108]	@ (8007794 <SPI_EndRxTxTransaction+0xa4>)
 8007728:	fba2 2303 	umull	r2, r3, r2, r3
 800772c:	0d5b      	lsrs	r3, r3, #21
 800772e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007732:	fb02 f303 	mul.w	r3, r2, r3
 8007736:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	685b      	ldr	r3, [r3, #4]
 800773c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007740:	d112      	bne.n	8007768 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	9300      	str	r3, [sp, #0]
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	2200      	movs	r2, #0
 800774a:	2180      	movs	r1, #128	@ 0x80
 800774c:	68f8      	ldr	r0, [r7, #12]
 800774e:	f7ff fee1 	bl	8007514 <SPI_WaitFlagStateUntilTimeout>
 8007752:	4603      	mov	r3, r0
 8007754:	2b00      	cmp	r3, #0
 8007756:	d016      	beq.n	8007786 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800775c:	f043 0220 	orr.w	r2, r3, #32
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007764:	2303      	movs	r3, #3
 8007766:	e00f      	b.n	8007788 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d00a      	beq.n	8007784 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800776e:	697b      	ldr	r3, [r7, #20]
 8007770:	3b01      	subs	r3, #1
 8007772:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	689b      	ldr	r3, [r3, #8]
 800777a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800777e:	2b80      	cmp	r3, #128	@ 0x80
 8007780:	d0f2      	beq.n	8007768 <SPI_EndRxTxTransaction+0x78>
 8007782:	e000      	b.n	8007786 <SPI_EndRxTxTransaction+0x96>
        break;
 8007784:	bf00      	nop
  }

  return HAL_OK;
 8007786:	2300      	movs	r3, #0
}
 8007788:	4618      	mov	r0, r3
 800778a:	3718      	adds	r7, #24
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}
 8007790:	20000000 	.word	0x20000000
 8007794:	165e9f81 	.word	0x165e9f81

08007798 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8007798:	b480      	push	{r7}
 800779a:	b083      	sub	sp, #12
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
 80077a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d123      	bne.n	80077f2 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80077b2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80077b6:	683a      	ldr	r2, [r7, #0]
 80077b8:	6851      	ldr	r1, [r2, #4]
 80077ba:	683a      	ldr	r2, [r7, #0]
 80077bc:	6892      	ldr	r2, [r2, #8]
 80077be:	4311      	orrs	r1, r2
 80077c0:	683a      	ldr	r2, [r7, #0]
 80077c2:	68d2      	ldr	r2, [r2, #12]
 80077c4:	4311      	orrs	r1, r2
 80077c6:	683a      	ldr	r2, [r7, #0]
 80077c8:	6912      	ldr	r2, [r2, #16]
 80077ca:	4311      	orrs	r1, r2
 80077cc:	683a      	ldr	r2, [r7, #0]
 80077ce:	6952      	ldr	r2, [r2, #20]
 80077d0:	4311      	orrs	r1, r2
 80077d2:	683a      	ldr	r2, [r7, #0]
 80077d4:	6992      	ldr	r2, [r2, #24]
 80077d6:	4311      	orrs	r1, r2
 80077d8:	683a      	ldr	r2, [r7, #0]
 80077da:	69d2      	ldr	r2, [r2, #28]
 80077dc:	4311      	orrs	r1, r2
 80077de:	683a      	ldr	r2, [r7, #0]
 80077e0:	6a12      	ldr	r2, [r2, #32]
 80077e2:	4311      	orrs	r1, r2
 80077e4:	683a      	ldr	r2, [r7, #0]
 80077e6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80077e8:	430a      	orrs	r2, r1
 80077ea:	431a      	orrs	r2, r3
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	601a      	str	r2, [r3, #0]
 80077f0:	e028      	b.n	8007844 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	69d9      	ldr	r1, [r3, #28]
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	6a1b      	ldr	r3, [r3, #32]
 8007802:	4319      	orrs	r1, r3
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007808:	430b      	orrs	r3, r1
 800780a:	431a      	orrs	r2, r3
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	685b      	ldr	r3, [r3, #4]
 8007814:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8007818:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800781c:	683a      	ldr	r2, [r7, #0]
 800781e:	6851      	ldr	r1, [r2, #4]
 8007820:	683a      	ldr	r2, [r7, #0]
 8007822:	6892      	ldr	r2, [r2, #8]
 8007824:	4311      	orrs	r1, r2
 8007826:	683a      	ldr	r2, [r7, #0]
 8007828:	68d2      	ldr	r2, [r2, #12]
 800782a:	4311      	orrs	r1, r2
 800782c:	683a      	ldr	r2, [r7, #0]
 800782e:	6912      	ldr	r2, [r2, #16]
 8007830:	4311      	orrs	r1, r2
 8007832:	683a      	ldr	r2, [r7, #0]
 8007834:	6952      	ldr	r2, [r2, #20]
 8007836:	4311      	orrs	r1, r2
 8007838:	683a      	ldr	r2, [r7, #0]
 800783a:	6992      	ldr	r2, [r2, #24]
 800783c:	430a      	orrs	r2, r1
 800783e:	431a      	orrs	r2, r3
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8007844:	2300      	movs	r3, #0
}
 8007846:	4618      	mov	r0, r3
 8007848:	370c      	adds	r7, #12
 800784a:	46bd      	mov	sp, r7
 800784c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007850:	4770      	bx	lr

08007852 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007852:	b480      	push	{r7}
 8007854:	b085      	sub	sp, #20
 8007856:	af00      	add	r7, sp, #0
 8007858:	60f8      	str	r0, [r7, #12]
 800785a:	60b9      	str	r1, [r7, #8]
 800785c:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d128      	bne.n	80078b6 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	689b      	ldr	r3, [r3, #8]
 8007868:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	1e59      	subs	r1, r3, #1
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	3b01      	subs	r3, #1
 8007878:	011b      	lsls	r3, r3, #4
 800787a:	4319      	orrs	r1, r3
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	689b      	ldr	r3, [r3, #8]
 8007880:	3b01      	subs	r3, #1
 8007882:	021b      	lsls	r3, r3, #8
 8007884:	4319      	orrs	r1, r3
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	68db      	ldr	r3, [r3, #12]
 800788a:	3b01      	subs	r3, #1
 800788c:	031b      	lsls	r3, r3, #12
 800788e:	4319      	orrs	r1, r3
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	691b      	ldr	r3, [r3, #16]
 8007894:	3b01      	subs	r3, #1
 8007896:	041b      	lsls	r3, r3, #16
 8007898:	4319      	orrs	r1, r3
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	695b      	ldr	r3, [r3, #20]
 800789e:	3b01      	subs	r3, #1
 80078a0:	051b      	lsls	r3, r3, #20
 80078a2:	4319      	orrs	r1, r3
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	699b      	ldr	r3, [r3, #24]
 80078a8:	3b01      	subs	r3, #1
 80078aa:	061b      	lsls	r3, r3, #24
 80078ac:	430b      	orrs	r3, r1
 80078ae:	431a      	orrs	r2, r3
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	609a      	str	r2, [r3, #8]
 80078b4:	e02f      	b.n	8007916 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	689b      	ldr	r3, [r3, #8]
 80078ba:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80078be:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80078c2:	68ba      	ldr	r2, [r7, #8]
 80078c4:	68d2      	ldr	r2, [r2, #12]
 80078c6:	3a01      	subs	r2, #1
 80078c8:	0311      	lsls	r1, r2, #12
 80078ca:	68ba      	ldr	r2, [r7, #8]
 80078cc:	6952      	ldr	r2, [r2, #20]
 80078ce:	3a01      	subs	r2, #1
 80078d0:	0512      	lsls	r2, r2, #20
 80078d2:	430a      	orrs	r2, r1
 80078d4:	431a      	orrs	r2, r3
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	68db      	ldr	r3, [r3, #12]
 80078de:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	1e59      	subs	r1, r3, #1
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	685b      	ldr	r3, [r3, #4]
 80078ec:	3b01      	subs	r3, #1
 80078ee:	011b      	lsls	r3, r3, #4
 80078f0:	4319      	orrs	r1, r3
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	689b      	ldr	r3, [r3, #8]
 80078f6:	3b01      	subs	r3, #1
 80078f8:	021b      	lsls	r3, r3, #8
 80078fa:	4319      	orrs	r1, r3
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	691b      	ldr	r3, [r3, #16]
 8007900:	3b01      	subs	r3, #1
 8007902:	041b      	lsls	r3, r3, #16
 8007904:	4319      	orrs	r1, r3
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	699b      	ldr	r3, [r3, #24]
 800790a:	3b01      	subs	r3, #1
 800790c:	061b      	lsls	r3, r3, #24
 800790e:	430b      	orrs	r3, r1
 8007910:	431a      	orrs	r2, r3
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8007916:	2300      	movs	r3, #0
}
 8007918:	4618      	mov	r0, r3
 800791a:	3714      	adds	r7, #20
 800791c:	46bd      	mov	sp, r7
 800791e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007922:	4770      	bx	lr

08007924 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b086      	sub	sp, #24
 8007928:	af00      	add	r7, sp, #0
 800792a:	60f8      	str	r0, [r7, #12]
 800792c:	60b9      	str	r1, [r7, #8]
 800792e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8007930:	2300      	movs	r3, #0
 8007932:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	691b      	ldr	r3, [r3, #16]
 8007938:	0d9b      	lsrs	r3, r3, #22
 800793a:	059b      	lsls	r3, r3, #22
 800793c:	68ba      	ldr	r2, [r7, #8]
 800793e:	6811      	ldr	r1, [r2, #0]
 8007940:	68ba      	ldr	r2, [r7, #8]
 8007942:	6852      	ldr	r2, [r2, #4]
 8007944:	4311      	orrs	r1, r2
 8007946:	68ba      	ldr	r2, [r7, #8]
 8007948:	6892      	ldr	r2, [r2, #8]
 800794a:	3a01      	subs	r2, #1
 800794c:	0152      	lsls	r2, r2, #5
 800794e:	4311      	orrs	r1, r2
 8007950:	68ba      	ldr	r2, [r7, #8]
 8007952:	68d2      	ldr	r2, [r2, #12]
 8007954:	0252      	lsls	r2, r2, #9
 8007956:	430a      	orrs	r2, r1
 8007958:	431a      	orrs	r2, r3
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 800795e:	f7fb fdcb 	bl	80034f8 <HAL_GetTick>
 8007962:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8007964:	e010      	b.n	8007988 <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800796c:	d00c      	beq.n	8007988 <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d007      	beq.n	8007984 <FMC_SDRAM_SendCommand+0x60>
 8007974:	f7fb fdc0 	bl	80034f8 <HAL_GetTick>
 8007978:	4602      	mov	r2, r0
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	1ad3      	subs	r3, r2, r3
 800797e:	687a      	ldr	r2, [r7, #4]
 8007980:	429a      	cmp	r2, r3
 8007982:	d201      	bcs.n	8007988 <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 8007984:	2303      	movs	r3, #3
 8007986:	e006      	b.n	8007996 <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	699b      	ldr	r3, [r3, #24]
 800798c:	f003 0320 	and.w	r3, r3, #32
 8007990:	2b20      	cmp	r3, #32
 8007992:	d0e8      	beq.n	8007966 <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 8007994:	2300      	movs	r3, #0
}
 8007996:	4618      	mov	r0, r3
 8007998:	3718      	adds	r7, #24
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}

0800799e <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800799e:	b480      	push	{r7}
 80079a0:	b083      	sub	sp, #12
 80079a2:	af00      	add	r7, sp, #0
 80079a4:	6078      	str	r0, [r7, #4]
 80079a6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	695b      	ldr	r3, [r3, #20]
 80079ac:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80079b0:	f023 033e 	bic.w	r3, r3, #62	@ 0x3e
 80079b4:	683a      	ldr	r2, [r7, #0]
 80079b6:	0052      	lsls	r2, r2, #1
 80079b8:	431a      	orrs	r2, r3
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80079be:	2300      	movs	r3, #0
}
 80079c0:	4618      	mov	r0, r3
 80079c2:	370c      	adds	r7, #12
 80079c4:	46bd      	mov	sp, r7
 80079c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ca:	4770      	bx	lr

080079cc <rand>:
 80079cc:	4b16      	ldr	r3, [pc, #88]	@ (8007a28 <rand+0x5c>)
 80079ce:	b510      	push	{r4, lr}
 80079d0:	681c      	ldr	r4, [r3, #0]
 80079d2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80079d4:	b9b3      	cbnz	r3, 8007a04 <rand+0x38>
 80079d6:	2018      	movs	r0, #24
 80079d8:	f000 fa40 	bl	8007e5c <malloc>
 80079dc:	4602      	mov	r2, r0
 80079de:	6320      	str	r0, [r4, #48]	@ 0x30
 80079e0:	b920      	cbnz	r0, 80079ec <rand+0x20>
 80079e2:	4b12      	ldr	r3, [pc, #72]	@ (8007a2c <rand+0x60>)
 80079e4:	4812      	ldr	r0, [pc, #72]	@ (8007a30 <rand+0x64>)
 80079e6:	2152      	movs	r1, #82	@ 0x52
 80079e8:	f000 f9d0 	bl	8007d8c <__assert_func>
 80079ec:	4911      	ldr	r1, [pc, #68]	@ (8007a34 <rand+0x68>)
 80079ee:	4b12      	ldr	r3, [pc, #72]	@ (8007a38 <rand+0x6c>)
 80079f0:	e9c0 1300 	strd	r1, r3, [r0]
 80079f4:	4b11      	ldr	r3, [pc, #68]	@ (8007a3c <rand+0x70>)
 80079f6:	6083      	str	r3, [r0, #8]
 80079f8:	230b      	movs	r3, #11
 80079fa:	8183      	strh	r3, [r0, #12]
 80079fc:	2100      	movs	r1, #0
 80079fe:	2001      	movs	r0, #1
 8007a00:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8007a04:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8007a06:	480e      	ldr	r0, [pc, #56]	@ (8007a40 <rand+0x74>)
 8007a08:	690b      	ldr	r3, [r1, #16]
 8007a0a:	694c      	ldr	r4, [r1, #20]
 8007a0c:	4a0d      	ldr	r2, [pc, #52]	@ (8007a44 <rand+0x78>)
 8007a0e:	4358      	muls	r0, r3
 8007a10:	fb02 0004 	mla	r0, r2, r4, r0
 8007a14:	fba3 3202 	umull	r3, r2, r3, r2
 8007a18:	3301      	adds	r3, #1
 8007a1a:	eb40 0002 	adc.w	r0, r0, r2
 8007a1e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8007a22:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8007a26:	bd10      	pop	{r4, pc}
 8007a28:	20000094 	.word	0x20000094
 8007a2c:	0800b430 	.word	0x0800b430
 8007a30:	0800b447 	.word	0x0800b447
 8007a34:	abcd330e 	.word	0xabcd330e
 8007a38:	e66d1234 	.word	0xe66d1234
 8007a3c:	0005deec 	.word	0x0005deec
 8007a40:	5851f42d 	.word	0x5851f42d
 8007a44:	4c957f2d 	.word	0x4c957f2d

08007a48 <std>:
 8007a48:	2300      	movs	r3, #0
 8007a4a:	b510      	push	{r4, lr}
 8007a4c:	4604      	mov	r4, r0
 8007a4e:	e9c0 3300 	strd	r3, r3, [r0]
 8007a52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007a56:	6083      	str	r3, [r0, #8]
 8007a58:	8181      	strh	r1, [r0, #12]
 8007a5a:	6643      	str	r3, [r0, #100]	@ 0x64
 8007a5c:	81c2      	strh	r2, [r0, #14]
 8007a5e:	6183      	str	r3, [r0, #24]
 8007a60:	4619      	mov	r1, r3
 8007a62:	2208      	movs	r2, #8
 8007a64:	305c      	adds	r0, #92	@ 0x5c
 8007a66:	f000 f914 	bl	8007c92 <memset>
 8007a6a:	4b0d      	ldr	r3, [pc, #52]	@ (8007aa0 <std+0x58>)
 8007a6c:	6263      	str	r3, [r4, #36]	@ 0x24
 8007a6e:	4b0d      	ldr	r3, [pc, #52]	@ (8007aa4 <std+0x5c>)
 8007a70:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007a72:	4b0d      	ldr	r3, [pc, #52]	@ (8007aa8 <std+0x60>)
 8007a74:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007a76:	4b0d      	ldr	r3, [pc, #52]	@ (8007aac <std+0x64>)
 8007a78:	6323      	str	r3, [r4, #48]	@ 0x30
 8007a7a:	4b0d      	ldr	r3, [pc, #52]	@ (8007ab0 <std+0x68>)
 8007a7c:	6224      	str	r4, [r4, #32]
 8007a7e:	429c      	cmp	r4, r3
 8007a80:	d006      	beq.n	8007a90 <std+0x48>
 8007a82:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007a86:	4294      	cmp	r4, r2
 8007a88:	d002      	beq.n	8007a90 <std+0x48>
 8007a8a:	33d0      	adds	r3, #208	@ 0xd0
 8007a8c:	429c      	cmp	r4, r3
 8007a8e:	d105      	bne.n	8007a9c <std+0x54>
 8007a90:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007a94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a98:	f000 b974 	b.w	8007d84 <__retarget_lock_init_recursive>
 8007a9c:	bd10      	pop	{r4, pc}
 8007a9e:	bf00      	nop
 8007aa0:	08007c0d 	.word	0x08007c0d
 8007aa4:	08007c2f 	.word	0x08007c2f
 8007aa8:	08007c67 	.word	0x08007c67
 8007aac:	08007c8b 	.word	0x08007c8b
 8007ab0:	20000588 	.word	0x20000588

08007ab4 <stdio_exit_handler>:
 8007ab4:	4a02      	ldr	r2, [pc, #8]	@ (8007ac0 <stdio_exit_handler+0xc>)
 8007ab6:	4903      	ldr	r1, [pc, #12]	@ (8007ac4 <stdio_exit_handler+0x10>)
 8007ab8:	4803      	ldr	r0, [pc, #12]	@ (8007ac8 <stdio_exit_handler+0x14>)
 8007aba:	f000 b869 	b.w	8007b90 <_fwalk_sglue>
 8007abe:	bf00      	nop
 8007ac0:	20000088 	.word	0x20000088
 8007ac4:	0800869d 	.word	0x0800869d
 8007ac8:	20000098 	.word	0x20000098

08007acc <cleanup_stdio>:
 8007acc:	6841      	ldr	r1, [r0, #4]
 8007ace:	4b0c      	ldr	r3, [pc, #48]	@ (8007b00 <cleanup_stdio+0x34>)
 8007ad0:	4299      	cmp	r1, r3
 8007ad2:	b510      	push	{r4, lr}
 8007ad4:	4604      	mov	r4, r0
 8007ad6:	d001      	beq.n	8007adc <cleanup_stdio+0x10>
 8007ad8:	f000 fde0 	bl	800869c <_fflush_r>
 8007adc:	68a1      	ldr	r1, [r4, #8]
 8007ade:	4b09      	ldr	r3, [pc, #36]	@ (8007b04 <cleanup_stdio+0x38>)
 8007ae0:	4299      	cmp	r1, r3
 8007ae2:	d002      	beq.n	8007aea <cleanup_stdio+0x1e>
 8007ae4:	4620      	mov	r0, r4
 8007ae6:	f000 fdd9 	bl	800869c <_fflush_r>
 8007aea:	68e1      	ldr	r1, [r4, #12]
 8007aec:	4b06      	ldr	r3, [pc, #24]	@ (8007b08 <cleanup_stdio+0x3c>)
 8007aee:	4299      	cmp	r1, r3
 8007af0:	d004      	beq.n	8007afc <cleanup_stdio+0x30>
 8007af2:	4620      	mov	r0, r4
 8007af4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007af8:	f000 bdd0 	b.w	800869c <_fflush_r>
 8007afc:	bd10      	pop	{r4, pc}
 8007afe:	bf00      	nop
 8007b00:	20000588 	.word	0x20000588
 8007b04:	200005f0 	.word	0x200005f0
 8007b08:	20000658 	.word	0x20000658

08007b0c <global_stdio_init.part.0>:
 8007b0c:	b510      	push	{r4, lr}
 8007b0e:	4b0b      	ldr	r3, [pc, #44]	@ (8007b3c <global_stdio_init.part.0+0x30>)
 8007b10:	4c0b      	ldr	r4, [pc, #44]	@ (8007b40 <global_stdio_init.part.0+0x34>)
 8007b12:	4a0c      	ldr	r2, [pc, #48]	@ (8007b44 <global_stdio_init.part.0+0x38>)
 8007b14:	601a      	str	r2, [r3, #0]
 8007b16:	4620      	mov	r0, r4
 8007b18:	2200      	movs	r2, #0
 8007b1a:	2104      	movs	r1, #4
 8007b1c:	f7ff ff94 	bl	8007a48 <std>
 8007b20:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007b24:	2201      	movs	r2, #1
 8007b26:	2109      	movs	r1, #9
 8007b28:	f7ff ff8e 	bl	8007a48 <std>
 8007b2c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007b30:	2202      	movs	r2, #2
 8007b32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b36:	2112      	movs	r1, #18
 8007b38:	f7ff bf86 	b.w	8007a48 <std>
 8007b3c:	200006c0 	.word	0x200006c0
 8007b40:	20000588 	.word	0x20000588
 8007b44:	08007ab5 	.word	0x08007ab5

08007b48 <__sfp_lock_acquire>:
 8007b48:	4801      	ldr	r0, [pc, #4]	@ (8007b50 <__sfp_lock_acquire+0x8>)
 8007b4a:	f000 b91c 	b.w	8007d86 <__retarget_lock_acquire_recursive>
 8007b4e:	bf00      	nop
 8007b50:	200006c9 	.word	0x200006c9

08007b54 <__sfp_lock_release>:
 8007b54:	4801      	ldr	r0, [pc, #4]	@ (8007b5c <__sfp_lock_release+0x8>)
 8007b56:	f000 b917 	b.w	8007d88 <__retarget_lock_release_recursive>
 8007b5a:	bf00      	nop
 8007b5c:	200006c9 	.word	0x200006c9

08007b60 <__sinit>:
 8007b60:	b510      	push	{r4, lr}
 8007b62:	4604      	mov	r4, r0
 8007b64:	f7ff fff0 	bl	8007b48 <__sfp_lock_acquire>
 8007b68:	6a23      	ldr	r3, [r4, #32]
 8007b6a:	b11b      	cbz	r3, 8007b74 <__sinit+0x14>
 8007b6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b70:	f7ff bff0 	b.w	8007b54 <__sfp_lock_release>
 8007b74:	4b04      	ldr	r3, [pc, #16]	@ (8007b88 <__sinit+0x28>)
 8007b76:	6223      	str	r3, [r4, #32]
 8007b78:	4b04      	ldr	r3, [pc, #16]	@ (8007b8c <__sinit+0x2c>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d1f5      	bne.n	8007b6c <__sinit+0xc>
 8007b80:	f7ff ffc4 	bl	8007b0c <global_stdio_init.part.0>
 8007b84:	e7f2      	b.n	8007b6c <__sinit+0xc>
 8007b86:	bf00      	nop
 8007b88:	08007acd 	.word	0x08007acd
 8007b8c:	200006c0 	.word	0x200006c0

08007b90 <_fwalk_sglue>:
 8007b90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b94:	4607      	mov	r7, r0
 8007b96:	4688      	mov	r8, r1
 8007b98:	4614      	mov	r4, r2
 8007b9a:	2600      	movs	r6, #0
 8007b9c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007ba0:	f1b9 0901 	subs.w	r9, r9, #1
 8007ba4:	d505      	bpl.n	8007bb2 <_fwalk_sglue+0x22>
 8007ba6:	6824      	ldr	r4, [r4, #0]
 8007ba8:	2c00      	cmp	r4, #0
 8007baa:	d1f7      	bne.n	8007b9c <_fwalk_sglue+0xc>
 8007bac:	4630      	mov	r0, r6
 8007bae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007bb2:	89ab      	ldrh	r3, [r5, #12]
 8007bb4:	2b01      	cmp	r3, #1
 8007bb6:	d907      	bls.n	8007bc8 <_fwalk_sglue+0x38>
 8007bb8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007bbc:	3301      	adds	r3, #1
 8007bbe:	d003      	beq.n	8007bc8 <_fwalk_sglue+0x38>
 8007bc0:	4629      	mov	r1, r5
 8007bc2:	4638      	mov	r0, r7
 8007bc4:	47c0      	blx	r8
 8007bc6:	4306      	orrs	r6, r0
 8007bc8:	3568      	adds	r5, #104	@ 0x68
 8007bca:	e7e9      	b.n	8007ba0 <_fwalk_sglue+0x10>

08007bcc <siprintf>:
 8007bcc:	b40e      	push	{r1, r2, r3}
 8007bce:	b500      	push	{lr}
 8007bd0:	b09c      	sub	sp, #112	@ 0x70
 8007bd2:	ab1d      	add	r3, sp, #116	@ 0x74
 8007bd4:	9002      	str	r0, [sp, #8]
 8007bd6:	9006      	str	r0, [sp, #24]
 8007bd8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007bdc:	4809      	ldr	r0, [pc, #36]	@ (8007c04 <siprintf+0x38>)
 8007bde:	9107      	str	r1, [sp, #28]
 8007be0:	9104      	str	r1, [sp, #16]
 8007be2:	4909      	ldr	r1, [pc, #36]	@ (8007c08 <siprintf+0x3c>)
 8007be4:	f853 2b04 	ldr.w	r2, [r3], #4
 8007be8:	9105      	str	r1, [sp, #20]
 8007bea:	6800      	ldr	r0, [r0, #0]
 8007bec:	9301      	str	r3, [sp, #4]
 8007bee:	a902      	add	r1, sp, #8
 8007bf0:	f000 fa46 	bl	8008080 <_svfiprintf_r>
 8007bf4:	9b02      	ldr	r3, [sp, #8]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	701a      	strb	r2, [r3, #0]
 8007bfa:	b01c      	add	sp, #112	@ 0x70
 8007bfc:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c00:	b003      	add	sp, #12
 8007c02:	4770      	bx	lr
 8007c04:	20000094 	.word	0x20000094
 8007c08:	ffff0208 	.word	0xffff0208

08007c0c <__sread>:
 8007c0c:	b510      	push	{r4, lr}
 8007c0e:	460c      	mov	r4, r1
 8007c10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c14:	f000 f868 	bl	8007ce8 <_read_r>
 8007c18:	2800      	cmp	r0, #0
 8007c1a:	bfab      	itete	ge
 8007c1c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007c1e:	89a3      	ldrhlt	r3, [r4, #12]
 8007c20:	181b      	addge	r3, r3, r0
 8007c22:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007c26:	bfac      	ite	ge
 8007c28:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007c2a:	81a3      	strhlt	r3, [r4, #12]
 8007c2c:	bd10      	pop	{r4, pc}

08007c2e <__swrite>:
 8007c2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c32:	461f      	mov	r7, r3
 8007c34:	898b      	ldrh	r3, [r1, #12]
 8007c36:	05db      	lsls	r3, r3, #23
 8007c38:	4605      	mov	r5, r0
 8007c3a:	460c      	mov	r4, r1
 8007c3c:	4616      	mov	r6, r2
 8007c3e:	d505      	bpl.n	8007c4c <__swrite+0x1e>
 8007c40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c44:	2302      	movs	r3, #2
 8007c46:	2200      	movs	r2, #0
 8007c48:	f000 f83c 	bl	8007cc4 <_lseek_r>
 8007c4c:	89a3      	ldrh	r3, [r4, #12]
 8007c4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c52:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007c56:	81a3      	strh	r3, [r4, #12]
 8007c58:	4632      	mov	r2, r6
 8007c5a:	463b      	mov	r3, r7
 8007c5c:	4628      	mov	r0, r5
 8007c5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c62:	f000 b853 	b.w	8007d0c <_write_r>

08007c66 <__sseek>:
 8007c66:	b510      	push	{r4, lr}
 8007c68:	460c      	mov	r4, r1
 8007c6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c6e:	f000 f829 	bl	8007cc4 <_lseek_r>
 8007c72:	1c43      	adds	r3, r0, #1
 8007c74:	89a3      	ldrh	r3, [r4, #12]
 8007c76:	bf15      	itete	ne
 8007c78:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007c7a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007c7e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007c82:	81a3      	strheq	r3, [r4, #12]
 8007c84:	bf18      	it	ne
 8007c86:	81a3      	strhne	r3, [r4, #12]
 8007c88:	bd10      	pop	{r4, pc}

08007c8a <__sclose>:
 8007c8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c8e:	f000 b809 	b.w	8007ca4 <_close_r>

08007c92 <memset>:
 8007c92:	4402      	add	r2, r0
 8007c94:	4603      	mov	r3, r0
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d100      	bne.n	8007c9c <memset+0xa>
 8007c9a:	4770      	bx	lr
 8007c9c:	f803 1b01 	strb.w	r1, [r3], #1
 8007ca0:	e7f9      	b.n	8007c96 <memset+0x4>
	...

08007ca4 <_close_r>:
 8007ca4:	b538      	push	{r3, r4, r5, lr}
 8007ca6:	4d06      	ldr	r5, [pc, #24]	@ (8007cc0 <_close_r+0x1c>)
 8007ca8:	2300      	movs	r3, #0
 8007caa:	4604      	mov	r4, r0
 8007cac:	4608      	mov	r0, r1
 8007cae:	602b      	str	r3, [r5, #0]
 8007cb0:	f7f9 fb71 	bl	8001396 <_close>
 8007cb4:	1c43      	adds	r3, r0, #1
 8007cb6:	d102      	bne.n	8007cbe <_close_r+0x1a>
 8007cb8:	682b      	ldr	r3, [r5, #0]
 8007cba:	b103      	cbz	r3, 8007cbe <_close_r+0x1a>
 8007cbc:	6023      	str	r3, [r4, #0]
 8007cbe:	bd38      	pop	{r3, r4, r5, pc}
 8007cc0:	200006c4 	.word	0x200006c4

08007cc4 <_lseek_r>:
 8007cc4:	b538      	push	{r3, r4, r5, lr}
 8007cc6:	4d07      	ldr	r5, [pc, #28]	@ (8007ce4 <_lseek_r+0x20>)
 8007cc8:	4604      	mov	r4, r0
 8007cca:	4608      	mov	r0, r1
 8007ccc:	4611      	mov	r1, r2
 8007cce:	2200      	movs	r2, #0
 8007cd0:	602a      	str	r2, [r5, #0]
 8007cd2:	461a      	mov	r2, r3
 8007cd4:	f7f9 fb86 	bl	80013e4 <_lseek>
 8007cd8:	1c43      	adds	r3, r0, #1
 8007cda:	d102      	bne.n	8007ce2 <_lseek_r+0x1e>
 8007cdc:	682b      	ldr	r3, [r5, #0]
 8007cde:	b103      	cbz	r3, 8007ce2 <_lseek_r+0x1e>
 8007ce0:	6023      	str	r3, [r4, #0]
 8007ce2:	bd38      	pop	{r3, r4, r5, pc}
 8007ce4:	200006c4 	.word	0x200006c4

08007ce8 <_read_r>:
 8007ce8:	b538      	push	{r3, r4, r5, lr}
 8007cea:	4d07      	ldr	r5, [pc, #28]	@ (8007d08 <_read_r+0x20>)
 8007cec:	4604      	mov	r4, r0
 8007cee:	4608      	mov	r0, r1
 8007cf0:	4611      	mov	r1, r2
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	602a      	str	r2, [r5, #0]
 8007cf6:	461a      	mov	r2, r3
 8007cf8:	f7f9 fb14 	bl	8001324 <_read>
 8007cfc:	1c43      	adds	r3, r0, #1
 8007cfe:	d102      	bne.n	8007d06 <_read_r+0x1e>
 8007d00:	682b      	ldr	r3, [r5, #0]
 8007d02:	b103      	cbz	r3, 8007d06 <_read_r+0x1e>
 8007d04:	6023      	str	r3, [r4, #0]
 8007d06:	bd38      	pop	{r3, r4, r5, pc}
 8007d08:	200006c4 	.word	0x200006c4

08007d0c <_write_r>:
 8007d0c:	b538      	push	{r3, r4, r5, lr}
 8007d0e:	4d07      	ldr	r5, [pc, #28]	@ (8007d2c <_write_r+0x20>)
 8007d10:	4604      	mov	r4, r0
 8007d12:	4608      	mov	r0, r1
 8007d14:	4611      	mov	r1, r2
 8007d16:	2200      	movs	r2, #0
 8007d18:	602a      	str	r2, [r5, #0]
 8007d1a:	461a      	mov	r2, r3
 8007d1c:	f7f9 fb1f 	bl	800135e <_write>
 8007d20:	1c43      	adds	r3, r0, #1
 8007d22:	d102      	bne.n	8007d2a <_write_r+0x1e>
 8007d24:	682b      	ldr	r3, [r5, #0]
 8007d26:	b103      	cbz	r3, 8007d2a <_write_r+0x1e>
 8007d28:	6023      	str	r3, [r4, #0]
 8007d2a:	bd38      	pop	{r3, r4, r5, pc}
 8007d2c:	200006c4 	.word	0x200006c4

08007d30 <__errno>:
 8007d30:	4b01      	ldr	r3, [pc, #4]	@ (8007d38 <__errno+0x8>)
 8007d32:	6818      	ldr	r0, [r3, #0]
 8007d34:	4770      	bx	lr
 8007d36:	bf00      	nop
 8007d38:	20000094 	.word	0x20000094

08007d3c <__libc_init_array>:
 8007d3c:	b570      	push	{r4, r5, r6, lr}
 8007d3e:	4d0d      	ldr	r5, [pc, #52]	@ (8007d74 <__libc_init_array+0x38>)
 8007d40:	4c0d      	ldr	r4, [pc, #52]	@ (8007d78 <__libc_init_array+0x3c>)
 8007d42:	1b64      	subs	r4, r4, r5
 8007d44:	10a4      	asrs	r4, r4, #2
 8007d46:	2600      	movs	r6, #0
 8007d48:	42a6      	cmp	r6, r4
 8007d4a:	d109      	bne.n	8007d60 <__libc_init_array+0x24>
 8007d4c:	4d0b      	ldr	r5, [pc, #44]	@ (8007d7c <__libc_init_array+0x40>)
 8007d4e:	4c0c      	ldr	r4, [pc, #48]	@ (8007d80 <__libc_init_array+0x44>)
 8007d50:	f000 fff0 	bl	8008d34 <_init>
 8007d54:	1b64      	subs	r4, r4, r5
 8007d56:	10a4      	asrs	r4, r4, #2
 8007d58:	2600      	movs	r6, #0
 8007d5a:	42a6      	cmp	r6, r4
 8007d5c:	d105      	bne.n	8007d6a <__libc_init_array+0x2e>
 8007d5e:	bd70      	pop	{r4, r5, r6, pc}
 8007d60:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d64:	4798      	blx	r3
 8007d66:	3601      	adds	r6, #1
 8007d68:	e7ee      	b.n	8007d48 <__libc_init_array+0xc>
 8007d6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d6e:	4798      	blx	r3
 8007d70:	3601      	adds	r6, #1
 8007d72:	e7f2      	b.n	8007d5a <__libc_init_array+0x1e>
 8007d74:	0800b518 	.word	0x0800b518
 8007d78:	0800b518 	.word	0x0800b518
 8007d7c:	0800b518 	.word	0x0800b518
 8007d80:	0800b51c 	.word	0x0800b51c

08007d84 <__retarget_lock_init_recursive>:
 8007d84:	4770      	bx	lr

08007d86 <__retarget_lock_acquire_recursive>:
 8007d86:	4770      	bx	lr

08007d88 <__retarget_lock_release_recursive>:
 8007d88:	4770      	bx	lr
	...

08007d8c <__assert_func>:
 8007d8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007d8e:	4614      	mov	r4, r2
 8007d90:	461a      	mov	r2, r3
 8007d92:	4b09      	ldr	r3, [pc, #36]	@ (8007db8 <__assert_func+0x2c>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	4605      	mov	r5, r0
 8007d98:	68d8      	ldr	r0, [r3, #12]
 8007d9a:	b954      	cbnz	r4, 8007db2 <__assert_func+0x26>
 8007d9c:	4b07      	ldr	r3, [pc, #28]	@ (8007dbc <__assert_func+0x30>)
 8007d9e:	461c      	mov	r4, r3
 8007da0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007da4:	9100      	str	r1, [sp, #0]
 8007da6:	462b      	mov	r3, r5
 8007da8:	4905      	ldr	r1, [pc, #20]	@ (8007dc0 <__assert_func+0x34>)
 8007daa:	f000 fc9f 	bl	80086ec <fiprintf>
 8007dae:	f000 fce7 	bl	8008780 <abort>
 8007db2:	4b04      	ldr	r3, [pc, #16]	@ (8007dc4 <__assert_func+0x38>)
 8007db4:	e7f4      	b.n	8007da0 <__assert_func+0x14>
 8007db6:	bf00      	nop
 8007db8:	20000094 	.word	0x20000094
 8007dbc:	0800b4da 	.word	0x0800b4da
 8007dc0:	0800b4ac 	.word	0x0800b4ac
 8007dc4:	0800b49f 	.word	0x0800b49f

08007dc8 <_free_r>:
 8007dc8:	b538      	push	{r3, r4, r5, lr}
 8007dca:	4605      	mov	r5, r0
 8007dcc:	2900      	cmp	r1, #0
 8007dce:	d041      	beq.n	8007e54 <_free_r+0x8c>
 8007dd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007dd4:	1f0c      	subs	r4, r1, #4
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	bfb8      	it	lt
 8007dda:	18e4      	addlt	r4, r4, r3
 8007ddc:	f000 f8e8 	bl	8007fb0 <__malloc_lock>
 8007de0:	4a1d      	ldr	r2, [pc, #116]	@ (8007e58 <_free_r+0x90>)
 8007de2:	6813      	ldr	r3, [r2, #0]
 8007de4:	b933      	cbnz	r3, 8007df4 <_free_r+0x2c>
 8007de6:	6063      	str	r3, [r4, #4]
 8007de8:	6014      	str	r4, [r2, #0]
 8007dea:	4628      	mov	r0, r5
 8007dec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007df0:	f000 b8e4 	b.w	8007fbc <__malloc_unlock>
 8007df4:	42a3      	cmp	r3, r4
 8007df6:	d908      	bls.n	8007e0a <_free_r+0x42>
 8007df8:	6820      	ldr	r0, [r4, #0]
 8007dfa:	1821      	adds	r1, r4, r0
 8007dfc:	428b      	cmp	r3, r1
 8007dfe:	bf01      	itttt	eq
 8007e00:	6819      	ldreq	r1, [r3, #0]
 8007e02:	685b      	ldreq	r3, [r3, #4]
 8007e04:	1809      	addeq	r1, r1, r0
 8007e06:	6021      	streq	r1, [r4, #0]
 8007e08:	e7ed      	b.n	8007de6 <_free_r+0x1e>
 8007e0a:	461a      	mov	r2, r3
 8007e0c:	685b      	ldr	r3, [r3, #4]
 8007e0e:	b10b      	cbz	r3, 8007e14 <_free_r+0x4c>
 8007e10:	42a3      	cmp	r3, r4
 8007e12:	d9fa      	bls.n	8007e0a <_free_r+0x42>
 8007e14:	6811      	ldr	r1, [r2, #0]
 8007e16:	1850      	adds	r0, r2, r1
 8007e18:	42a0      	cmp	r0, r4
 8007e1a:	d10b      	bne.n	8007e34 <_free_r+0x6c>
 8007e1c:	6820      	ldr	r0, [r4, #0]
 8007e1e:	4401      	add	r1, r0
 8007e20:	1850      	adds	r0, r2, r1
 8007e22:	4283      	cmp	r3, r0
 8007e24:	6011      	str	r1, [r2, #0]
 8007e26:	d1e0      	bne.n	8007dea <_free_r+0x22>
 8007e28:	6818      	ldr	r0, [r3, #0]
 8007e2a:	685b      	ldr	r3, [r3, #4]
 8007e2c:	6053      	str	r3, [r2, #4]
 8007e2e:	4408      	add	r0, r1
 8007e30:	6010      	str	r0, [r2, #0]
 8007e32:	e7da      	b.n	8007dea <_free_r+0x22>
 8007e34:	d902      	bls.n	8007e3c <_free_r+0x74>
 8007e36:	230c      	movs	r3, #12
 8007e38:	602b      	str	r3, [r5, #0]
 8007e3a:	e7d6      	b.n	8007dea <_free_r+0x22>
 8007e3c:	6820      	ldr	r0, [r4, #0]
 8007e3e:	1821      	adds	r1, r4, r0
 8007e40:	428b      	cmp	r3, r1
 8007e42:	bf04      	itt	eq
 8007e44:	6819      	ldreq	r1, [r3, #0]
 8007e46:	685b      	ldreq	r3, [r3, #4]
 8007e48:	6063      	str	r3, [r4, #4]
 8007e4a:	bf04      	itt	eq
 8007e4c:	1809      	addeq	r1, r1, r0
 8007e4e:	6021      	streq	r1, [r4, #0]
 8007e50:	6054      	str	r4, [r2, #4]
 8007e52:	e7ca      	b.n	8007dea <_free_r+0x22>
 8007e54:	bd38      	pop	{r3, r4, r5, pc}
 8007e56:	bf00      	nop
 8007e58:	200006d0 	.word	0x200006d0

08007e5c <malloc>:
 8007e5c:	4b02      	ldr	r3, [pc, #8]	@ (8007e68 <malloc+0xc>)
 8007e5e:	4601      	mov	r1, r0
 8007e60:	6818      	ldr	r0, [r3, #0]
 8007e62:	f000 b825 	b.w	8007eb0 <_malloc_r>
 8007e66:	bf00      	nop
 8007e68:	20000094 	.word	0x20000094

08007e6c <sbrk_aligned>:
 8007e6c:	b570      	push	{r4, r5, r6, lr}
 8007e6e:	4e0f      	ldr	r6, [pc, #60]	@ (8007eac <sbrk_aligned+0x40>)
 8007e70:	460c      	mov	r4, r1
 8007e72:	6831      	ldr	r1, [r6, #0]
 8007e74:	4605      	mov	r5, r0
 8007e76:	b911      	cbnz	r1, 8007e7e <sbrk_aligned+0x12>
 8007e78:	f000 fc64 	bl	8008744 <_sbrk_r>
 8007e7c:	6030      	str	r0, [r6, #0]
 8007e7e:	4621      	mov	r1, r4
 8007e80:	4628      	mov	r0, r5
 8007e82:	f000 fc5f 	bl	8008744 <_sbrk_r>
 8007e86:	1c43      	adds	r3, r0, #1
 8007e88:	d103      	bne.n	8007e92 <sbrk_aligned+0x26>
 8007e8a:	f04f 34ff 	mov.w	r4, #4294967295
 8007e8e:	4620      	mov	r0, r4
 8007e90:	bd70      	pop	{r4, r5, r6, pc}
 8007e92:	1cc4      	adds	r4, r0, #3
 8007e94:	f024 0403 	bic.w	r4, r4, #3
 8007e98:	42a0      	cmp	r0, r4
 8007e9a:	d0f8      	beq.n	8007e8e <sbrk_aligned+0x22>
 8007e9c:	1a21      	subs	r1, r4, r0
 8007e9e:	4628      	mov	r0, r5
 8007ea0:	f000 fc50 	bl	8008744 <_sbrk_r>
 8007ea4:	3001      	adds	r0, #1
 8007ea6:	d1f2      	bne.n	8007e8e <sbrk_aligned+0x22>
 8007ea8:	e7ef      	b.n	8007e8a <sbrk_aligned+0x1e>
 8007eaa:	bf00      	nop
 8007eac:	200006cc 	.word	0x200006cc

08007eb0 <_malloc_r>:
 8007eb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007eb4:	1ccd      	adds	r5, r1, #3
 8007eb6:	f025 0503 	bic.w	r5, r5, #3
 8007eba:	3508      	adds	r5, #8
 8007ebc:	2d0c      	cmp	r5, #12
 8007ebe:	bf38      	it	cc
 8007ec0:	250c      	movcc	r5, #12
 8007ec2:	2d00      	cmp	r5, #0
 8007ec4:	4606      	mov	r6, r0
 8007ec6:	db01      	blt.n	8007ecc <_malloc_r+0x1c>
 8007ec8:	42a9      	cmp	r1, r5
 8007eca:	d904      	bls.n	8007ed6 <_malloc_r+0x26>
 8007ecc:	230c      	movs	r3, #12
 8007ece:	6033      	str	r3, [r6, #0]
 8007ed0:	2000      	movs	r0, #0
 8007ed2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ed6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007fac <_malloc_r+0xfc>
 8007eda:	f000 f869 	bl	8007fb0 <__malloc_lock>
 8007ede:	f8d8 3000 	ldr.w	r3, [r8]
 8007ee2:	461c      	mov	r4, r3
 8007ee4:	bb44      	cbnz	r4, 8007f38 <_malloc_r+0x88>
 8007ee6:	4629      	mov	r1, r5
 8007ee8:	4630      	mov	r0, r6
 8007eea:	f7ff ffbf 	bl	8007e6c <sbrk_aligned>
 8007eee:	1c43      	adds	r3, r0, #1
 8007ef0:	4604      	mov	r4, r0
 8007ef2:	d158      	bne.n	8007fa6 <_malloc_r+0xf6>
 8007ef4:	f8d8 4000 	ldr.w	r4, [r8]
 8007ef8:	4627      	mov	r7, r4
 8007efa:	2f00      	cmp	r7, #0
 8007efc:	d143      	bne.n	8007f86 <_malloc_r+0xd6>
 8007efe:	2c00      	cmp	r4, #0
 8007f00:	d04b      	beq.n	8007f9a <_malloc_r+0xea>
 8007f02:	6823      	ldr	r3, [r4, #0]
 8007f04:	4639      	mov	r1, r7
 8007f06:	4630      	mov	r0, r6
 8007f08:	eb04 0903 	add.w	r9, r4, r3
 8007f0c:	f000 fc1a 	bl	8008744 <_sbrk_r>
 8007f10:	4581      	cmp	r9, r0
 8007f12:	d142      	bne.n	8007f9a <_malloc_r+0xea>
 8007f14:	6821      	ldr	r1, [r4, #0]
 8007f16:	1a6d      	subs	r5, r5, r1
 8007f18:	4629      	mov	r1, r5
 8007f1a:	4630      	mov	r0, r6
 8007f1c:	f7ff ffa6 	bl	8007e6c <sbrk_aligned>
 8007f20:	3001      	adds	r0, #1
 8007f22:	d03a      	beq.n	8007f9a <_malloc_r+0xea>
 8007f24:	6823      	ldr	r3, [r4, #0]
 8007f26:	442b      	add	r3, r5
 8007f28:	6023      	str	r3, [r4, #0]
 8007f2a:	f8d8 3000 	ldr.w	r3, [r8]
 8007f2e:	685a      	ldr	r2, [r3, #4]
 8007f30:	bb62      	cbnz	r2, 8007f8c <_malloc_r+0xdc>
 8007f32:	f8c8 7000 	str.w	r7, [r8]
 8007f36:	e00f      	b.n	8007f58 <_malloc_r+0xa8>
 8007f38:	6822      	ldr	r2, [r4, #0]
 8007f3a:	1b52      	subs	r2, r2, r5
 8007f3c:	d420      	bmi.n	8007f80 <_malloc_r+0xd0>
 8007f3e:	2a0b      	cmp	r2, #11
 8007f40:	d917      	bls.n	8007f72 <_malloc_r+0xc2>
 8007f42:	1961      	adds	r1, r4, r5
 8007f44:	42a3      	cmp	r3, r4
 8007f46:	6025      	str	r5, [r4, #0]
 8007f48:	bf18      	it	ne
 8007f4a:	6059      	strne	r1, [r3, #4]
 8007f4c:	6863      	ldr	r3, [r4, #4]
 8007f4e:	bf08      	it	eq
 8007f50:	f8c8 1000 	streq.w	r1, [r8]
 8007f54:	5162      	str	r2, [r4, r5]
 8007f56:	604b      	str	r3, [r1, #4]
 8007f58:	4630      	mov	r0, r6
 8007f5a:	f000 f82f 	bl	8007fbc <__malloc_unlock>
 8007f5e:	f104 000b 	add.w	r0, r4, #11
 8007f62:	1d23      	adds	r3, r4, #4
 8007f64:	f020 0007 	bic.w	r0, r0, #7
 8007f68:	1ac2      	subs	r2, r0, r3
 8007f6a:	bf1c      	itt	ne
 8007f6c:	1a1b      	subne	r3, r3, r0
 8007f6e:	50a3      	strne	r3, [r4, r2]
 8007f70:	e7af      	b.n	8007ed2 <_malloc_r+0x22>
 8007f72:	6862      	ldr	r2, [r4, #4]
 8007f74:	42a3      	cmp	r3, r4
 8007f76:	bf0c      	ite	eq
 8007f78:	f8c8 2000 	streq.w	r2, [r8]
 8007f7c:	605a      	strne	r2, [r3, #4]
 8007f7e:	e7eb      	b.n	8007f58 <_malloc_r+0xa8>
 8007f80:	4623      	mov	r3, r4
 8007f82:	6864      	ldr	r4, [r4, #4]
 8007f84:	e7ae      	b.n	8007ee4 <_malloc_r+0x34>
 8007f86:	463c      	mov	r4, r7
 8007f88:	687f      	ldr	r7, [r7, #4]
 8007f8a:	e7b6      	b.n	8007efa <_malloc_r+0x4a>
 8007f8c:	461a      	mov	r2, r3
 8007f8e:	685b      	ldr	r3, [r3, #4]
 8007f90:	42a3      	cmp	r3, r4
 8007f92:	d1fb      	bne.n	8007f8c <_malloc_r+0xdc>
 8007f94:	2300      	movs	r3, #0
 8007f96:	6053      	str	r3, [r2, #4]
 8007f98:	e7de      	b.n	8007f58 <_malloc_r+0xa8>
 8007f9a:	230c      	movs	r3, #12
 8007f9c:	6033      	str	r3, [r6, #0]
 8007f9e:	4630      	mov	r0, r6
 8007fa0:	f000 f80c 	bl	8007fbc <__malloc_unlock>
 8007fa4:	e794      	b.n	8007ed0 <_malloc_r+0x20>
 8007fa6:	6005      	str	r5, [r0, #0]
 8007fa8:	e7d6      	b.n	8007f58 <_malloc_r+0xa8>
 8007faa:	bf00      	nop
 8007fac:	200006d0 	.word	0x200006d0

08007fb0 <__malloc_lock>:
 8007fb0:	4801      	ldr	r0, [pc, #4]	@ (8007fb8 <__malloc_lock+0x8>)
 8007fb2:	f7ff bee8 	b.w	8007d86 <__retarget_lock_acquire_recursive>
 8007fb6:	bf00      	nop
 8007fb8:	200006c8 	.word	0x200006c8

08007fbc <__malloc_unlock>:
 8007fbc:	4801      	ldr	r0, [pc, #4]	@ (8007fc4 <__malloc_unlock+0x8>)
 8007fbe:	f7ff bee3 	b.w	8007d88 <__retarget_lock_release_recursive>
 8007fc2:	bf00      	nop
 8007fc4:	200006c8 	.word	0x200006c8

08007fc8 <__ssputs_r>:
 8007fc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fcc:	688e      	ldr	r6, [r1, #8]
 8007fce:	461f      	mov	r7, r3
 8007fd0:	42be      	cmp	r6, r7
 8007fd2:	680b      	ldr	r3, [r1, #0]
 8007fd4:	4682      	mov	sl, r0
 8007fd6:	460c      	mov	r4, r1
 8007fd8:	4690      	mov	r8, r2
 8007fda:	d82d      	bhi.n	8008038 <__ssputs_r+0x70>
 8007fdc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007fe0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007fe4:	d026      	beq.n	8008034 <__ssputs_r+0x6c>
 8007fe6:	6965      	ldr	r5, [r4, #20]
 8007fe8:	6909      	ldr	r1, [r1, #16]
 8007fea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007fee:	eba3 0901 	sub.w	r9, r3, r1
 8007ff2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007ff6:	1c7b      	adds	r3, r7, #1
 8007ff8:	444b      	add	r3, r9
 8007ffa:	106d      	asrs	r5, r5, #1
 8007ffc:	429d      	cmp	r5, r3
 8007ffe:	bf38      	it	cc
 8008000:	461d      	movcc	r5, r3
 8008002:	0553      	lsls	r3, r2, #21
 8008004:	d527      	bpl.n	8008056 <__ssputs_r+0x8e>
 8008006:	4629      	mov	r1, r5
 8008008:	f7ff ff52 	bl	8007eb0 <_malloc_r>
 800800c:	4606      	mov	r6, r0
 800800e:	b360      	cbz	r0, 800806a <__ssputs_r+0xa2>
 8008010:	6921      	ldr	r1, [r4, #16]
 8008012:	464a      	mov	r2, r9
 8008014:	f000 fba6 	bl	8008764 <memcpy>
 8008018:	89a3      	ldrh	r3, [r4, #12]
 800801a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800801e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008022:	81a3      	strh	r3, [r4, #12]
 8008024:	6126      	str	r6, [r4, #16]
 8008026:	6165      	str	r5, [r4, #20]
 8008028:	444e      	add	r6, r9
 800802a:	eba5 0509 	sub.w	r5, r5, r9
 800802e:	6026      	str	r6, [r4, #0]
 8008030:	60a5      	str	r5, [r4, #8]
 8008032:	463e      	mov	r6, r7
 8008034:	42be      	cmp	r6, r7
 8008036:	d900      	bls.n	800803a <__ssputs_r+0x72>
 8008038:	463e      	mov	r6, r7
 800803a:	6820      	ldr	r0, [r4, #0]
 800803c:	4632      	mov	r2, r6
 800803e:	4641      	mov	r1, r8
 8008040:	f000 fb66 	bl	8008710 <memmove>
 8008044:	68a3      	ldr	r3, [r4, #8]
 8008046:	1b9b      	subs	r3, r3, r6
 8008048:	60a3      	str	r3, [r4, #8]
 800804a:	6823      	ldr	r3, [r4, #0]
 800804c:	4433      	add	r3, r6
 800804e:	6023      	str	r3, [r4, #0]
 8008050:	2000      	movs	r0, #0
 8008052:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008056:	462a      	mov	r2, r5
 8008058:	f000 fb99 	bl	800878e <_realloc_r>
 800805c:	4606      	mov	r6, r0
 800805e:	2800      	cmp	r0, #0
 8008060:	d1e0      	bne.n	8008024 <__ssputs_r+0x5c>
 8008062:	6921      	ldr	r1, [r4, #16]
 8008064:	4650      	mov	r0, sl
 8008066:	f7ff feaf 	bl	8007dc8 <_free_r>
 800806a:	230c      	movs	r3, #12
 800806c:	f8ca 3000 	str.w	r3, [sl]
 8008070:	89a3      	ldrh	r3, [r4, #12]
 8008072:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008076:	81a3      	strh	r3, [r4, #12]
 8008078:	f04f 30ff 	mov.w	r0, #4294967295
 800807c:	e7e9      	b.n	8008052 <__ssputs_r+0x8a>
	...

08008080 <_svfiprintf_r>:
 8008080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008084:	4698      	mov	r8, r3
 8008086:	898b      	ldrh	r3, [r1, #12]
 8008088:	061b      	lsls	r3, r3, #24
 800808a:	b09d      	sub	sp, #116	@ 0x74
 800808c:	4607      	mov	r7, r0
 800808e:	460d      	mov	r5, r1
 8008090:	4614      	mov	r4, r2
 8008092:	d510      	bpl.n	80080b6 <_svfiprintf_r+0x36>
 8008094:	690b      	ldr	r3, [r1, #16]
 8008096:	b973      	cbnz	r3, 80080b6 <_svfiprintf_r+0x36>
 8008098:	2140      	movs	r1, #64	@ 0x40
 800809a:	f7ff ff09 	bl	8007eb0 <_malloc_r>
 800809e:	6028      	str	r0, [r5, #0]
 80080a0:	6128      	str	r0, [r5, #16]
 80080a2:	b930      	cbnz	r0, 80080b2 <_svfiprintf_r+0x32>
 80080a4:	230c      	movs	r3, #12
 80080a6:	603b      	str	r3, [r7, #0]
 80080a8:	f04f 30ff 	mov.w	r0, #4294967295
 80080ac:	b01d      	add	sp, #116	@ 0x74
 80080ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080b2:	2340      	movs	r3, #64	@ 0x40
 80080b4:	616b      	str	r3, [r5, #20]
 80080b6:	2300      	movs	r3, #0
 80080b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80080ba:	2320      	movs	r3, #32
 80080bc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80080c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80080c4:	2330      	movs	r3, #48	@ 0x30
 80080c6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008264 <_svfiprintf_r+0x1e4>
 80080ca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80080ce:	f04f 0901 	mov.w	r9, #1
 80080d2:	4623      	mov	r3, r4
 80080d4:	469a      	mov	sl, r3
 80080d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80080da:	b10a      	cbz	r2, 80080e0 <_svfiprintf_r+0x60>
 80080dc:	2a25      	cmp	r2, #37	@ 0x25
 80080de:	d1f9      	bne.n	80080d4 <_svfiprintf_r+0x54>
 80080e0:	ebba 0b04 	subs.w	fp, sl, r4
 80080e4:	d00b      	beq.n	80080fe <_svfiprintf_r+0x7e>
 80080e6:	465b      	mov	r3, fp
 80080e8:	4622      	mov	r2, r4
 80080ea:	4629      	mov	r1, r5
 80080ec:	4638      	mov	r0, r7
 80080ee:	f7ff ff6b 	bl	8007fc8 <__ssputs_r>
 80080f2:	3001      	adds	r0, #1
 80080f4:	f000 80a7 	beq.w	8008246 <_svfiprintf_r+0x1c6>
 80080f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80080fa:	445a      	add	r2, fp
 80080fc:	9209      	str	r2, [sp, #36]	@ 0x24
 80080fe:	f89a 3000 	ldrb.w	r3, [sl]
 8008102:	2b00      	cmp	r3, #0
 8008104:	f000 809f 	beq.w	8008246 <_svfiprintf_r+0x1c6>
 8008108:	2300      	movs	r3, #0
 800810a:	f04f 32ff 	mov.w	r2, #4294967295
 800810e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008112:	f10a 0a01 	add.w	sl, sl, #1
 8008116:	9304      	str	r3, [sp, #16]
 8008118:	9307      	str	r3, [sp, #28]
 800811a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800811e:	931a      	str	r3, [sp, #104]	@ 0x68
 8008120:	4654      	mov	r4, sl
 8008122:	2205      	movs	r2, #5
 8008124:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008128:	484e      	ldr	r0, [pc, #312]	@ (8008264 <_svfiprintf_r+0x1e4>)
 800812a:	f7f8 f861 	bl	80001f0 <memchr>
 800812e:	9a04      	ldr	r2, [sp, #16]
 8008130:	b9d8      	cbnz	r0, 800816a <_svfiprintf_r+0xea>
 8008132:	06d0      	lsls	r0, r2, #27
 8008134:	bf44      	itt	mi
 8008136:	2320      	movmi	r3, #32
 8008138:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800813c:	0711      	lsls	r1, r2, #28
 800813e:	bf44      	itt	mi
 8008140:	232b      	movmi	r3, #43	@ 0x2b
 8008142:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008146:	f89a 3000 	ldrb.w	r3, [sl]
 800814a:	2b2a      	cmp	r3, #42	@ 0x2a
 800814c:	d015      	beq.n	800817a <_svfiprintf_r+0xfa>
 800814e:	9a07      	ldr	r2, [sp, #28]
 8008150:	4654      	mov	r4, sl
 8008152:	2000      	movs	r0, #0
 8008154:	f04f 0c0a 	mov.w	ip, #10
 8008158:	4621      	mov	r1, r4
 800815a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800815e:	3b30      	subs	r3, #48	@ 0x30
 8008160:	2b09      	cmp	r3, #9
 8008162:	d94b      	bls.n	80081fc <_svfiprintf_r+0x17c>
 8008164:	b1b0      	cbz	r0, 8008194 <_svfiprintf_r+0x114>
 8008166:	9207      	str	r2, [sp, #28]
 8008168:	e014      	b.n	8008194 <_svfiprintf_r+0x114>
 800816a:	eba0 0308 	sub.w	r3, r0, r8
 800816e:	fa09 f303 	lsl.w	r3, r9, r3
 8008172:	4313      	orrs	r3, r2
 8008174:	9304      	str	r3, [sp, #16]
 8008176:	46a2      	mov	sl, r4
 8008178:	e7d2      	b.n	8008120 <_svfiprintf_r+0xa0>
 800817a:	9b03      	ldr	r3, [sp, #12]
 800817c:	1d19      	adds	r1, r3, #4
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	9103      	str	r1, [sp, #12]
 8008182:	2b00      	cmp	r3, #0
 8008184:	bfbb      	ittet	lt
 8008186:	425b      	neglt	r3, r3
 8008188:	f042 0202 	orrlt.w	r2, r2, #2
 800818c:	9307      	strge	r3, [sp, #28]
 800818e:	9307      	strlt	r3, [sp, #28]
 8008190:	bfb8      	it	lt
 8008192:	9204      	strlt	r2, [sp, #16]
 8008194:	7823      	ldrb	r3, [r4, #0]
 8008196:	2b2e      	cmp	r3, #46	@ 0x2e
 8008198:	d10a      	bne.n	80081b0 <_svfiprintf_r+0x130>
 800819a:	7863      	ldrb	r3, [r4, #1]
 800819c:	2b2a      	cmp	r3, #42	@ 0x2a
 800819e:	d132      	bne.n	8008206 <_svfiprintf_r+0x186>
 80081a0:	9b03      	ldr	r3, [sp, #12]
 80081a2:	1d1a      	adds	r2, r3, #4
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	9203      	str	r2, [sp, #12]
 80081a8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80081ac:	3402      	adds	r4, #2
 80081ae:	9305      	str	r3, [sp, #20]
 80081b0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008274 <_svfiprintf_r+0x1f4>
 80081b4:	7821      	ldrb	r1, [r4, #0]
 80081b6:	2203      	movs	r2, #3
 80081b8:	4650      	mov	r0, sl
 80081ba:	f7f8 f819 	bl	80001f0 <memchr>
 80081be:	b138      	cbz	r0, 80081d0 <_svfiprintf_r+0x150>
 80081c0:	9b04      	ldr	r3, [sp, #16]
 80081c2:	eba0 000a 	sub.w	r0, r0, sl
 80081c6:	2240      	movs	r2, #64	@ 0x40
 80081c8:	4082      	lsls	r2, r0
 80081ca:	4313      	orrs	r3, r2
 80081cc:	3401      	adds	r4, #1
 80081ce:	9304      	str	r3, [sp, #16]
 80081d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081d4:	4824      	ldr	r0, [pc, #144]	@ (8008268 <_svfiprintf_r+0x1e8>)
 80081d6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80081da:	2206      	movs	r2, #6
 80081dc:	f7f8 f808 	bl	80001f0 <memchr>
 80081e0:	2800      	cmp	r0, #0
 80081e2:	d036      	beq.n	8008252 <_svfiprintf_r+0x1d2>
 80081e4:	4b21      	ldr	r3, [pc, #132]	@ (800826c <_svfiprintf_r+0x1ec>)
 80081e6:	bb1b      	cbnz	r3, 8008230 <_svfiprintf_r+0x1b0>
 80081e8:	9b03      	ldr	r3, [sp, #12]
 80081ea:	3307      	adds	r3, #7
 80081ec:	f023 0307 	bic.w	r3, r3, #7
 80081f0:	3308      	adds	r3, #8
 80081f2:	9303      	str	r3, [sp, #12]
 80081f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081f6:	4433      	add	r3, r6
 80081f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80081fa:	e76a      	b.n	80080d2 <_svfiprintf_r+0x52>
 80081fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8008200:	460c      	mov	r4, r1
 8008202:	2001      	movs	r0, #1
 8008204:	e7a8      	b.n	8008158 <_svfiprintf_r+0xd8>
 8008206:	2300      	movs	r3, #0
 8008208:	3401      	adds	r4, #1
 800820a:	9305      	str	r3, [sp, #20]
 800820c:	4619      	mov	r1, r3
 800820e:	f04f 0c0a 	mov.w	ip, #10
 8008212:	4620      	mov	r0, r4
 8008214:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008218:	3a30      	subs	r2, #48	@ 0x30
 800821a:	2a09      	cmp	r2, #9
 800821c:	d903      	bls.n	8008226 <_svfiprintf_r+0x1a6>
 800821e:	2b00      	cmp	r3, #0
 8008220:	d0c6      	beq.n	80081b0 <_svfiprintf_r+0x130>
 8008222:	9105      	str	r1, [sp, #20]
 8008224:	e7c4      	b.n	80081b0 <_svfiprintf_r+0x130>
 8008226:	fb0c 2101 	mla	r1, ip, r1, r2
 800822a:	4604      	mov	r4, r0
 800822c:	2301      	movs	r3, #1
 800822e:	e7f0      	b.n	8008212 <_svfiprintf_r+0x192>
 8008230:	ab03      	add	r3, sp, #12
 8008232:	9300      	str	r3, [sp, #0]
 8008234:	462a      	mov	r2, r5
 8008236:	4b0e      	ldr	r3, [pc, #56]	@ (8008270 <_svfiprintf_r+0x1f0>)
 8008238:	a904      	add	r1, sp, #16
 800823a:	4638      	mov	r0, r7
 800823c:	f3af 8000 	nop.w
 8008240:	1c42      	adds	r2, r0, #1
 8008242:	4606      	mov	r6, r0
 8008244:	d1d6      	bne.n	80081f4 <_svfiprintf_r+0x174>
 8008246:	89ab      	ldrh	r3, [r5, #12]
 8008248:	065b      	lsls	r3, r3, #25
 800824a:	f53f af2d 	bmi.w	80080a8 <_svfiprintf_r+0x28>
 800824e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008250:	e72c      	b.n	80080ac <_svfiprintf_r+0x2c>
 8008252:	ab03      	add	r3, sp, #12
 8008254:	9300      	str	r3, [sp, #0]
 8008256:	462a      	mov	r2, r5
 8008258:	4b05      	ldr	r3, [pc, #20]	@ (8008270 <_svfiprintf_r+0x1f0>)
 800825a:	a904      	add	r1, sp, #16
 800825c:	4638      	mov	r0, r7
 800825e:	f000 f879 	bl	8008354 <_printf_i>
 8008262:	e7ed      	b.n	8008240 <_svfiprintf_r+0x1c0>
 8008264:	0800b4db 	.word	0x0800b4db
 8008268:	0800b4e5 	.word	0x0800b4e5
 800826c:	00000000 	.word	0x00000000
 8008270:	08007fc9 	.word	0x08007fc9
 8008274:	0800b4e1 	.word	0x0800b4e1

08008278 <_printf_common>:
 8008278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800827c:	4616      	mov	r6, r2
 800827e:	4698      	mov	r8, r3
 8008280:	688a      	ldr	r2, [r1, #8]
 8008282:	690b      	ldr	r3, [r1, #16]
 8008284:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008288:	4293      	cmp	r3, r2
 800828a:	bfb8      	it	lt
 800828c:	4613      	movlt	r3, r2
 800828e:	6033      	str	r3, [r6, #0]
 8008290:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008294:	4607      	mov	r7, r0
 8008296:	460c      	mov	r4, r1
 8008298:	b10a      	cbz	r2, 800829e <_printf_common+0x26>
 800829a:	3301      	adds	r3, #1
 800829c:	6033      	str	r3, [r6, #0]
 800829e:	6823      	ldr	r3, [r4, #0]
 80082a0:	0699      	lsls	r1, r3, #26
 80082a2:	bf42      	ittt	mi
 80082a4:	6833      	ldrmi	r3, [r6, #0]
 80082a6:	3302      	addmi	r3, #2
 80082a8:	6033      	strmi	r3, [r6, #0]
 80082aa:	6825      	ldr	r5, [r4, #0]
 80082ac:	f015 0506 	ands.w	r5, r5, #6
 80082b0:	d106      	bne.n	80082c0 <_printf_common+0x48>
 80082b2:	f104 0a19 	add.w	sl, r4, #25
 80082b6:	68e3      	ldr	r3, [r4, #12]
 80082b8:	6832      	ldr	r2, [r6, #0]
 80082ba:	1a9b      	subs	r3, r3, r2
 80082bc:	42ab      	cmp	r3, r5
 80082be:	dc26      	bgt.n	800830e <_printf_common+0x96>
 80082c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80082c4:	6822      	ldr	r2, [r4, #0]
 80082c6:	3b00      	subs	r3, #0
 80082c8:	bf18      	it	ne
 80082ca:	2301      	movne	r3, #1
 80082cc:	0692      	lsls	r2, r2, #26
 80082ce:	d42b      	bmi.n	8008328 <_printf_common+0xb0>
 80082d0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80082d4:	4641      	mov	r1, r8
 80082d6:	4638      	mov	r0, r7
 80082d8:	47c8      	blx	r9
 80082da:	3001      	adds	r0, #1
 80082dc:	d01e      	beq.n	800831c <_printf_common+0xa4>
 80082de:	6823      	ldr	r3, [r4, #0]
 80082e0:	6922      	ldr	r2, [r4, #16]
 80082e2:	f003 0306 	and.w	r3, r3, #6
 80082e6:	2b04      	cmp	r3, #4
 80082e8:	bf02      	ittt	eq
 80082ea:	68e5      	ldreq	r5, [r4, #12]
 80082ec:	6833      	ldreq	r3, [r6, #0]
 80082ee:	1aed      	subeq	r5, r5, r3
 80082f0:	68a3      	ldr	r3, [r4, #8]
 80082f2:	bf0c      	ite	eq
 80082f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80082f8:	2500      	movne	r5, #0
 80082fa:	4293      	cmp	r3, r2
 80082fc:	bfc4      	itt	gt
 80082fe:	1a9b      	subgt	r3, r3, r2
 8008300:	18ed      	addgt	r5, r5, r3
 8008302:	2600      	movs	r6, #0
 8008304:	341a      	adds	r4, #26
 8008306:	42b5      	cmp	r5, r6
 8008308:	d11a      	bne.n	8008340 <_printf_common+0xc8>
 800830a:	2000      	movs	r0, #0
 800830c:	e008      	b.n	8008320 <_printf_common+0xa8>
 800830e:	2301      	movs	r3, #1
 8008310:	4652      	mov	r2, sl
 8008312:	4641      	mov	r1, r8
 8008314:	4638      	mov	r0, r7
 8008316:	47c8      	blx	r9
 8008318:	3001      	adds	r0, #1
 800831a:	d103      	bne.n	8008324 <_printf_common+0xac>
 800831c:	f04f 30ff 	mov.w	r0, #4294967295
 8008320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008324:	3501      	adds	r5, #1
 8008326:	e7c6      	b.n	80082b6 <_printf_common+0x3e>
 8008328:	18e1      	adds	r1, r4, r3
 800832a:	1c5a      	adds	r2, r3, #1
 800832c:	2030      	movs	r0, #48	@ 0x30
 800832e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008332:	4422      	add	r2, r4
 8008334:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008338:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800833c:	3302      	adds	r3, #2
 800833e:	e7c7      	b.n	80082d0 <_printf_common+0x58>
 8008340:	2301      	movs	r3, #1
 8008342:	4622      	mov	r2, r4
 8008344:	4641      	mov	r1, r8
 8008346:	4638      	mov	r0, r7
 8008348:	47c8      	blx	r9
 800834a:	3001      	adds	r0, #1
 800834c:	d0e6      	beq.n	800831c <_printf_common+0xa4>
 800834e:	3601      	adds	r6, #1
 8008350:	e7d9      	b.n	8008306 <_printf_common+0x8e>
	...

08008354 <_printf_i>:
 8008354:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008358:	7e0f      	ldrb	r7, [r1, #24]
 800835a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800835c:	2f78      	cmp	r7, #120	@ 0x78
 800835e:	4691      	mov	r9, r2
 8008360:	4680      	mov	r8, r0
 8008362:	460c      	mov	r4, r1
 8008364:	469a      	mov	sl, r3
 8008366:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800836a:	d807      	bhi.n	800837c <_printf_i+0x28>
 800836c:	2f62      	cmp	r7, #98	@ 0x62
 800836e:	d80a      	bhi.n	8008386 <_printf_i+0x32>
 8008370:	2f00      	cmp	r7, #0
 8008372:	f000 80d2 	beq.w	800851a <_printf_i+0x1c6>
 8008376:	2f58      	cmp	r7, #88	@ 0x58
 8008378:	f000 80b9 	beq.w	80084ee <_printf_i+0x19a>
 800837c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008380:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008384:	e03a      	b.n	80083fc <_printf_i+0xa8>
 8008386:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800838a:	2b15      	cmp	r3, #21
 800838c:	d8f6      	bhi.n	800837c <_printf_i+0x28>
 800838e:	a101      	add	r1, pc, #4	@ (adr r1, 8008394 <_printf_i+0x40>)
 8008390:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008394:	080083ed 	.word	0x080083ed
 8008398:	08008401 	.word	0x08008401
 800839c:	0800837d 	.word	0x0800837d
 80083a0:	0800837d 	.word	0x0800837d
 80083a4:	0800837d 	.word	0x0800837d
 80083a8:	0800837d 	.word	0x0800837d
 80083ac:	08008401 	.word	0x08008401
 80083b0:	0800837d 	.word	0x0800837d
 80083b4:	0800837d 	.word	0x0800837d
 80083b8:	0800837d 	.word	0x0800837d
 80083bc:	0800837d 	.word	0x0800837d
 80083c0:	08008501 	.word	0x08008501
 80083c4:	0800842b 	.word	0x0800842b
 80083c8:	080084bb 	.word	0x080084bb
 80083cc:	0800837d 	.word	0x0800837d
 80083d0:	0800837d 	.word	0x0800837d
 80083d4:	08008523 	.word	0x08008523
 80083d8:	0800837d 	.word	0x0800837d
 80083dc:	0800842b 	.word	0x0800842b
 80083e0:	0800837d 	.word	0x0800837d
 80083e4:	0800837d 	.word	0x0800837d
 80083e8:	080084c3 	.word	0x080084c3
 80083ec:	6833      	ldr	r3, [r6, #0]
 80083ee:	1d1a      	adds	r2, r3, #4
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	6032      	str	r2, [r6, #0]
 80083f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80083f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80083fc:	2301      	movs	r3, #1
 80083fe:	e09d      	b.n	800853c <_printf_i+0x1e8>
 8008400:	6833      	ldr	r3, [r6, #0]
 8008402:	6820      	ldr	r0, [r4, #0]
 8008404:	1d19      	adds	r1, r3, #4
 8008406:	6031      	str	r1, [r6, #0]
 8008408:	0606      	lsls	r6, r0, #24
 800840a:	d501      	bpl.n	8008410 <_printf_i+0xbc>
 800840c:	681d      	ldr	r5, [r3, #0]
 800840e:	e003      	b.n	8008418 <_printf_i+0xc4>
 8008410:	0645      	lsls	r5, r0, #25
 8008412:	d5fb      	bpl.n	800840c <_printf_i+0xb8>
 8008414:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008418:	2d00      	cmp	r5, #0
 800841a:	da03      	bge.n	8008424 <_printf_i+0xd0>
 800841c:	232d      	movs	r3, #45	@ 0x2d
 800841e:	426d      	negs	r5, r5
 8008420:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008424:	4859      	ldr	r0, [pc, #356]	@ (800858c <_printf_i+0x238>)
 8008426:	230a      	movs	r3, #10
 8008428:	e011      	b.n	800844e <_printf_i+0xfa>
 800842a:	6821      	ldr	r1, [r4, #0]
 800842c:	6833      	ldr	r3, [r6, #0]
 800842e:	0608      	lsls	r0, r1, #24
 8008430:	f853 5b04 	ldr.w	r5, [r3], #4
 8008434:	d402      	bmi.n	800843c <_printf_i+0xe8>
 8008436:	0649      	lsls	r1, r1, #25
 8008438:	bf48      	it	mi
 800843a:	b2ad      	uxthmi	r5, r5
 800843c:	2f6f      	cmp	r7, #111	@ 0x6f
 800843e:	4853      	ldr	r0, [pc, #332]	@ (800858c <_printf_i+0x238>)
 8008440:	6033      	str	r3, [r6, #0]
 8008442:	bf14      	ite	ne
 8008444:	230a      	movne	r3, #10
 8008446:	2308      	moveq	r3, #8
 8008448:	2100      	movs	r1, #0
 800844a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800844e:	6866      	ldr	r6, [r4, #4]
 8008450:	60a6      	str	r6, [r4, #8]
 8008452:	2e00      	cmp	r6, #0
 8008454:	bfa2      	ittt	ge
 8008456:	6821      	ldrge	r1, [r4, #0]
 8008458:	f021 0104 	bicge.w	r1, r1, #4
 800845c:	6021      	strge	r1, [r4, #0]
 800845e:	b90d      	cbnz	r5, 8008464 <_printf_i+0x110>
 8008460:	2e00      	cmp	r6, #0
 8008462:	d04b      	beq.n	80084fc <_printf_i+0x1a8>
 8008464:	4616      	mov	r6, r2
 8008466:	fbb5 f1f3 	udiv	r1, r5, r3
 800846a:	fb03 5711 	mls	r7, r3, r1, r5
 800846e:	5dc7      	ldrb	r7, [r0, r7]
 8008470:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008474:	462f      	mov	r7, r5
 8008476:	42bb      	cmp	r3, r7
 8008478:	460d      	mov	r5, r1
 800847a:	d9f4      	bls.n	8008466 <_printf_i+0x112>
 800847c:	2b08      	cmp	r3, #8
 800847e:	d10b      	bne.n	8008498 <_printf_i+0x144>
 8008480:	6823      	ldr	r3, [r4, #0]
 8008482:	07df      	lsls	r7, r3, #31
 8008484:	d508      	bpl.n	8008498 <_printf_i+0x144>
 8008486:	6923      	ldr	r3, [r4, #16]
 8008488:	6861      	ldr	r1, [r4, #4]
 800848a:	4299      	cmp	r1, r3
 800848c:	bfde      	ittt	le
 800848e:	2330      	movle	r3, #48	@ 0x30
 8008490:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008494:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008498:	1b92      	subs	r2, r2, r6
 800849a:	6122      	str	r2, [r4, #16]
 800849c:	f8cd a000 	str.w	sl, [sp]
 80084a0:	464b      	mov	r3, r9
 80084a2:	aa03      	add	r2, sp, #12
 80084a4:	4621      	mov	r1, r4
 80084a6:	4640      	mov	r0, r8
 80084a8:	f7ff fee6 	bl	8008278 <_printf_common>
 80084ac:	3001      	adds	r0, #1
 80084ae:	d14a      	bne.n	8008546 <_printf_i+0x1f2>
 80084b0:	f04f 30ff 	mov.w	r0, #4294967295
 80084b4:	b004      	add	sp, #16
 80084b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084ba:	6823      	ldr	r3, [r4, #0]
 80084bc:	f043 0320 	orr.w	r3, r3, #32
 80084c0:	6023      	str	r3, [r4, #0]
 80084c2:	4833      	ldr	r0, [pc, #204]	@ (8008590 <_printf_i+0x23c>)
 80084c4:	2778      	movs	r7, #120	@ 0x78
 80084c6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80084ca:	6823      	ldr	r3, [r4, #0]
 80084cc:	6831      	ldr	r1, [r6, #0]
 80084ce:	061f      	lsls	r7, r3, #24
 80084d0:	f851 5b04 	ldr.w	r5, [r1], #4
 80084d4:	d402      	bmi.n	80084dc <_printf_i+0x188>
 80084d6:	065f      	lsls	r7, r3, #25
 80084d8:	bf48      	it	mi
 80084da:	b2ad      	uxthmi	r5, r5
 80084dc:	6031      	str	r1, [r6, #0]
 80084de:	07d9      	lsls	r1, r3, #31
 80084e0:	bf44      	itt	mi
 80084e2:	f043 0320 	orrmi.w	r3, r3, #32
 80084e6:	6023      	strmi	r3, [r4, #0]
 80084e8:	b11d      	cbz	r5, 80084f2 <_printf_i+0x19e>
 80084ea:	2310      	movs	r3, #16
 80084ec:	e7ac      	b.n	8008448 <_printf_i+0xf4>
 80084ee:	4827      	ldr	r0, [pc, #156]	@ (800858c <_printf_i+0x238>)
 80084f0:	e7e9      	b.n	80084c6 <_printf_i+0x172>
 80084f2:	6823      	ldr	r3, [r4, #0]
 80084f4:	f023 0320 	bic.w	r3, r3, #32
 80084f8:	6023      	str	r3, [r4, #0]
 80084fa:	e7f6      	b.n	80084ea <_printf_i+0x196>
 80084fc:	4616      	mov	r6, r2
 80084fe:	e7bd      	b.n	800847c <_printf_i+0x128>
 8008500:	6833      	ldr	r3, [r6, #0]
 8008502:	6825      	ldr	r5, [r4, #0]
 8008504:	6961      	ldr	r1, [r4, #20]
 8008506:	1d18      	adds	r0, r3, #4
 8008508:	6030      	str	r0, [r6, #0]
 800850a:	062e      	lsls	r6, r5, #24
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	d501      	bpl.n	8008514 <_printf_i+0x1c0>
 8008510:	6019      	str	r1, [r3, #0]
 8008512:	e002      	b.n	800851a <_printf_i+0x1c6>
 8008514:	0668      	lsls	r0, r5, #25
 8008516:	d5fb      	bpl.n	8008510 <_printf_i+0x1bc>
 8008518:	8019      	strh	r1, [r3, #0]
 800851a:	2300      	movs	r3, #0
 800851c:	6123      	str	r3, [r4, #16]
 800851e:	4616      	mov	r6, r2
 8008520:	e7bc      	b.n	800849c <_printf_i+0x148>
 8008522:	6833      	ldr	r3, [r6, #0]
 8008524:	1d1a      	adds	r2, r3, #4
 8008526:	6032      	str	r2, [r6, #0]
 8008528:	681e      	ldr	r6, [r3, #0]
 800852a:	6862      	ldr	r2, [r4, #4]
 800852c:	2100      	movs	r1, #0
 800852e:	4630      	mov	r0, r6
 8008530:	f7f7 fe5e 	bl	80001f0 <memchr>
 8008534:	b108      	cbz	r0, 800853a <_printf_i+0x1e6>
 8008536:	1b80      	subs	r0, r0, r6
 8008538:	6060      	str	r0, [r4, #4]
 800853a:	6863      	ldr	r3, [r4, #4]
 800853c:	6123      	str	r3, [r4, #16]
 800853e:	2300      	movs	r3, #0
 8008540:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008544:	e7aa      	b.n	800849c <_printf_i+0x148>
 8008546:	6923      	ldr	r3, [r4, #16]
 8008548:	4632      	mov	r2, r6
 800854a:	4649      	mov	r1, r9
 800854c:	4640      	mov	r0, r8
 800854e:	47d0      	blx	sl
 8008550:	3001      	adds	r0, #1
 8008552:	d0ad      	beq.n	80084b0 <_printf_i+0x15c>
 8008554:	6823      	ldr	r3, [r4, #0]
 8008556:	079b      	lsls	r3, r3, #30
 8008558:	d413      	bmi.n	8008582 <_printf_i+0x22e>
 800855a:	68e0      	ldr	r0, [r4, #12]
 800855c:	9b03      	ldr	r3, [sp, #12]
 800855e:	4298      	cmp	r0, r3
 8008560:	bfb8      	it	lt
 8008562:	4618      	movlt	r0, r3
 8008564:	e7a6      	b.n	80084b4 <_printf_i+0x160>
 8008566:	2301      	movs	r3, #1
 8008568:	4632      	mov	r2, r6
 800856a:	4649      	mov	r1, r9
 800856c:	4640      	mov	r0, r8
 800856e:	47d0      	blx	sl
 8008570:	3001      	adds	r0, #1
 8008572:	d09d      	beq.n	80084b0 <_printf_i+0x15c>
 8008574:	3501      	adds	r5, #1
 8008576:	68e3      	ldr	r3, [r4, #12]
 8008578:	9903      	ldr	r1, [sp, #12]
 800857a:	1a5b      	subs	r3, r3, r1
 800857c:	42ab      	cmp	r3, r5
 800857e:	dcf2      	bgt.n	8008566 <_printf_i+0x212>
 8008580:	e7eb      	b.n	800855a <_printf_i+0x206>
 8008582:	2500      	movs	r5, #0
 8008584:	f104 0619 	add.w	r6, r4, #25
 8008588:	e7f5      	b.n	8008576 <_printf_i+0x222>
 800858a:	bf00      	nop
 800858c:	0800b4ec 	.word	0x0800b4ec
 8008590:	0800b4fd 	.word	0x0800b4fd

08008594 <__sflush_r>:
 8008594:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800859c:	0716      	lsls	r6, r2, #28
 800859e:	4605      	mov	r5, r0
 80085a0:	460c      	mov	r4, r1
 80085a2:	d454      	bmi.n	800864e <__sflush_r+0xba>
 80085a4:	684b      	ldr	r3, [r1, #4]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	dc02      	bgt.n	80085b0 <__sflush_r+0x1c>
 80085aa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	dd48      	ble.n	8008642 <__sflush_r+0xae>
 80085b0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80085b2:	2e00      	cmp	r6, #0
 80085b4:	d045      	beq.n	8008642 <__sflush_r+0xae>
 80085b6:	2300      	movs	r3, #0
 80085b8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80085bc:	682f      	ldr	r7, [r5, #0]
 80085be:	6a21      	ldr	r1, [r4, #32]
 80085c0:	602b      	str	r3, [r5, #0]
 80085c2:	d030      	beq.n	8008626 <__sflush_r+0x92>
 80085c4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80085c6:	89a3      	ldrh	r3, [r4, #12]
 80085c8:	0759      	lsls	r1, r3, #29
 80085ca:	d505      	bpl.n	80085d8 <__sflush_r+0x44>
 80085cc:	6863      	ldr	r3, [r4, #4]
 80085ce:	1ad2      	subs	r2, r2, r3
 80085d0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80085d2:	b10b      	cbz	r3, 80085d8 <__sflush_r+0x44>
 80085d4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80085d6:	1ad2      	subs	r2, r2, r3
 80085d8:	2300      	movs	r3, #0
 80085da:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80085dc:	6a21      	ldr	r1, [r4, #32]
 80085de:	4628      	mov	r0, r5
 80085e0:	47b0      	blx	r6
 80085e2:	1c43      	adds	r3, r0, #1
 80085e4:	89a3      	ldrh	r3, [r4, #12]
 80085e6:	d106      	bne.n	80085f6 <__sflush_r+0x62>
 80085e8:	6829      	ldr	r1, [r5, #0]
 80085ea:	291d      	cmp	r1, #29
 80085ec:	d82b      	bhi.n	8008646 <__sflush_r+0xb2>
 80085ee:	4a2a      	ldr	r2, [pc, #168]	@ (8008698 <__sflush_r+0x104>)
 80085f0:	410a      	asrs	r2, r1
 80085f2:	07d6      	lsls	r6, r2, #31
 80085f4:	d427      	bmi.n	8008646 <__sflush_r+0xb2>
 80085f6:	2200      	movs	r2, #0
 80085f8:	6062      	str	r2, [r4, #4]
 80085fa:	04d9      	lsls	r1, r3, #19
 80085fc:	6922      	ldr	r2, [r4, #16]
 80085fe:	6022      	str	r2, [r4, #0]
 8008600:	d504      	bpl.n	800860c <__sflush_r+0x78>
 8008602:	1c42      	adds	r2, r0, #1
 8008604:	d101      	bne.n	800860a <__sflush_r+0x76>
 8008606:	682b      	ldr	r3, [r5, #0]
 8008608:	b903      	cbnz	r3, 800860c <__sflush_r+0x78>
 800860a:	6560      	str	r0, [r4, #84]	@ 0x54
 800860c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800860e:	602f      	str	r7, [r5, #0]
 8008610:	b1b9      	cbz	r1, 8008642 <__sflush_r+0xae>
 8008612:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008616:	4299      	cmp	r1, r3
 8008618:	d002      	beq.n	8008620 <__sflush_r+0x8c>
 800861a:	4628      	mov	r0, r5
 800861c:	f7ff fbd4 	bl	8007dc8 <_free_r>
 8008620:	2300      	movs	r3, #0
 8008622:	6363      	str	r3, [r4, #52]	@ 0x34
 8008624:	e00d      	b.n	8008642 <__sflush_r+0xae>
 8008626:	2301      	movs	r3, #1
 8008628:	4628      	mov	r0, r5
 800862a:	47b0      	blx	r6
 800862c:	4602      	mov	r2, r0
 800862e:	1c50      	adds	r0, r2, #1
 8008630:	d1c9      	bne.n	80085c6 <__sflush_r+0x32>
 8008632:	682b      	ldr	r3, [r5, #0]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d0c6      	beq.n	80085c6 <__sflush_r+0x32>
 8008638:	2b1d      	cmp	r3, #29
 800863a:	d001      	beq.n	8008640 <__sflush_r+0xac>
 800863c:	2b16      	cmp	r3, #22
 800863e:	d11e      	bne.n	800867e <__sflush_r+0xea>
 8008640:	602f      	str	r7, [r5, #0]
 8008642:	2000      	movs	r0, #0
 8008644:	e022      	b.n	800868c <__sflush_r+0xf8>
 8008646:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800864a:	b21b      	sxth	r3, r3
 800864c:	e01b      	b.n	8008686 <__sflush_r+0xf2>
 800864e:	690f      	ldr	r7, [r1, #16]
 8008650:	2f00      	cmp	r7, #0
 8008652:	d0f6      	beq.n	8008642 <__sflush_r+0xae>
 8008654:	0793      	lsls	r3, r2, #30
 8008656:	680e      	ldr	r6, [r1, #0]
 8008658:	bf08      	it	eq
 800865a:	694b      	ldreq	r3, [r1, #20]
 800865c:	600f      	str	r7, [r1, #0]
 800865e:	bf18      	it	ne
 8008660:	2300      	movne	r3, #0
 8008662:	eba6 0807 	sub.w	r8, r6, r7
 8008666:	608b      	str	r3, [r1, #8]
 8008668:	f1b8 0f00 	cmp.w	r8, #0
 800866c:	dde9      	ble.n	8008642 <__sflush_r+0xae>
 800866e:	6a21      	ldr	r1, [r4, #32]
 8008670:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008672:	4643      	mov	r3, r8
 8008674:	463a      	mov	r2, r7
 8008676:	4628      	mov	r0, r5
 8008678:	47b0      	blx	r6
 800867a:	2800      	cmp	r0, #0
 800867c:	dc08      	bgt.n	8008690 <__sflush_r+0xfc>
 800867e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008682:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008686:	81a3      	strh	r3, [r4, #12]
 8008688:	f04f 30ff 	mov.w	r0, #4294967295
 800868c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008690:	4407      	add	r7, r0
 8008692:	eba8 0800 	sub.w	r8, r8, r0
 8008696:	e7e7      	b.n	8008668 <__sflush_r+0xd4>
 8008698:	dfbffffe 	.word	0xdfbffffe

0800869c <_fflush_r>:
 800869c:	b538      	push	{r3, r4, r5, lr}
 800869e:	690b      	ldr	r3, [r1, #16]
 80086a0:	4605      	mov	r5, r0
 80086a2:	460c      	mov	r4, r1
 80086a4:	b913      	cbnz	r3, 80086ac <_fflush_r+0x10>
 80086a6:	2500      	movs	r5, #0
 80086a8:	4628      	mov	r0, r5
 80086aa:	bd38      	pop	{r3, r4, r5, pc}
 80086ac:	b118      	cbz	r0, 80086b6 <_fflush_r+0x1a>
 80086ae:	6a03      	ldr	r3, [r0, #32]
 80086b0:	b90b      	cbnz	r3, 80086b6 <_fflush_r+0x1a>
 80086b2:	f7ff fa55 	bl	8007b60 <__sinit>
 80086b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d0f3      	beq.n	80086a6 <_fflush_r+0xa>
 80086be:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80086c0:	07d0      	lsls	r0, r2, #31
 80086c2:	d404      	bmi.n	80086ce <_fflush_r+0x32>
 80086c4:	0599      	lsls	r1, r3, #22
 80086c6:	d402      	bmi.n	80086ce <_fflush_r+0x32>
 80086c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80086ca:	f7ff fb5c 	bl	8007d86 <__retarget_lock_acquire_recursive>
 80086ce:	4628      	mov	r0, r5
 80086d0:	4621      	mov	r1, r4
 80086d2:	f7ff ff5f 	bl	8008594 <__sflush_r>
 80086d6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80086d8:	07da      	lsls	r2, r3, #31
 80086da:	4605      	mov	r5, r0
 80086dc:	d4e4      	bmi.n	80086a8 <_fflush_r+0xc>
 80086de:	89a3      	ldrh	r3, [r4, #12]
 80086e0:	059b      	lsls	r3, r3, #22
 80086e2:	d4e1      	bmi.n	80086a8 <_fflush_r+0xc>
 80086e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80086e6:	f7ff fb4f 	bl	8007d88 <__retarget_lock_release_recursive>
 80086ea:	e7dd      	b.n	80086a8 <_fflush_r+0xc>

080086ec <fiprintf>:
 80086ec:	b40e      	push	{r1, r2, r3}
 80086ee:	b503      	push	{r0, r1, lr}
 80086f0:	4601      	mov	r1, r0
 80086f2:	ab03      	add	r3, sp, #12
 80086f4:	4805      	ldr	r0, [pc, #20]	@ (800870c <fiprintf+0x20>)
 80086f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80086fa:	6800      	ldr	r0, [r0, #0]
 80086fc:	9301      	str	r3, [sp, #4]
 80086fe:	f000 f89d 	bl	800883c <_vfiprintf_r>
 8008702:	b002      	add	sp, #8
 8008704:	f85d eb04 	ldr.w	lr, [sp], #4
 8008708:	b003      	add	sp, #12
 800870a:	4770      	bx	lr
 800870c:	20000094 	.word	0x20000094

08008710 <memmove>:
 8008710:	4288      	cmp	r0, r1
 8008712:	b510      	push	{r4, lr}
 8008714:	eb01 0402 	add.w	r4, r1, r2
 8008718:	d902      	bls.n	8008720 <memmove+0x10>
 800871a:	4284      	cmp	r4, r0
 800871c:	4623      	mov	r3, r4
 800871e:	d807      	bhi.n	8008730 <memmove+0x20>
 8008720:	1e43      	subs	r3, r0, #1
 8008722:	42a1      	cmp	r1, r4
 8008724:	d008      	beq.n	8008738 <memmove+0x28>
 8008726:	f811 2b01 	ldrb.w	r2, [r1], #1
 800872a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800872e:	e7f8      	b.n	8008722 <memmove+0x12>
 8008730:	4402      	add	r2, r0
 8008732:	4601      	mov	r1, r0
 8008734:	428a      	cmp	r2, r1
 8008736:	d100      	bne.n	800873a <memmove+0x2a>
 8008738:	bd10      	pop	{r4, pc}
 800873a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800873e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008742:	e7f7      	b.n	8008734 <memmove+0x24>

08008744 <_sbrk_r>:
 8008744:	b538      	push	{r3, r4, r5, lr}
 8008746:	4d06      	ldr	r5, [pc, #24]	@ (8008760 <_sbrk_r+0x1c>)
 8008748:	2300      	movs	r3, #0
 800874a:	4604      	mov	r4, r0
 800874c:	4608      	mov	r0, r1
 800874e:	602b      	str	r3, [r5, #0]
 8008750:	f7f8 fe56 	bl	8001400 <_sbrk>
 8008754:	1c43      	adds	r3, r0, #1
 8008756:	d102      	bne.n	800875e <_sbrk_r+0x1a>
 8008758:	682b      	ldr	r3, [r5, #0]
 800875a:	b103      	cbz	r3, 800875e <_sbrk_r+0x1a>
 800875c:	6023      	str	r3, [r4, #0]
 800875e:	bd38      	pop	{r3, r4, r5, pc}
 8008760:	200006c4 	.word	0x200006c4

08008764 <memcpy>:
 8008764:	440a      	add	r2, r1
 8008766:	4291      	cmp	r1, r2
 8008768:	f100 33ff 	add.w	r3, r0, #4294967295
 800876c:	d100      	bne.n	8008770 <memcpy+0xc>
 800876e:	4770      	bx	lr
 8008770:	b510      	push	{r4, lr}
 8008772:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008776:	f803 4f01 	strb.w	r4, [r3, #1]!
 800877a:	4291      	cmp	r1, r2
 800877c:	d1f9      	bne.n	8008772 <memcpy+0xe>
 800877e:	bd10      	pop	{r4, pc}

08008780 <abort>:
 8008780:	b508      	push	{r3, lr}
 8008782:	2006      	movs	r0, #6
 8008784:	f000 fa2e 	bl	8008be4 <raise>
 8008788:	2001      	movs	r0, #1
 800878a:	f7f8 fdc0 	bl	800130e <_exit>

0800878e <_realloc_r>:
 800878e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008792:	4680      	mov	r8, r0
 8008794:	4615      	mov	r5, r2
 8008796:	460c      	mov	r4, r1
 8008798:	b921      	cbnz	r1, 80087a4 <_realloc_r+0x16>
 800879a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800879e:	4611      	mov	r1, r2
 80087a0:	f7ff bb86 	b.w	8007eb0 <_malloc_r>
 80087a4:	b92a      	cbnz	r2, 80087b2 <_realloc_r+0x24>
 80087a6:	f7ff fb0f 	bl	8007dc8 <_free_r>
 80087aa:	2400      	movs	r4, #0
 80087ac:	4620      	mov	r0, r4
 80087ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087b2:	f000 fa33 	bl	8008c1c <_malloc_usable_size_r>
 80087b6:	4285      	cmp	r5, r0
 80087b8:	4606      	mov	r6, r0
 80087ba:	d802      	bhi.n	80087c2 <_realloc_r+0x34>
 80087bc:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80087c0:	d8f4      	bhi.n	80087ac <_realloc_r+0x1e>
 80087c2:	4629      	mov	r1, r5
 80087c4:	4640      	mov	r0, r8
 80087c6:	f7ff fb73 	bl	8007eb0 <_malloc_r>
 80087ca:	4607      	mov	r7, r0
 80087cc:	2800      	cmp	r0, #0
 80087ce:	d0ec      	beq.n	80087aa <_realloc_r+0x1c>
 80087d0:	42b5      	cmp	r5, r6
 80087d2:	462a      	mov	r2, r5
 80087d4:	4621      	mov	r1, r4
 80087d6:	bf28      	it	cs
 80087d8:	4632      	movcs	r2, r6
 80087da:	f7ff ffc3 	bl	8008764 <memcpy>
 80087de:	4621      	mov	r1, r4
 80087e0:	4640      	mov	r0, r8
 80087e2:	f7ff faf1 	bl	8007dc8 <_free_r>
 80087e6:	463c      	mov	r4, r7
 80087e8:	e7e0      	b.n	80087ac <_realloc_r+0x1e>

080087ea <__sfputc_r>:
 80087ea:	6893      	ldr	r3, [r2, #8]
 80087ec:	3b01      	subs	r3, #1
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	b410      	push	{r4}
 80087f2:	6093      	str	r3, [r2, #8]
 80087f4:	da08      	bge.n	8008808 <__sfputc_r+0x1e>
 80087f6:	6994      	ldr	r4, [r2, #24]
 80087f8:	42a3      	cmp	r3, r4
 80087fa:	db01      	blt.n	8008800 <__sfputc_r+0x16>
 80087fc:	290a      	cmp	r1, #10
 80087fe:	d103      	bne.n	8008808 <__sfputc_r+0x1e>
 8008800:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008804:	f000 b932 	b.w	8008a6c <__swbuf_r>
 8008808:	6813      	ldr	r3, [r2, #0]
 800880a:	1c58      	adds	r0, r3, #1
 800880c:	6010      	str	r0, [r2, #0]
 800880e:	7019      	strb	r1, [r3, #0]
 8008810:	4608      	mov	r0, r1
 8008812:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008816:	4770      	bx	lr

08008818 <__sfputs_r>:
 8008818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800881a:	4606      	mov	r6, r0
 800881c:	460f      	mov	r7, r1
 800881e:	4614      	mov	r4, r2
 8008820:	18d5      	adds	r5, r2, r3
 8008822:	42ac      	cmp	r4, r5
 8008824:	d101      	bne.n	800882a <__sfputs_r+0x12>
 8008826:	2000      	movs	r0, #0
 8008828:	e007      	b.n	800883a <__sfputs_r+0x22>
 800882a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800882e:	463a      	mov	r2, r7
 8008830:	4630      	mov	r0, r6
 8008832:	f7ff ffda 	bl	80087ea <__sfputc_r>
 8008836:	1c43      	adds	r3, r0, #1
 8008838:	d1f3      	bne.n	8008822 <__sfputs_r+0xa>
 800883a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800883c <_vfiprintf_r>:
 800883c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008840:	460d      	mov	r5, r1
 8008842:	b09d      	sub	sp, #116	@ 0x74
 8008844:	4614      	mov	r4, r2
 8008846:	4698      	mov	r8, r3
 8008848:	4606      	mov	r6, r0
 800884a:	b118      	cbz	r0, 8008854 <_vfiprintf_r+0x18>
 800884c:	6a03      	ldr	r3, [r0, #32]
 800884e:	b90b      	cbnz	r3, 8008854 <_vfiprintf_r+0x18>
 8008850:	f7ff f986 	bl	8007b60 <__sinit>
 8008854:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008856:	07d9      	lsls	r1, r3, #31
 8008858:	d405      	bmi.n	8008866 <_vfiprintf_r+0x2a>
 800885a:	89ab      	ldrh	r3, [r5, #12]
 800885c:	059a      	lsls	r2, r3, #22
 800885e:	d402      	bmi.n	8008866 <_vfiprintf_r+0x2a>
 8008860:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008862:	f7ff fa90 	bl	8007d86 <__retarget_lock_acquire_recursive>
 8008866:	89ab      	ldrh	r3, [r5, #12]
 8008868:	071b      	lsls	r3, r3, #28
 800886a:	d501      	bpl.n	8008870 <_vfiprintf_r+0x34>
 800886c:	692b      	ldr	r3, [r5, #16]
 800886e:	b99b      	cbnz	r3, 8008898 <_vfiprintf_r+0x5c>
 8008870:	4629      	mov	r1, r5
 8008872:	4630      	mov	r0, r6
 8008874:	f000 f938 	bl	8008ae8 <__swsetup_r>
 8008878:	b170      	cbz	r0, 8008898 <_vfiprintf_r+0x5c>
 800887a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800887c:	07dc      	lsls	r4, r3, #31
 800887e:	d504      	bpl.n	800888a <_vfiprintf_r+0x4e>
 8008880:	f04f 30ff 	mov.w	r0, #4294967295
 8008884:	b01d      	add	sp, #116	@ 0x74
 8008886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800888a:	89ab      	ldrh	r3, [r5, #12]
 800888c:	0598      	lsls	r0, r3, #22
 800888e:	d4f7      	bmi.n	8008880 <_vfiprintf_r+0x44>
 8008890:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008892:	f7ff fa79 	bl	8007d88 <__retarget_lock_release_recursive>
 8008896:	e7f3      	b.n	8008880 <_vfiprintf_r+0x44>
 8008898:	2300      	movs	r3, #0
 800889a:	9309      	str	r3, [sp, #36]	@ 0x24
 800889c:	2320      	movs	r3, #32
 800889e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80088a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80088a6:	2330      	movs	r3, #48	@ 0x30
 80088a8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008a58 <_vfiprintf_r+0x21c>
 80088ac:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80088b0:	f04f 0901 	mov.w	r9, #1
 80088b4:	4623      	mov	r3, r4
 80088b6:	469a      	mov	sl, r3
 80088b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80088bc:	b10a      	cbz	r2, 80088c2 <_vfiprintf_r+0x86>
 80088be:	2a25      	cmp	r2, #37	@ 0x25
 80088c0:	d1f9      	bne.n	80088b6 <_vfiprintf_r+0x7a>
 80088c2:	ebba 0b04 	subs.w	fp, sl, r4
 80088c6:	d00b      	beq.n	80088e0 <_vfiprintf_r+0xa4>
 80088c8:	465b      	mov	r3, fp
 80088ca:	4622      	mov	r2, r4
 80088cc:	4629      	mov	r1, r5
 80088ce:	4630      	mov	r0, r6
 80088d0:	f7ff ffa2 	bl	8008818 <__sfputs_r>
 80088d4:	3001      	adds	r0, #1
 80088d6:	f000 80a7 	beq.w	8008a28 <_vfiprintf_r+0x1ec>
 80088da:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80088dc:	445a      	add	r2, fp
 80088de:	9209      	str	r2, [sp, #36]	@ 0x24
 80088e0:	f89a 3000 	ldrb.w	r3, [sl]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	f000 809f 	beq.w	8008a28 <_vfiprintf_r+0x1ec>
 80088ea:	2300      	movs	r3, #0
 80088ec:	f04f 32ff 	mov.w	r2, #4294967295
 80088f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80088f4:	f10a 0a01 	add.w	sl, sl, #1
 80088f8:	9304      	str	r3, [sp, #16]
 80088fa:	9307      	str	r3, [sp, #28]
 80088fc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008900:	931a      	str	r3, [sp, #104]	@ 0x68
 8008902:	4654      	mov	r4, sl
 8008904:	2205      	movs	r2, #5
 8008906:	f814 1b01 	ldrb.w	r1, [r4], #1
 800890a:	4853      	ldr	r0, [pc, #332]	@ (8008a58 <_vfiprintf_r+0x21c>)
 800890c:	f7f7 fc70 	bl	80001f0 <memchr>
 8008910:	9a04      	ldr	r2, [sp, #16]
 8008912:	b9d8      	cbnz	r0, 800894c <_vfiprintf_r+0x110>
 8008914:	06d1      	lsls	r1, r2, #27
 8008916:	bf44      	itt	mi
 8008918:	2320      	movmi	r3, #32
 800891a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800891e:	0713      	lsls	r3, r2, #28
 8008920:	bf44      	itt	mi
 8008922:	232b      	movmi	r3, #43	@ 0x2b
 8008924:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008928:	f89a 3000 	ldrb.w	r3, [sl]
 800892c:	2b2a      	cmp	r3, #42	@ 0x2a
 800892e:	d015      	beq.n	800895c <_vfiprintf_r+0x120>
 8008930:	9a07      	ldr	r2, [sp, #28]
 8008932:	4654      	mov	r4, sl
 8008934:	2000      	movs	r0, #0
 8008936:	f04f 0c0a 	mov.w	ip, #10
 800893a:	4621      	mov	r1, r4
 800893c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008940:	3b30      	subs	r3, #48	@ 0x30
 8008942:	2b09      	cmp	r3, #9
 8008944:	d94b      	bls.n	80089de <_vfiprintf_r+0x1a2>
 8008946:	b1b0      	cbz	r0, 8008976 <_vfiprintf_r+0x13a>
 8008948:	9207      	str	r2, [sp, #28]
 800894a:	e014      	b.n	8008976 <_vfiprintf_r+0x13a>
 800894c:	eba0 0308 	sub.w	r3, r0, r8
 8008950:	fa09 f303 	lsl.w	r3, r9, r3
 8008954:	4313      	orrs	r3, r2
 8008956:	9304      	str	r3, [sp, #16]
 8008958:	46a2      	mov	sl, r4
 800895a:	e7d2      	b.n	8008902 <_vfiprintf_r+0xc6>
 800895c:	9b03      	ldr	r3, [sp, #12]
 800895e:	1d19      	adds	r1, r3, #4
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	9103      	str	r1, [sp, #12]
 8008964:	2b00      	cmp	r3, #0
 8008966:	bfbb      	ittet	lt
 8008968:	425b      	neglt	r3, r3
 800896a:	f042 0202 	orrlt.w	r2, r2, #2
 800896e:	9307      	strge	r3, [sp, #28]
 8008970:	9307      	strlt	r3, [sp, #28]
 8008972:	bfb8      	it	lt
 8008974:	9204      	strlt	r2, [sp, #16]
 8008976:	7823      	ldrb	r3, [r4, #0]
 8008978:	2b2e      	cmp	r3, #46	@ 0x2e
 800897a:	d10a      	bne.n	8008992 <_vfiprintf_r+0x156>
 800897c:	7863      	ldrb	r3, [r4, #1]
 800897e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008980:	d132      	bne.n	80089e8 <_vfiprintf_r+0x1ac>
 8008982:	9b03      	ldr	r3, [sp, #12]
 8008984:	1d1a      	adds	r2, r3, #4
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	9203      	str	r2, [sp, #12]
 800898a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800898e:	3402      	adds	r4, #2
 8008990:	9305      	str	r3, [sp, #20]
 8008992:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008a68 <_vfiprintf_r+0x22c>
 8008996:	7821      	ldrb	r1, [r4, #0]
 8008998:	2203      	movs	r2, #3
 800899a:	4650      	mov	r0, sl
 800899c:	f7f7 fc28 	bl	80001f0 <memchr>
 80089a0:	b138      	cbz	r0, 80089b2 <_vfiprintf_r+0x176>
 80089a2:	9b04      	ldr	r3, [sp, #16]
 80089a4:	eba0 000a 	sub.w	r0, r0, sl
 80089a8:	2240      	movs	r2, #64	@ 0x40
 80089aa:	4082      	lsls	r2, r0
 80089ac:	4313      	orrs	r3, r2
 80089ae:	3401      	adds	r4, #1
 80089b0:	9304      	str	r3, [sp, #16]
 80089b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089b6:	4829      	ldr	r0, [pc, #164]	@ (8008a5c <_vfiprintf_r+0x220>)
 80089b8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80089bc:	2206      	movs	r2, #6
 80089be:	f7f7 fc17 	bl	80001f0 <memchr>
 80089c2:	2800      	cmp	r0, #0
 80089c4:	d03f      	beq.n	8008a46 <_vfiprintf_r+0x20a>
 80089c6:	4b26      	ldr	r3, [pc, #152]	@ (8008a60 <_vfiprintf_r+0x224>)
 80089c8:	bb1b      	cbnz	r3, 8008a12 <_vfiprintf_r+0x1d6>
 80089ca:	9b03      	ldr	r3, [sp, #12]
 80089cc:	3307      	adds	r3, #7
 80089ce:	f023 0307 	bic.w	r3, r3, #7
 80089d2:	3308      	adds	r3, #8
 80089d4:	9303      	str	r3, [sp, #12]
 80089d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089d8:	443b      	add	r3, r7
 80089da:	9309      	str	r3, [sp, #36]	@ 0x24
 80089dc:	e76a      	b.n	80088b4 <_vfiprintf_r+0x78>
 80089de:	fb0c 3202 	mla	r2, ip, r2, r3
 80089e2:	460c      	mov	r4, r1
 80089e4:	2001      	movs	r0, #1
 80089e6:	e7a8      	b.n	800893a <_vfiprintf_r+0xfe>
 80089e8:	2300      	movs	r3, #0
 80089ea:	3401      	adds	r4, #1
 80089ec:	9305      	str	r3, [sp, #20]
 80089ee:	4619      	mov	r1, r3
 80089f0:	f04f 0c0a 	mov.w	ip, #10
 80089f4:	4620      	mov	r0, r4
 80089f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80089fa:	3a30      	subs	r2, #48	@ 0x30
 80089fc:	2a09      	cmp	r2, #9
 80089fe:	d903      	bls.n	8008a08 <_vfiprintf_r+0x1cc>
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d0c6      	beq.n	8008992 <_vfiprintf_r+0x156>
 8008a04:	9105      	str	r1, [sp, #20]
 8008a06:	e7c4      	b.n	8008992 <_vfiprintf_r+0x156>
 8008a08:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a0c:	4604      	mov	r4, r0
 8008a0e:	2301      	movs	r3, #1
 8008a10:	e7f0      	b.n	80089f4 <_vfiprintf_r+0x1b8>
 8008a12:	ab03      	add	r3, sp, #12
 8008a14:	9300      	str	r3, [sp, #0]
 8008a16:	462a      	mov	r2, r5
 8008a18:	4b12      	ldr	r3, [pc, #72]	@ (8008a64 <_vfiprintf_r+0x228>)
 8008a1a:	a904      	add	r1, sp, #16
 8008a1c:	4630      	mov	r0, r6
 8008a1e:	f3af 8000 	nop.w
 8008a22:	4607      	mov	r7, r0
 8008a24:	1c78      	adds	r0, r7, #1
 8008a26:	d1d6      	bne.n	80089d6 <_vfiprintf_r+0x19a>
 8008a28:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008a2a:	07d9      	lsls	r1, r3, #31
 8008a2c:	d405      	bmi.n	8008a3a <_vfiprintf_r+0x1fe>
 8008a2e:	89ab      	ldrh	r3, [r5, #12]
 8008a30:	059a      	lsls	r2, r3, #22
 8008a32:	d402      	bmi.n	8008a3a <_vfiprintf_r+0x1fe>
 8008a34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008a36:	f7ff f9a7 	bl	8007d88 <__retarget_lock_release_recursive>
 8008a3a:	89ab      	ldrh	r3, [r5, #12]
 8008a3c:	065b      	lsls	r3, r3, #25
 8008a3e:	f53f af1f 	bmi.w	8008880 <_vfiprintf_r+0x44>
 8008a42:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008a44:	e71e      	b.n	8008884 <_vfiprintf_r+0x48>
 8008a46:	ab03      	add	r3, sp, #12
 8008a48:	9300      	str	r3, [sp, #0]
 8008a4a:	462a      	mov	r2, r5
 8008a4c:	4b05      	ldr	r3, [pc, #20]	@ (8008a64 <_vfiprintf_r+0x228>)
 8008a4e:	a904      	add	r1, sp, #16
 8008a50:	4630      	mov	r0, r6
 8008a52:	f7ff fc7f 	bl	8008354 <_printf_i>
 8008a56:	e7e4      	b.n	8008a22 <_vfiprintf_r+0x1e6>
 8008a58:	0800b4db 	.word	0x0800b4db
 8008a5c:	0800b4e5 	.word	0x0800b4e5
 8008a60:	00000000 	.word	0x00000000
 8008a64:	08008819 	.word	0x08008819
 8008a68:	0800b4e1 	.word	0x0800b4e1

08008a6c <__swbuf_r>:
 8008a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a6e:	460e      	mov	r6, r1
 8008a70:	4614      	mov	r4, r2
 8008a72:	4605      	mov	r5, r0
 8008a74:	b118      	cbz	r0, 8008a7e <__swbuf_r+0x12>
 8008a76:	6a03      	ldr	r3, [r0, #32]
 8008a78:	b90b      	cbnz	r3, 8008a7e <__swbuf_r+0x12>
 8008a7a:	f7ff f871 	bl	8007b60 <__sinit>
 8008a7e:	69a3      	ldr	r3, [r4, #24]
 8008a80:	60a3      	str	r3, [r4, #8]
 8008a82:	89a3      	ldrh	r3, [r4, #12]
 8008a84:	071a      	lsls	r2, r3, #28
 8008a86:	d501      	bpl.n	8008a8c <__swbuf_r+0x20>
 8008a88:	6923      	ldr	r3, [r4, #16]
 8008a8a:	b943      	cbnz	r3, 8008a9e <__swbuf_r+0x32>
 8008a8c:	4621      	mov	r1, r4
 8008a8e:	4628      	mov	r0, r5
 8008a90:	f000 f82a 	bl	8008ae8 <__swsetup_r>
 8008a94:	b118      	cbz	r0, 8008a9e <__swbuf_r+0x32>
 8008a96:	f04f 37ff 	mov.w	r7, #4294967295
 8008a9a:	4638      	mov	r0, r7
 8008a9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a9e:	6823      	ldr	r3, [r4, #0]
 8008aa0:	6922      	ldr	r2, [r4, #16]
 8008aa2:	1a98      	subs	r0, r3, r2
 8008aa4:	6963      	ldr	r3, [r4, #20]
 8008aa6:	b2f6      	uxtb	r6, r6
 8008aa8:	4283      	cmp	r3, r0
 8008aaa:	4637      	mov	r7, r6
 8008aac:	dc05      	bgt.n	8008aba <__swbuf_r+0x4e>
 8008aae:	4621      	mov	r1, r4
 8008ab0:	4628      	mov	r0, r5
 8008ab2:	f7ff fdf3 	bl	800869c <_fflush_r>
 8008ab6:	2800      	cmp	r0, #0
 8008ab8:	d1ed      	bne.n	8008a96 <__swbuf_r+0x2a>
 8008aba:	68a3      	ldr	r3, [r4, #8]
 8008abc:	3b01      	subs	r3, #1
 8008abe:	60a3      	str	r3, [r4, #8]
 8008ac0:	6823      	ldr	r3, [r4, #0]
 8008ac2:	1c5a      	adds	r2, r3, #1
 8008ac4:	6022      	str	r2, [r4, #0]
 8008ac6:	701e      	strb	r6, [r3, #0]
 8008ac8:	6962      	ldr	r2, [r4, #20]
 8008aca:	1c43      	adds	r3, r0, #1
 8008acc:	429a      	cmp	r2, r3
 8008ace:	d004      	beq.n	8008ada <__swbuf_r+0x6e>
 8008ad0:	89a3      	ldrh	r3, [r4, #12]
 8008ad2:	07db      	lsls	r3, r3, #31
 8008ad4:	d5e1      	bpl.n	8008a9a <__swbuf_r+0x2e>
 8008ad6:	2e0a      	cmp	r6, #10
 8008ad8:	d1df      	bne.n	8008a9a <__swbuf_r+0x2e>
 8008ada:	4621      	mov	r1, r4
 8008adc:	4628      	mov	r0, r5
 8008ade:	f7ff fddd 	bl	800869c <_fflush_r>
 8008ae2:	2800      	cmp	r0, #0
 8008ae4:	d0d9      	beq.n	8008a9a <__swbuf_r+0x2e>
 8008ae6:	e7d6      	b.n	8008a96 <__swbuf_r+0x2a>

08008ae8 <__swsetup_r>:
 8008ae8:	b538      	push	{r3, r4, r5, lr}
 8008aea:	4b29      	ldr	r3, [pc, #164]	@ (8008b90 <__swsetup_r+0xa8>)
 8008aec:	4605      	mov	r5, r0
 8008aee:	6818      	ldr	r0, [r3, #0]
 8008af0:	460c      	mov	r4, r1
 8008af2:	b118      	cbz	r0, 8008afc <__swsetup_r+0x14>
 8008af4:	6a03      	ldr	r3, [r0, #32]
 8008af6:	b90b      	cbnz	r3, 8008afc <__swsetup_r+0x14>
 8008af8:	f7ff f832 	bl	8007b60 <__sinit>
 8008afc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b00:	0719      	lsls	r1, r3, #28
 8008b02:	d422      	bmi.n	8008b4a <__swsetup_r+0x62>
 8008b04:	06da      	lsls	r2, r3, #27
 8008b06:	d407      	bmi.n	8008b18 <__swsetup_r+0x30>
 8008b08:	2209      	movs	r2, #9
 8008b0a:	602a      	str	r2, [r5, #0]
 8008b0c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b10:	81a3      	strh	r3, [r4, #12]
 8008b12:	f04f 30ff 	mov.w	r0, #4294967295
 8008b16:	e033      	b.n	8008b80 <__swsetup_r+0x98>
 8008b18:	0758      	lsls	r0, r3, #29
 8008b1a:	d512      	bpl.n	8008b42 <__swsetup_r+0x5a>
 8008b1c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008b1e:	b141      	cbz	r1, 8008b32 <__swsetup_r+0x4a>
 8008b20:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008b24:	4299      	cmp	r1, r3
 8008b26:	d002      	beq.n	8008b2e <__swsetup_r+0x46>
 8008b28:	4628      	mov	r0, r5
 8008b2a:	f7ff f94d 	bl	8007dc8 <_free_r>
 8008b2e:	2300      	movs	r3, #0
 8008b30:	6363      	str	r3, [r4, #52]	@ 0x34
 8008b32:	89a3      	ldrh	r3, [r4, #12]
 8008b34:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008b38:	81a3      	strh	r3, [r4, #12]
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	6063      	str	r3, [r4, #4]
 8008b3e:	6923      	ldr	r3, [r4, #16]
 8008b40:	6023      	str	r3, [r4, #0]
 8008b42:	89a3      	ldrh	r3, [r4, #12]
 8008b44:	f043 0308 	orr.w	r3, r3, #8
 8008b48:	81a3      	strh	r3, [r4, #12]
 8008b4a:	6923      	ldr	r3, [r4, #16]
 8008b4c:	b94b      	cbnz	r3, 8008b62 <__swsetup_r+0x7a>
 8008b4e:	89a3      	ldrh	r3, [r4, #12]
 8008b50:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008b54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b58:	d003      	beq.n	8008b62 <__swsetup_r+0x7a>
 8008b5a:	4621      	mov	r1, r4
 8008b5c:	4628      	mov	r0, r5
 8008b5e:	f000 f88b 	bl	8008c78 <__smakebuf_r>
 8008b62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b66:	f013 0201 	ands.w	r2, r3, #1
 8008b6a:	d00a      	beq.n	8008b82 <__swsetup_r+0x9a>
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	60a2      	str	r2, [r4, #8]
 8008b70:	6962      	ldr	r2, [r4, #20]
 8008b72:	4252      	negs	r2, r2
 8008b74:	61a2      	str	r2, [r4, #24]
 8008b76:	6922      	ldr	r2, [r4, #16]
 8008b78:	b942      	cbnz	r2, 8008b8c <__swsetup_r+0xa4>
 8008b7a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008b7e:	d1c5      	bne.n	8008b0c <__swsetup_r+0x24>
 8008b80:	bd38      	pop	{r3, r4, r5, pc}
 8008b82:	0799      	lsls	r1, r3, #30
 8008b84:	bf58      	it	pl
 8008b86:	6962      	ldrpl	r2, [r4, #20]
 8008b88:	60a2      	str	r2, [r4, #8]
 8008b8a:	e7f4      	b.n	8008b76 <__swsetup_r+0x8e>
 8008b8c:	2000      	movs	r0, #0
 8008b8e:	e7f7      	b.n	8008b80 <__swsetup_r+0x98>
 8008b90:	20000094 	.word	0x20000094

08008b94 <_raise_r>:
 8008b94:	291f      	cmp	r1, #31
 8008b96:	b538      	push	{r3, r4, r5, lr}
 8008b98:	4605      	mov	r5, r0
 8008b9a:	460c      	mov	r4, r1
 8008b9c:	d904      	bls.n	8008ba8 <_raise_r+0x14>
 8008b9e:	2316      	movs	r3, #22
 8008ba0:	6003      	str	r3, [r0, #0]
 8008ba2:	f04f 30ff 	mov.w	r0, #4294967295
 8008ba6:	bd38      	pop	{r3, r4, r5, pc}
 8008ba8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008baa:	b112      	cbz	r2, 8008bb2 <_raise_r+0x1e>
 8008bac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008bb0:	b94b      	cbnz	r3, 8008bc6 <_raise_r+0x32>
 8008bb2:	4628      	mov	r0, r5
 8008bb4:	f000 f830 	bl	8008c18 <_getpid_r>
 8008bb8:	4622      	mov	r2, r4
 8008bba:	4601      	mov	r1, r0
 8008bbc:	4628      	mov	r0, r5
 8008bbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008bc2:	f000 b817 	b.w	8008bf4 <_kill_r>
 8008bc6:	2b01      	cmp	r3, #1
 8008bc8:	d00a      	beq.n	8008be0 <_raise_r+0x4c>
 8008bca:	1c59      	adds	r1, r3, #1
 8008bcc:	d103      	bne.n	8008bd6 <_raise_r+0x42>
 8008bce:	2316      	movs	r3, #22
 8008bd0:	6003      	str	r3, [r0, #0]
 8008bd2:	2001      	movs	r0, #1
 8008bd4:	e7e7      	b.n	8008ba6 <_raise_r+0x12>
 8008bd6:	2100      	movs	r1, #0
 8008bd8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008bdc:	4620      	mov	r0, r4
 8008bde:	4798      	blx	r3
 8008be0:	2000      	movs	r0, #0
 8008be2:	e7e0      	b.n	8008ba6 <_raise_r+0x12>

08008be4 <raise>:
 8008be4:	4b02      	ldr	r3, [pc, #8]	@ (8008bf0 <raise+0xc>)
 8008be6:	4601      	mov	r1, r0
 8008be8:	6818      	ldr	r0, [r3, #0]
 8008bea:	f7ff bfd3 	b.w	8008b94 <_raise_r>
 8008bee:	bf00      	nop
 8008bf0:	20000094 	.word	0x20000094

08008bf4 <_kill_r>:
 8008bf4:	b538      	push	{r3, r4, r5, lr}
 8008bf6:	4d07      	ldr	r5, [pc, #28]	@ (8008c14 <_kill_r+0x20>)
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	4604      	mov	r4, r0
 8008bfc:	4608      	mov	r0, r1
 8008bfe:	4611      	mov	r1, r2
 8008c00:	602b      	str	r3, [r5, #0]
 8008c02:	f7f8 fb74 	bl	80012ee <_kill>
 8008c06:	1c43      	adds	r3, r0, #1
 8008c08:	d102      	bne.n	8008c10 <_kill_r+0x1c>
 8008c0a:	682b      	ldr	r3, [r5, #0]
 8008c0c:	b103      	cbz	r3, 8008c10 <_kill_r+0x1c>
 8008c0e:	6023      	str	r3, [r4, #0]
 8008c10:	bd38      	pop	{r3, r4, r5, pc}
 8008c12:	bf00      	nop
 8008c14:	200006c4 	.word	0x200006c4

08008c18 <_getpid_r>:
 8008c18:	f7f8 bb61 	b.w	80012de <_getpid>

08008c1c <_malloc_usable_size_r>:
 8008c1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c20:	1f18      	subs	r0, r3, #4
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	bfbc      	itt	lt
 8008c26:	580b      	ldrlt	r3, [r1, r0]
 8008c28:	18c0      	addlt	r0, r0, r3
 8008c2a:	4770      	bx	lr

08008c2c <__swhatbuf_r>:
 8008c2c:	b570      	push	{r4, r5, r6, lr}
 8008c2e:	460c      	mov	r4, r1
 8008c30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c34:	2900      	cmp	r1, #0
 8008c36:	b096      	sub	sp, #88	@ 0x58
 8008c38:	4615      	mov	r5, r2
 8008c3a:	461e      	mov	r6, r3
 8008c3c:	da0d      	bge.n	8008c5a <__swhatbuf_r+0x2e>
 8008c3e:	89a3      	ldrh	r3, [r4, #12]
 8008c40:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008c44:	f04f 0100 	mov.w	r1, #0
 8008c48:	bf14      	ite	ne
 8008c4a:	2340      	movne	r3, #64	@ 0x40
 8008c4c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008c50:	2000      	movs	r0, #0
 8008c52:	6031      	str	r1, [r6, #0]
 8008c54:	602b      	str	r3, [r5, #0]
 8008c56:	b016      	add	sp, #88	@ 0x58
 8008c58:	bd70      	pop	{r4, r5, r6, pc}
 8008c5a:	466a      	mov	r2, sp
 8008c5c:	f000 f848 	bl	8008cf0 <_fstat_r>
 8008c60:	2800      	cmp	r0, #0
 8008c62:	dbec      	blt.n	8008c3e <__swhatbuf_r+0x12>
 8008c64:	9901      	ldr	r1, [sp, #4]
 8008c66:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008c6a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008c6e:	4259      	negs	r1, r3
 8008c70:	4159      	adcs	r1, r3
 8008c72:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008c76:	e7eb      	b.n	8008c50 <__swhatbuf_r+0x24>

08008c78 <__smakebuf_r>:
 8008c78:	898b      	ldrh	r3, [r1, #12]
 8008c7a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008c7c:	079d      	lsls	r5, r3, #30
 8008c7e:	4606      	mov	r6, r0
 8008c80:	460c      	mov	r4, r1
 8008c82:	d507      	bpl.n	8008c94 <__smakebuf_r+0x1c>
 8008c84:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008c88:	6023      	str	r3, [r4, #0]
 8008c8a:	6123      	str	r3, [r4, #16]
 8008c8c:	2301      	movs	r3, #1
 8008c8e:	6163      	str	r3, [r4, #20]
 8008c90:	b003      	add	sp, #12
 8008c92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c94:	ab01      	add	r3, sp, #4
 8008c96:	466a      	mov	r2, sp
 8008c98:	f7ff ffc8 	bl	8008c2c <__swhatbuf_r>
 8008c9c:	9f00      	ldr	r7, [sp, #0]
 8008c9e:	4605      	mov	r5, r0
 8008ca0:	4639      	mov	r1, r7
 8008ca2:	4630      	mov	r0, r6
 8008ca4:	f7ff f904 	bl	8007eb0 <_malloc_r>
 8008ca8:	b948      	cbnz	r0, 8008cbe <__smakebuf_r+0x46>
 8008caa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cae:	059a      	lsls	r2, r3, #22
 8008cb0:	d4ee      	bmi.n	8008c90 <__smakebuf_r+0x18>
 8008cb2:	f023 0303 	bic.w	r3, r3, #3
 8008cb6:	f043 0302 	orr.w	r3, r3, #2
 8008cba:	81a3      	strh	r3, [r4, #12]
 8008cbc:	e7e2      	b.n	8008c84 <__smakebuf_r+0xc>
 8008cbe:	89a3      	ldrh	r3, [r4, #12]
 8008cc0:	6020      	str	r0, [r4, #0]
 8008cc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008cc6:	81a3      	strh	r3, [r4, #12]
 8008cc8:	9b01      	ldr	r3, [sp, #4]
 8008cca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008cce:	b15b      	cbz	r3, 8008ce8 <__smakebuf_r+0x70>
 8008cd0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008cd4:	4630      	mov	r0, r6
 8008cd6:	f000 f81d 	bl	8008d14 <_isatty_r>
 8008cda:	b128      	cbz	r0, 8008ce8 <__smakebuf_r+0x70>
 8008cdc:	89a3      	ldrh	r3, [r4, #12]
 8008cde:	f023 0303 	bic.w	r3, r3, #3
 8008ce2:	f043 0301 	orr.w	r3, r3, #1
 8008ce6:	81a3      	strh	r3, [r4, #12]
 8008ce8:	89a3      	ldrh	r3, [r4, #12]
 8008cea:	431d      	orrs	r5, r3
 8008cec:	81a5      	strh	r5, [r4, #12]
 8008cee:	e7cf      	b.n	8008c90 <__smakebuf_r+0x18>

08008cf0 <_fstat_r>:
 8008cf0:	b538      	push	{r3, r4, r5, lr}
 8008cf2:	4d07      	ldr	r5, [pc, #28]	@ (8008d10 <_fstat_r+0x20>)
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	4604      	mov	r4, r0
 8008cf8:	4608      	mov	r0, r1
 8008cfa:	4611      	mov	r1, r2
 8008cfc:	602b      	str	r3, [r5, #0]
 8008cfe:	f7f8 fb56 	bl	80013ae <_fstat>
 8008d02:	1c43      	adds	r3, r0, #1
 8008d04:	d102      	bne.n	8008d0c <_fstat_r+0x1c>
 8008d06:	682b      	ldr	r3, [r5, #0]
 8008d08:	b103      	cbz	r3, 8008d0c <_fstat_r+0x1c>
 8008d0a:	6023      	str	r3, [r4, #0]
 8008d0c:	bd38      	pop	{r3, r4, r5, pc}
 8008d0e:	bf00      	nop
 8008d10:	200006c4 	.word	0x200006c4

08008d14 <_isatty_r>:
 8008d14:	b538      	push	{r3, r4, r5, lr}
 8008d16:	4d06      	ldr	r5, [pc, #24]	@ (8008d30 <_isatty_r+0x1c>)
 8008d18:	2300      	movs	r3, #0
 8008d1a:	4604      	mov	r4, r0
 8008d1c:	4608      	mov	r0, r1
 8008d1e:	602b      	str	r3, [r5, #0]
 8008d20:	f7f8 fb55 	bl	80013ce <_isatty>
 8008d24:	1c43      	adds	r3, r0, #1
 8008d26:	d102      	bne.n	8008d2e <_isatty_r+0x1a>
 8008d28:	682b      	ldr	r3, [r5, #0]
 8008d2a:	b103      	cbz	r3, 8008d2e <_isatty_r+0x1a>
 8008d2c:	6023      	str	r3, [r4, #0]
 8008d2e:	bd38      	pop	{r3, r4, r5, pc}
 8008d30:	200006c4 	.word	0x200006c4

08008d34 <_init>:
 8008d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d36:	bf00      	nop
 8008d38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d3a:	bc08      	pop	{r3}
 8008d3c:	469e      	mov	lr, r3
 8008d3e:	4770      	bx	lr

08008d40 <_fini>:
 8008d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d42:	bf00      	nop
 8008d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d46:	bc08      	pop	{r3}
 8008d48:	469e      	mov	lr, r3
 8008d4a:	4770      	bx	lr
